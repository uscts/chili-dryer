
two.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c48  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004d54  08004d54  00005d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d80  08004d80  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d80  08004d80  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d80  08004d80  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d80  08004d80  00005d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d84  08004d84  00005d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004d88  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  2000000c  08004d94  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  08004d94  00006624  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ca9  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd8  00000000  00000000  00018cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0001b8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f3f  00000000  00000000  0001cc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185a0  00000000  00000000  0001db47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016131  00000000  00000000  000360e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f50a  00000000  00000000  0004c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db722  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000535c  00000000  00000000  000db768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e0ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d3c 	.word	0x08004d3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004d3c 	.word	0x08004d3c

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__gesf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295
 80004d4:	e006      	b.n	80004e4 <__cmpsf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__lesf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpsf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpsf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004fa:	d011      	beq.n	8000520 <__cmpsf2+0x40>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000502:	bf18      	it	ne
 8000504:	ea90 0f01 	teqne	r0, r1
 8000508:	bf58      	it	pl
 800050a:	ebb2 0003 	subspl.w	r0, r2, r3
 800050e:	bf88      	it	hi
 8000510:	17c8      	asrhi	r0, r1, #31
 8000512:	bf38      	it	cc
 8000514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000518:	bf18      	it	ne
 800051a:	f040 0001 	orrne.w	r0, r0, #1
 800051e:	4770      	bx	lr
 8000520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000524:	d102      	bne.n	800052c <__cmpsf2+0x4c>
 8000526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800052a:	d105      	bne.n	8000538 <__cmpsf2+0x58>
 800052c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000530:	d1e4      	bne.n	80004fc <__cmpsf2+0x1c>
 8000532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000536:	d0e1      	beq.n	80004fc <__cmpsf2+0x1c>
 8000538:	f85d 0b04 	ldr.w	r0, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_cfrcmple>:
 8000540:	4684      	mov	ip, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4661      	mov	r1, ip
 8000546:	e7ff      	b.n	8000548 <__aeabi_cfcmpeq>

08000548 <__aeabi_cfcmpeq>:
 8000548:	b50f      	push	{r0, r1, r2, r3, lr}
 800054a:	f7ff ffc9 	bl	80004e0 <__cmpsf2>
 800054e:	2800      	cmp	r0, #0
 8000550:	bf48      	it	mi
 8000552:	f110 0f00 	cmnmi.w	r0, #0
 8000556:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000558 <__aeabi_fcmpeq>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff fff4 	bl	8000548 <__aeabi_cfcmpeq>
 8000560:	bf0c      	ite	eq
 8000562:	2001      	moveq	r0, #1
 8000564:	2000      	movne	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_fcmplt>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffea 	bl	8000548 <__aeabi_cfcmpeq>
 8000574:	bf34      	ite	cc
 8000576:	2001      	movcc	r0, #1
 8000578:	2000      	movcs	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_fcmple>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffe0 	bl	8000548 <__aeabi_cfcmpeq>
 8000588:	bf94      	ite	ls
 800058a:	2001      	movls	r0, #1
 800058c:	2000      	movhi	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_fcmpge>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffd2 	bl	8000540 <__aeabi_cfrcmple>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_fcmpgt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffc8 	bl	8000540 <__aeabi_cfrcmple>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_f2iz>:
 80005bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80005c4:	d30f      	bcc.n	80005e6 <__aeabi_f2iz+0x2a>
 80005c6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80005ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ce:	d90d      	bls.n	80005ec <__aeabi_f2iz+0x30>
 80005d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005d8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005dc:	fa23 f002 	lsr.w	r0, r3, r2
 80005e0:	bf18      	it	ne
 80005e2:	4240      	negne	r0, r0
 80005e4:	4770      	bx	lr
 80005e6:	f04f 0000 	mov.w	r0, #0
 80005ea:	4770      	bx	lr
 80005ec:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80005f0:	d101      	bne.n	80005f6 <__aeabi_f2iz+0x3a>
 80005f2:	0242      	lsls	r2, r0, #9
 80005f4:	d105      	bne.n	8000602 <__aeabi_f2iz+0x46>
 80005f6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80005fa:	bf08      	it	eq
 80005fc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000600:	4770      	bx	lr
 8000602:	f04f 0000 	mov.w	r0, #0
 8000606:	4770      	bx	lr

08000608 <isTemperSensorInit>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);	
}
#else

uint8_t isTemperSensorInit(){
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
	     return m_init;
 800060c:	4b02      	ldr	r3, [pc, #8]	@ (8000618 <isTemperSensorInit+0x10>)
 800060e:	781b      	ldrb	r3, [r3, #0]
}
 8000610:	4618      	mov	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	20000060 	.word	0x20000060

0800061c <isBusy>:

uint8_t isBusy(){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	return isBusyLine();
 8000620:	f000 fb92 	bl	8000d48 <isBusyLine>
 8000624:	4603      	mov	r3, r0
	//return m_busy;
}
 8000626:	4618      	mov	r0, r3
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <isConverting>:

uint8_t isConverting(){
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	     return m_isConverting;
 8000630:	4b02      	ldr	r3, [pc, #8]	@ (800063c <isConverting+0x10>)
 8000632:	781b      	ldrb	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	20000062 	.word	0x20000062

08000640 <Ds18b20_Init_Simple>:

bool	Ds18b20_Init_Simple(){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	       m_init = 0;
 8000644:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <Ds18b20_Init_Simple+0x78>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
	       OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 800064a:	2204      	movs	r2, #4
 800064c:	491b      	ldr	r1, [pc, #108]	@ (80006bc <Ds18b20_Init_Simple+0x7c>)
 800064e:	481c      	ldr	r0, [pc, #112]	@ (80006c0 <Ds18b20_Init_Simple+0x80>)
 8000650:	f000 fbec 	bl	8000e2c <OneWire_Init>
	       //OneWire_First(&OneWire);

	       OneWire.ROM_NO[0] = 0x28;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <Ds18b20_Init_Simple+0x80>)
 8000656:	2228      	movs	r2, #40	@ 0x28
 8000658:	725a      	strb	r2, [r3, #9]
	       OneWire.ROM_NO[1] = 0x90;
 800065a:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <Ds18b20_Init_Simple+0x80>)
 800065c:	2290      	movs	r2, #144	@ 0x90
 800065e:	729a      	strb	r2, [r3, #10]
	       OneWire.ROM_NO[2] = 0x98;
 8000660:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <Ds18b20_Init_Simple+0x80>)
 8000662:	2298      	movs	r2, #152	@ 0x98
 8000664:	72da      	strb	r2, [r3, #11]
	       OneWire.ROM_NO[3] = 0x43;
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <Ds18b20_Init_Simple+0x80>)
 8000668:	2243      	movs	r2, #67	@ 0x43
 800066a:	731a      	strb	r2, [r3, #12]
	       OneWire.ROM_NO[4] = 0xd4;
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <Ds18b20_Init_Simple+0x80>)
 800066e:	22d4      	movs	r2, #212	@ 0xd4
 8000670:	735a      	strb	r2, [r3, #13]
	       OneWire.ROM_NO[5] = 0xe1;
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <Ds18b20_Init_Simple+0x80>)
 8000674:	22e1      	movs	r2, #225	@ 0xe1
 8000676:	739a      	strb	r2, [r3, #14]
	       OneWire.ROM_NO[6] = 0x3c;
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <Ds18b20_Init_Simple+0x80>)
 800067a:	223c      	movs	r2, #60	@ 0x3c
 800067c:	73da      	strb	r2, [r3, #15]
	       OneWire.ROM_NO[7] = 0x65;
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <Ds18b20_Init_Simple+0x80>)
 8000680:	2265      	movs	r2, #101	@ 0x65
 8000682:	741a      	strb	r2, [r3, #16]
	       OneWire_GetFullROM(&OneWire, temperSensor.Address);
 8000684:	490f      	ldr	r1, [pc, #60]	@ (80006c4 <Ds18b20_Init_Simple+0x84>)
 8000686:	480e      	ldr	r0, [pc, #56]	@ (80006c0 <Ds18b20_Init_Simple+0x80>)
 8000688:	f000 fe27 	bl	80012da <OneWire_GetFullROM>

	       Ds18b20Delay(50);
 800068c:	2032      	movs	r0, #50	@ 0x32
 800068e:	f001 fea5 	bl	80023dc <HAL_Delay>
	       DS18B20_SetResolution(&OneWire, temperSensor.Address, DS18B20_Resolution_12bits);
 8000692:	220c      	movs	r2, #12
 8000694:	490b      	ldr	r1, [pc, #44]	@ (80006c4 <Ds18b20_Init_Simple+0x84>)
 8000696:	480a      	ldr	r0, [pc, #40]	@ (80006c0 <Ds18b20_Init_Simple+0x80>)
 8000698:	f000 fa4c 	bl	8000b34 <DS18B20_SetResolution>
	   	   Ds18b20Delay(50);
 800069c:	2032      	movs	r0, #50	@ 0x32
 800069e:	f001 fe9d 	bl	80023dc <HAL_Delay>
	       DS18B20_DisableAlarmTemperature(&OneWire,  temperSensor.Address);
 80006a2:	4908      	ldr	r1, [pc, #32]	@ (80006c4 <Ds18b20_Init_Simple+0x84>)
 80006a4:	4806      	ldr	r0, [pc, #24]	@ (80006c0 <Ds18b20_Init_Simple+0x80>)
 80006a6:	f000 fadd 	bl	8000c64 <DS18B20_DisableAlarmTemperature>

	       m_init = 1;
 80006aa:	4b03      	ldr	r3, [pc, #12]	@ (80006b8 <Ds18b20_Init_Simple+0x78>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
           return true;
 80006b0:	2301      	movs	r3, #1

}
 80006b2:	4618      	mov	r0, r3
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000060 	.word	0x20000060
 80006bc:	40010800 	.word	0x40010800
 80006c0:	20000048 	.word	0x20000048
 80006c4:	20000038 	.word	0x20000038

080006c8 <Ds18b20_Init>:


bool	Ds18b20_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 80006ce:	2305      	movs	r3, #5
 80006d0:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 80006d2:	2204      	movs	r2, #4
 80006d4:	4937      	ldr	r1, [pc, #220]	@ (80007b4 <Ds18b20_Init+0xec>)
 80006d6:	4838      	ldr	r0, [pc, #224]	@ (80007b8 <Ds18b20_Init+0xf0>)
 80006d8:	f000 fba8 	bl	8000e2c <OneWire_Init>
		TempSensorCount = 0;	
 80006dc:	4b37      	ldr	r3, [pc, #220]	@ (80007bc <Ds18b20_Init+0xf4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 80006e2:	e002      	b.n	80006ea <Ds18b20_Init+0x22>
			Ds18b20Delay(100);
 80006e4:	2064      	movs	r0, #100	@ 0x64
 80006e6:	f001 fe79 	bl	80023dc <HAL_Delay>
		while(HAL_GetTick() < 3000)
 80006ea:	f001 fe6d 	bl	80023c8 <HAL_GetTick>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d9f5      	bls.n	80006e4 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);//주소 찾는동작
 80006f8:	482f      	ldr	r0, [pc, #188]	@ (80007b8 <Ds18b20_Init+0xf0>)
 80006fa:	f000 fcda 	bl	80010b2 <OneWire_First>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b2f      	ldr	r3, [pc, #188]	@ (80007c0 <Ds18b20_Init+0xf8>)
 8000704:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8000706:	e019      	b.n	800073c <Ds18b20_Init+0x74>
		{
			Ds18b20Delay(100);
 8000708:	2064      	movs	r0, #100	@ 0x64
 800070a:	f001 fe67 	bl	80023dc <HAL_Delay>
			TempSensorCount++;
 800070e:	4b2b      	ldr	r3, [pc, #172]	@ (80007bc <Ds18b20_Init+0xf4>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <Ds18b20_Init+0xf4>)
 8000718:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 800071a:	4b28      	ldr	r3, [pc, #160]	@ (80007bc <Ds18b20_Init+0xf4>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	3b01      	subs	r3, #1
 8000720:	011b      	lsls	r3, r3, #4
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <Ds18b20_Init+0xfc>)
 8000724:	4413      	add	r3, r2
 8000726:	4619      	mov	r1, r3
 8000728:	4823      	ldr	r0, [pc, #140]	@ (80007b8 <Ds18b20_Init+0xf0>)
 800072a:	f000 fdd6 	bl	80012da <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);//다음 장치 주소 찾는동작
 800072e:	4822      	ldr	r0, [pc, #136]	@ (80007b8 <Ds18b20_Init+0xf0>)
 8000730:	f000 fccf 	bl	80010d2 <OneWire_Next>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <Ds18b20_Init+0xf8>)
 800073a:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 800073c:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <Ds18b20_Init+0xf8>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1e1      	bne.n	8000708 <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 8000744:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <Ds18b20_Init+0xf4>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d106      	bne.n	800075a <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	3b01      	subs	r3, #1
 8000750:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1bc      	bne.n	80006d2 <Ds18b20_Init+0xa>
 8000758:	e000      	b.n	800075c <Ds18b20_Init+0x94>
			break;
 800075a:	bf00      	nop
	if(Ds18b20TryToFind==0)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d101      	bne.n	8000766 <Ds18b20_Init+0x9e>
		return false;
 8000762:	2300      	movs	r3, #0
 8000764:	e022      	b.n	80007ac <Ds18b20_Init+0xe4>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8000766:	2300      	movs	r3, #0
 8000768:	71bb      	strb	r3, [r7, #6]
 800076a:	e019      	b.n	80007a0 <Ds18b20_Init+0xd8>
	{
		Ds18b20Delay(50);
 800076c:	2032      	movs	r0, #50	@ 0x32
 800076e:	f001 fe35 	bl	80023dc <HAL_Delay>
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	4a13      	ldr	r2, [pc, #76]	@ (80007c4 <Ds18b20_Init+0xfc>)
 8000778:	4413      	add	r3, r2
 800077a:	220c      	movs	r2, #12
 800077c:	4619      	mov	r1, r3
 800077e:	480e      	ldr	r0, [pc, #56]	@ (80007b8 <Ds18b20_Init+0xf0>)
 8000780:	f000 f9d8 	bl	8000b34 <DS18B20_SetResolution>
		Ds18b20Delay(50);
 8000784:	2032      	movs	r0, #50	@ 0x32
 8000786:	f001 fe29 	bl	80023dc <HAL_Delay>
    DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	011b      	lsls	r3, r3, #4
 800078e:	4a0d      	ldr	r2, [pc, #52]	@ (80007c4 <Ds18b20_Init+0xfc>)
 8000790:	4413      	add	r3, r2
 8000792:	4619      	mov	r1, r3
 8000794:	4808      	ldr	r0, [pc, #32]	@ (80007b8 <Ds18b20_Init+0xf0>)
 8000796:	f000 fa65 	bl	8000c64 <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 800079a:	79bb      	ldrb	r3, [r7, #6]
 800079c:	3301      	adds	r3, #1
 800079e:	71bb      	strb	r3, [r7, #6]
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <Ds18b20_Init+0xf4>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	79ba      	ldrb	r2, [r7, #6]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d3e0      	bcc.n	800076c <Ds18b20_Init+0xa4>
  }
	return true;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40010800 	.word	0x40010800
 80007b8:	20000048 	.word	0x20000048
 80007bc:	2000005d 	.word	0x2000005d
 80007c0:	2000005c 	.word	0x2000005c
 80007c4:	20000028 	.word	0x20000028

080007c8 <checkConverting>:
	m_isConverting = 1;
	m_busy = 0;

}

void checkConverting(){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

	m_isConverting = !DS18B20_AllDone(&OneWire);
 80007cc:	4806      	ldr	r0, [pc, #24]	@ (80007e8 <checkConverting+0x20>)
 80007ce:	f000 faa4 	bl	8000d1a <DS18B20_AllDone>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	bf0c      	ite	eq
 80007d8:	2301      	moveq	r3, #1
 80007da:	2300      	movne	r3, #0
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	4b02      	ldr	r3, [pc, #8]	@ (80007ec <checkConverting+0x24>)
 80007e2:	701a      	strb	r2, [r3, #0]

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000048 	.word	0x20000048
 80007ec:	20000062 	.word	0x20000062

080007f0 <getTemper>:

float getTemper(){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

	Ds18b20Delay(100);
 80007f4:	2064      	movs	r0, #100	@ 0x64
 80007f6:	f001 fdf1 	bl	80023dc <HAL_Delay>
	temperSensor.DataIsValid = DS18B20_Read(&OneWire, temperSensor.Address, &temperSensor.Temperature);
 80007fa:	4a06      	ldr	r2, [pc, #24]	@ (8000814 <getTemper+0x24>)
 80007fc:	4906      	ldr	r1, [pc, #24]	@ (8000818 <getTemper+0x28>)
 80007fe:	4807      	ldr	r0, [pc, #28]	@ (800081c <getTemper+0x2c>)
 8000800:	f000 f8a6 	bl	8000950 <DS18B20_Read>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	4b03      	ldr	r3, [pc, #12]	@ (8000818 <getTemper+0x28>)
 800080a:	731a      	strb	r2, [r3, #12]
	return temperSensor.Temperature;
 800080c:	4b02      	ldr	r3, [pc, #8]	@ (8000818 <getTemper+0x28>)
 800080e:	689b      	ldr	r3, [r3, #8]
}
 8000810:	4618      	mov	r0, r3
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000040 	.word	0x20000040
 8000818:	20000038 	.word	0x20000038
 800081c:	20000048 	.word	0x20000048

08000820 <Ds18b20_ManualConvert>:

bool	Ds18b20_ManualConvert(void)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
	if(Ds18b20Timeout==0)
		return false;
	else
		return true;	
	#else	
	Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 8000826:	4b33      	ldr	r3, [pc, #204]	@ (80008f4 <Ds18b20_ManualConvert+0xd4>)
 8000828:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800082c:	801a      	strh	r2, [r3, #0]
	DS18B20_StartAll(&OneWire);
 800082e:	4832      	ldr	r0, [pc, #200]	@ (80008f8 <Ds18b20_ManualConvert+0xd8>)
 8000830:	f000 f87a 	bl	8000928 <DS18B20_StartAll>
	Ds18b20Delay(100);
 8000834:	2064      	movs	r0, #100	@ 0x64
 8000836:	f001 fdd1 	bl	80023dc <HAL_Delay>
	while (!DS18B20_AllDone(&OneWire))
 800083a:	e00c      	b.n	8000856 <Ds18b20_ManualConvert+0x36>
	{
		Ds18b20Delay(10);  
 800083c:	200a      	movs	r0, #10
 800083e:	f001 fdcd 	bl	80023dc <HAL_Delay>
		Ds18b20Timeout-=1;
 8000842:	4b2c      	ldr	r3, [pc, #176]	@ (80008f4 <Ds18b20_ManualConvert+0xd4>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	3b01      	subs	r3, #1
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b2a      	ldr	r3, [pc, #168]	@ (80008f4 <Ds18b20_ManualConvert+0xd4>)
 800084c:	801a      	strh	r2, [r3, #0]
		if(Ds18b20Timeout==0)
 800084e:	4b29      	ldr	r3, [pc, #164]	@ (80008f4 <Ds18b20_ManualConvert+0xd4>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d006      	beq.n	8000864 <Ds18b20_ManualConvert+0x44>
	while (!DS18B20_AllDone(&OneWire))
 8000856:	4828      	ldr	r0, [pc, #160]	@ (80008f8 <Ds18b20_ManualConvert+0xd8>)
 8000858:	f000 fa5f 	bl	8000d1a <DS18B20_AllDone>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0ec      	beq.n	800083c <Ds18b20_ManualConvert+0x1c>
 8000862:	e000      	b.n	8000866 <Ds18b20_ManualConvert+0x46>
			break;
 8000864:	bf00      	nop
	}	
	if(Ds18b20Timeout>0)
 8000866:	4b23      	ldr	r3, [pc, #140]	@ (80008f4 <Ds18b20_ManualConvert+0xd4>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d024      	beq.n	80008b8 <Ds18b20_ManualConvert+0x98>
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 800086e:	2300      	movs	r3, #0
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	e01b      	b.n	80008ac <Ds18b20_ManualConvert+0x8c>
		{
			Ds18b20Delay(100);
 8000874:	2064      	movs	r0, #100	@ 0x64
 8000876:	f001 fdb1 	bl	80023dc <HAL_Delay>
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	011b      	lsls	r3, r3, #4
 800087e:	4a1f      	ldr	r2, [pc, #124]	@ (80008fc <Ds18b20_ManualConvert+0xdc>)
 8000880:	1899      	adds	r1, r3, r2
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	3308      	adds	r3, #8
 8000888:	4a1c      	ldr	r2, [pc, #112]	@ (80008fc <Ds18b20_ManualConvert+0xdc>)
 800088a:	4413      	add	r3, r2
 800088c:	79fc      	ldrb	r4, [r7, #7]
 800088e:	461a      	mov	r2, r3
 8000890:	4819      	ldr	r0, [pc, #100]	@ (80008f8 <Ds18b20_ManualConvert+0xd8>)
 8000892:	f000 f85d 	bl	8000950 <DS18B20_Read>
 8000896:	4603      	mov	r3, r0
 8000898:	4619      	mov	r1, r3
 800089a:	4a18      	ldr	r2, [pc, #96]	@ (80008fc <Ds18b20_ManualConvert+0xdc>)
 800089c:	0123      	lsls	r3, r4, #4
 800089e:	4413      	add	r3, r2
 80008a0:	330c      	adds	r3, #12
 80008a2:	460a      	mov	r2, r1
 80008a4:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	3301      	adds	r3, #1
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <Ds18b20_ManualConvert+0xe0>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	79fa      	ldrb	r2, [r7, #7]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d3de      	bcc.n	8000874 <Ds18b20_ManualConvert+0x54>
 80008b6:	e011      	b.n	80008dc <Ds18b20_ManualConvert+0xbc>
		}
	}
	else
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	71bb      	strb	r3, [r7, #6]
 80008bc:	e009      	b.n	80008d2 <Ds18b20_ManualConvert+0xb2>
			ds18b20[i].DataIsValid = false;
 80008be:	79bb      	ldrb	r3, [r7, #6]
 80008c0:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <Ds18b20_ManualConvert+0xdc>)
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	4413      	add	r3, r2
 80008c6:	330c      	adds	r3, #12
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80008cc:	79bb      	ldrb	r3, [r7, #6]
 80008ce:	3301      	adds	r3, #1
 80008d0:	71bb      	strb	r3, [r7, #6]
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <Ds18b20_ManualConvert+0xe0>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	79ba      	ldrb	r2, [r7, #6]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d3f0      	bcc.n	80008be <Ds18b20_ManualConvert+0x9e>
	}
	if(Ds18b20Timeout==0)
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <Ds18b20_ManualConvert+0xd4>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d101      	bne.n	80008e8 <Ds18b20_ManualConvert+0xc8>
		return false;
 80008e4:	2300      	movs	r3, #0
 80008e6:	e000      	b.n	80008ea <Ds18b20_ManualConvert+0xca>
	else
		return true;
 80008e8:	2301      	movs	r3, #1
	#endif
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd90      	pop	{r4, r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000005e 	.word	0x2000005e
 80008f8:	20000048 	.word	0x20000048
 80008fc:	20000028 	.word	0x20000028
 8000900:	2000005d 	.word	0x2000005d

08000904 <StartConverting>:
	return 1;
}



void StartConverting(){
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	m_busy = 1;
 8000908:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <StartConverting+0x1c>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
	DS18B20_StartAll( &OneWire);
 800090e:	4805      	ldr	r0, [pc, #20]	@ (8000924 <StartConverting+0x20>)
 8000910:	f000 f80a 	bl	8000928 <DS18B20_StartAll>
	m_busy = 0;
 8000914:	4b02      	ldr	r3, [pc, #8]	@ (8000920 <StartConverting+0x1c>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000061 	.word	0x20000061
 8000924:	20000048 	.word	0x20000048

08000928 <DS18B20_StartAll>:

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 faaf 	bl	8000e94 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8000936:	21cc      	movs	r1, #204	@ 0xcc
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f000 fb7b 	bl	8001034 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 800093e:	2144      	movs	r1, #68	@ 0x44
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f000 fb77 	bl	8001034 <OneWire_WriteByte>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b08b      	sub	sp, #44	@ 0x2c
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	float decimal;
	uint8_t i = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8000966:	68b8      	ldr	r0, [r7, #8]
 8000968:	f000 f96c 	bl	8000c44 <DS18B20_Is>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <DS18B20_Read+0x26>
		return false;
 8000972:	2300      	movs	r3, #0
 8000974:	e0d8      	b.n	8000b28 <DS18B20_Read+0x1d8>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) 
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f000 fb1a 	bl	8000fb0 <OneWire_ReadBit>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d101      	bne.n	8000986 <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false; 
 8000982:	2300      	movs	r3, #0
 8000984:	e0d0      	b.n	8000b28 <DS18B20_Read+0x1d8>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f000 fa84 	bl	8000e94 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800098c:	68b9      	ldr	r1, [r7, #8]
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f000 fc84 	bl	800129c <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000994:	21be      	movs	r1, #190	@ 0xbe
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f000 fb4c 	bl	8001034 <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 800099c:	2300      	movs	r3, #0
 800099e:	77fb      	strb	r3, [r7, #31]
 80009a0:	e00d      	b.n	80009be <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 80009a2:	7ffc      	ldrb	r4, [r7, #31]
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	f000 fb63 	bl	8001070 <OneWire_ReadByte>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80009b2:	443b      	add	r3, r7
 80009b4:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) 
 80009b8:	7ffb      	ldrb	r3, [r7, #31]
 80009ba:	3301      	adds	r3, #1
 80009bc:	77fb      	strb	r3, [r7, #31]
 80009be:	7ffb      	ldrb	r3, [r7, #31]
 80009c0:	2b08      	cmp	r3, #8
 80009c2:	d9ee      	bls.n	80009a2 <DS18B20_Read+0x52>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2108      	movs	r1, #8
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fca1 	bl	8001312 <OneWire_CRC8>
 80009d0:	4603      	mov	r3, r0
 80009d2:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8])
 80009d4:	7f3b      	ldrb	r3, [r7, #28]
 80009d6:	7fba      	ldrb	r2, [r7, #30]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d001      	beq.n	80009e0 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	e0a3      	b.n	8000b28 <DS18B20_Read+0x1d8>

	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 80009e0:	7d3b      	ldrb	r3, [r7, #20]
 80009e2:	b21a      	sxth	r2, r3
 80009e4:	7d7b      	ldrb	r3, [r7, #21]
 80009e6:	021b      	lsls	r3, r3, #8
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	4313      	orrs	r3, r2
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	84fb      	strh	r3, [r7, #38]	@ 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f000 fa4f 	bl	8000e94 <OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000)
 80009f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	da05      	bge.n	8000a0a <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 80009fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a00:	425b      	negs	r3, r3
 8000a02:	84fb      	strh	r3, [r7, #38]	@ 0x26
		minus = 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8000a0a:	7e3b      	ldrb	r3, [r7, #24]
 8000a0c:	115b      	asrs	r3, r3, #5
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	f003 0303 	and.w	r3, r3, #3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	3309      	adds	r3, #9
 8000a18:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8000a1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a1c:	091b      	lsrs	r3, r3, #4
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8000a24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a26:	0a1b      	lsrs	r3, r3, #8
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	011b      	lsls	r3, r3, #4
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000a32:	b25a      	sxtb	r2, r3
 8000a34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	
	/* Store decimal digits */
	switch (resolution) 
 8000a3e:	7f7b      	ldrb	r3, [r7, #29]
 8000a40:	3b09      	subs	r3, #9
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d850      	bhi.n	8000ae8 <DS18B20_Read+0x198>
 8000a46:	a201      	add	r2, pc, #4	@ (adr r2, 8000a4c <DS18B20_Read+0xfc>)
 8000a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4c:	08000a5d 	.word	0x08000a5d
 8000a50:	08000a81 	.word	0x08000a81
 8000a54:	08000aa5 	.word	0x08000aa5
 8000a58:	08000ac9 	.word	0x08000ac9
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8000a5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fcde 	bl	8000428 <__aeabi_i2f>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8000a70:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000a74:	6a38      	ldr	r0, [r7, #32]
 8000a76:	f7ff fb69 	bl	800014c <__aeabi_fmul>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	623b      	str	r3, [r7, #32]
		break;
 8000a7e:	e038      	b.n	8000af2 <DS18B20_Read+0x1a2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8000a80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fccc 	bl	8000428 <__aeabi_i2f>
 8000a90:	4603      	mov	r3, r0
 8000a92:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8000a94:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8000a98:	6a38      	ldr	r0, [r7, #32]
 8000a9a:	f7ff fb57 	bl	800014c <__aeabi_fmul>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	623b      	str	r3, [r7, #32]
		 break;
 8000aa2:	e026      	b.n	8000af2 <DS18B20_Read+0x1a2>
		case 11: 
			decimal = (temperature >> 1) & 0x07;
 8000aa4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000aa6:	085b      	lsrs	r3, r3, #1
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fcba 	bl	8000428 <__aeabi_i2f>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8000ab8:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8000abc:	6a38      	ldr	r0, [r7, #32]
 8000abe:	f7ff fb45 	bl	800014c <__aeabi_fmul>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	623b      	str	r3, [r7, #32]
		break;
 8000ac6:	e014      	b.n	8000af2 <DS18B20_Read+0x1a2>
		case 12: 
			decimal = temperature & 0x0F;
 8000ac8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000aca:	f003 030f 	and.w	r3, r3, #15
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fcaa 	bl	8000428 <__aeabi_i2f>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8000ad8:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8000adc:	6a38      	ldr	r0, [r7, #32]
 8000ade:	f7ff fb35 	bl	800014c <__aeabi_fmul>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	623b      	str	r3, [r7, #32]
		 break;
 8000ae6:	e004      	b.n	8000af2 <DS18B20_Read+0x1a2>
		default: 
			decimal = 0xFF;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <DS18B20_Read+0x1e0>)
 8000aea:	623b      	str	r3, [r7, #32]
			digit = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 8000af2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fc96 	bl	8000428 <__aeabi_i2f>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4619      	mov	r1, r3
 8000b00:	6a38      	ldr	r0, [r7, #32]
 8000b02:	f7ff fbdd 	bl	80002c0 <__addsf3>
 8000b06:	4603      	mov	r3, r0
 8000b08:	623b      	str	r3, [r7, #32]
	if (minus) 
 8000b0a:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d006      	beq.n	8000b20 <DS18B20_Read+0x1d0>
		decimal = 0 - decimal;
 8000b12:	6a39      	ldr	r1, [r7, #32]
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	f7ff fbd0 	bl	80002bc <__aeabi_fsub>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	623b      	str	r3, [r7, #32]
	
	
	/* Set to pointer */
	*destination = decimal;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a3a      	ldr	r2, [r7, #32]
 8000b24:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return true;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	372c      	adds	r7, #44	@ 0x2c
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	437f0000 	.word	0x437f0000

08000b34 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 8000b42:	68b8      	ldr	r0, [r7, #8]
 8000b44:	f000 f87e 	bl	8000c44 <DS18B20_Is>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <DS18B20_SetResolution+0x1e>
		return 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e074      	b.n	8000c3c <DS18B20_SetResolution+0x108>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f000 f99e 	bl	8000e94 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f000 fb9e 	bl	800129c <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000b60:	21be      	movs	r1, #190	@ 0xbe
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f000 fa66 	bl	8001034 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f000 fa81 	bl	8001070 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f000 fa7e 	bl	8001070 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f000 fa7b 	bl	8001070 <OneWire_ReadByte>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f000 fa76 	bl	8001070 <OneWire_ReadByte>
 8000b84:	4603      	mov	r3, r0
 8000b86:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f000 fa71 	bl	8001070 <OneWire_ReadByte>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b09      	cmp	r3, #9
 8000b96:	d108      	bne.n	8000baa <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000b9e:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
 8000ba2:	f023 0320 	bic.w	r3, r3, #32
 8000ba6:	75fb      	strb	r3, [r7, #23]
 8000ba8:	e022      	b.n	8000bf0 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b0a      	cmp	r3, #10
 8000bae:	d108      	bne.n	8000bc2 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
 8000bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000bb6:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	f043 0320 	orr.w	r3, r3, #32
 8000bbe:	75fb      	strb	r3, [r7, #23]
 8000bc0:	e016      	b.n	8000bf0 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b0b      	cmp	r3, #11
 8000bc6:	d108      	bne.n	8000bda <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
 8000bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bce:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	f023 0320 	bic.w	r3, r3, #32
 8000bd6:	75fb      	strb	r3, [r7, #23]
 8000bd8:	e00a      	b.n	8000bf0 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b0c      	cmp	r3, #12
 8000bde:	d107      	bne.n	8000bf0 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000be0:	7dfb      	ldrb	r3, [r7, #23]
 8000be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000be6:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000be8:	7dfb      	ldrb	r3, [r7, #23]
 8000bea:	f043 0320 	orr.w	r3, r3, #32
 8000bee:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	f000 f94f 	bl	8000e94 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000bf6:	68b9      	ldr	r1, [r7, #8]
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f000 fb4f 	bl	800129c <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000bfe:	214e      	movs	r1, #78	@ 0x4e
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f000 fa17 	bl	8001034 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000c06:	7dbb      	ldrb	r3, [r7, #22]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f000 fa12 	bl	8001034 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000c10:	7d7b      	ldrb	r3, [r7, #21]
 8000c12:	4619      	mov	r1, r3
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f000 fa0d 	bl	8001034 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000c1a:	7dfb      	ldrb	r3, [r7, #23]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f000 fa08 	bl	8001034 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f000 f935 	bl	8000e94 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000c2a:	68b9      	ldr	r1, [r7, #8]
 8000c2c:	68f8      	ldr	r0, [r7, #12]
 8000c2e:	f000 fb35 	bl	800129c <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000c32:	2148      	movs	r1, #72	@ 0x48
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f000 f9fd 	bl	8001034 <OneWire_WriteByte>
	
	return 1;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b28      	cmp	r3, #40	@ 0x28
 8000c52:	d101      	bne.n	8000c58 <DS18B20_Is+0x14>
		return 1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e000      	b.n	8000c5a <DS18B20_Is+0x16>
	
	return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 8000c6e:	6838      	ldr	r0, [r7, #0]
 8000c70:	f7ff ffe8 	bl	8000c44 <DS18B20_Is>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e049      	b.n	8000d12 <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 f908 	bl	8000e94 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000c84:	6839      	ldr	r1, [r7, #0]
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f000 fb08 	bl	800129c <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000c8c:	21be      	movs	r1, #190	@ 0xbe
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f000 f9d0 	bl	8001034 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 f9eb 	bl	8001070 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 f9e8 	bl	8001070 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 f9e5 	bl	8001070 <OneWire_ReadByte>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f9e0 	bl	8001070 <OneWire_ReadByte>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f000 f9db 	bl	8001070 <OneWire_ReadByte>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 8000cbe:	237d      	movs	r3, #125	@ 0x7d
 8000cc0:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8000cc2:	23c9      	movs	r3, #201	@ 0xc9
 8000cc4:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 f8e4 	bl	8000e94 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000ccc:	6839      	ldr	r1, [r7, #0]
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 fae4 	bl	800129c <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000cd4:	214e      	movs	r1, #78	@ 0x4e
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 f9ac 	bl	8001034 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f000 f9a7 	bl	8001034 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000ce6:	7bbb      	ldrb	r3, [r7, #14]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f000 f9a2 	bl	8001034 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000cf0:	7b7b      	ldrb	r3, [r7, #13]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f000 f99d 	bl	8001034 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 f8ca 	bl	8000e94 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000d00:	6839      	ldr	r1, [r7, #0]
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 faca 	bl	800129c <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000d08:	2148      	movs	r1, #72	@ 0x48
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 f992 	bl	8001034 <OneWire_WriteByte>
	
	return 1;
 8000d10:	2301      	movs	r3, #1
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f944 	bl	8000fb0 <OneWire_ReadBit>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <getCurrentTemper>:


float getCurrentTemper(){
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
     return temperSensor.Temperature;
 8000d38:	4b02      	ldr	r3, [pc, #8]	@ (8000d44 <getCurrentTemper+0x10>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	20000038 	.word	0x20000038

08000d48 <isBusyLine>:
#include "onewire.h"
#include "ds18b20Config.h"
//#include "tim.h"

static uint8_t m_busy_line = 0;
uint8_t isBusyLine(){
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
	return m_busy_line;
 8000d4c:	4b02      	ldr	r3, [pc, #8]	@ (8000d58 <isBusyLine+0x10>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	20000063 	.word	0x20000063

08000d5c <ONEWIRE_DELAY>:

void ONEWIRE_DELAY(uint16_t time_us)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <ONEWIRE_DELAY+0x2c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000d6e:	bf00      	nop
 8000d70:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <ONEWIRE_DELAY+0x2c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d9f9      	bls.n	8000d70 <ONEWIRE_DELAY+0x14>
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	20000544 	.word	0x20000544

08000d8c <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	889b      	ldrh	r3, [r3, #4]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	0412      	lsls	r2, r2, #16
 8000da0:	611a      	str	r2, [r3, #16]
}	
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	889a      	ldrh	r2, [r3, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	611a      	str	r2, [r3, #16]
}	
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	889b      	ldrh	r3, [r3, #4]
 8000de0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f107 0208 	add.w	r2, r7, #8
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 fc27 	bl	8002640 <HAL_GPIO_Init>
}	
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000e02:	2311      	movs	r3, #17
 8000e04:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	889b      	ldrh	r3, [r3, #4]
 8000e12:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f107 0208 	add.w	r2, r7, #8
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fc0e 	bl	8002640 <HAL_GPIO_Init>

}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	4613      	mov	r3, r2
 8000e38:	80fb      	strh	r3, [r7, #6]
	m_busy_line = 0;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <OneWire_Init+0x60>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 8000e40:	4813      	ldr	r0, [pc, #76]	@ (8000e90 <OneWire_Init+0x64>)
 8000e42:	f003 fa7d 	bl	8004340 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	88fa      	ldrh	r2, [r7, #6]
 8000e50:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f7ff ffd1 	bl	8000dfa <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f7ff ffa7 	bl	8000dac <ONEWIRE_HIGH>
	OneWireDelay(1000);
 8000e5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e62:	f001 fabb 	bl	80023dc <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f7ff ff90 	bl	8000d8c <ONEWIRE_LOW>
	OneWireDelay(1000);
 8000e6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e70:	f001 fab4 	bl	80023dc <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f7ff ff99 	bl	8000dac <ONEWIRE_HIGH>
	OneWireDelay(2000);
 8000e7a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e7e:	f001 faad 	bl	80023dc <HAL_Delay>
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000063 	.word	0x20000063
 8000e90:	20000544 	.word	0x20000544

08000e94 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff75 	bl	8000d8c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffa9 	bl	8000dfa <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8000ea8:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000eac:	f7ff ff56 	bl	8000d5c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8000eb0:	2014      	movs	r0, #20
 8000eb2:	f7ff ff53 	bl	8000d5c <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	m_busy_line = 1;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <OneWire_Reset+0x60>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
	ONEWIRE_INPUT(OneWireStruct);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff83 	bl	8000dc8 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8000ec2:	2046      	movs	r0, #70	@ 0x46
 8000ec4:	f7ff ff4a 	bl	8000d5c <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	889b      	ldrh	r3, [r3, #4]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	f001 fd38 	bl	8002948 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	73fb      	strb	r3, [r7, #15]
	m_busy_line = 0;
 8000edc:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <OneWire_Reset+0x60>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8000ee2:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8000ee6:	f7ff ff39 	bl	8000d5c <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000063 	.word	0x20000063

08000ef8 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
	m_busy_line = 1;
 8000f04:	4b29      	ldr	r3, [pc, #164]	@ (8000fac <OneWire_WriteBit+0xb4>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
	if (bit) 
 8000f0a:	78fb      	ldrb	r3, [r7, #3]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d024      	beq.n	8000f5a <OneWire_WriteBit+0x62>
	{
		/* Set line low */
		m_busy_line = 1;
 8000f10:	4b26      	ldr	r3, [pc, #152]	@ (8000fac <OneWire_WriteBit+0xb4>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff38 	bl	8000d8c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff6c 	bl	8000dfa <ONEWIRE_OUTPUT>
		m_busy_line = 0;
 8000f22:	4b22      	ldr	r3, [pc, #136]	@ (8000fac <OneWire_WriteBit+0xb4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
		ONEWIRE_DELAY(10);
 8000f28:	200a      	movs	r0, #10
 8000f2a:	f7ff ff17 	bl	8000d5c <ONEWIRE_DELAY>
		
		/* Bit high */
		m_busy_line = 1;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <OneWire_WriteBit+0xb4>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff47 	bl	8000dc8 <ONEWIRE_INPUT>
		m_busy_line = 0;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <OneWire_WriteBit+0xb4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
		/* Wait for 55 us and release the line */
		
		ONEWIRE_DELAY(55);
 8000f40:	2037      	movs	r0, #55	@ 0x37
 8000f42:	f7ff ff0b 	bl	8000d5c <ONEWIRE_DELAY>
		m_busy_line = 1;
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <OneWire_WriteBit+0xb4>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff3b 	bl	8000dc8 <ONEWIRE_INPUT>
		m_busy_line = 0;
 8000f52:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <OneWire_WriteBit+0xb4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
		m_busy_line = 0;
	}


}
 8000f58:	e023      	b.n	8000fa2 <OneWire_WriteBit+0xaa>
		m_busy_line = 1;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <OneWire_WriteBit+0xb4>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff13 	bl	8000d8c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ff47 	bl	8000dfa <ONEWIRE_OUTPUT>
		m_busy_line = 0;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <OneWire_WriteBit+0xb4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
		ONEWIRE_DELAY(65);
 8000f72:	2041      	movs	r0, #65	@ 0x41
 8000f74:	f7ff fef2 	bl	8000d5c <ONEWIRE_DELAY>
		m_busy_line = 1;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <OneWire_WriteBit+0xb4>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff22 	bl	8000dc8 <ONEWIRE_INPUT>
		m_busy_line = 0;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <OneWire_WriteBit+0xb4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
		ONEWIRE_DELAY(5);
 8000f8a:	2005      	movs	r0, #5
 8000f8c:	f7ff fee6 	bl	8000d5c <ONEWIRE_DELAY>
		m_busy_line = 1;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <OneWire_WriteBit+0xb4>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ff16 	bl	8000dc8 <ONEWIRE_INPUT>
		m_busy_line = 0;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	@ (8000fac <OneWire_WriteBit+0xb4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000063 	.word	0x20000063

08000fb0 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */
	m_busy_line = 1;
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <OneWire_ReadBit+0x80>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
	ONEWIRE_LOW(OneWireStruct);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff fee2 	bl	8000d8c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff16 	bl	8000dfa <ONEWIRE_OUTPUT>
	m_busy_line = 0;
 8000fce:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <OneWire_ReadBit+0x80>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
	ONEWIRE_DELAY(2);
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f7ff fec1 	bl	8000d5c <ONEWIRE_DELAY>
	
	/* Release line */
	m_busy_line = 1;
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <OneWire_ReadBit+0x80>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
	ONEWIRE_INPUT(OneWireStruct);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff fef1 	bl	8000dc8 <ONEWIRE_INPUT>
	m_busy_line = 0;
 8000fe6:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <OneWire_ReadBit+0x80>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
	ONEWIRE_DELAY(10);
 8000fec:	200a      	movs	r0, #10
 8000fee:	f7ff feb5 	bl	8000d5c <ONEWIRE_DELAY>
	
	/* Read line value */
	m_busy_line = 1;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <OneWire_ReadBit+0x80>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	889b      	ldrh	r3, [r3, #4]
 8001000:	4619      	mov	r1, r3
 8001002:	4610      	mov	r0, r2
 8001004:	f001 fca0 	bl	8002948 <HAL_GPIO_ReadPin>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <OneWire_ReadBit+0x62>
		/* Bit is HIGH */
		bit = 1;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	m_busy_line = 0;
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <OneWire_ReadBit+0x80>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	ONEWIRE_DELAY(50);
 8001018:	2032      	movs	r0, #50	@ 0x32
 800101a:	f7ff fe9f 	bl	8000d5c <ONEWIRE_DELAY>
	
	/* Return bit value */
	m_busy_line = 0;
 800101e:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <OneWire_ReadBit+0x80>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
	return bit;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000063 	.word	0x20000063

08001034 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8001040:	2308      	movs	r3, #8
 8001042:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8001044:	e00a      	b.n	800105c <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4619      	mov	r1, r3
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff51 	bl	8000ef8 <OneWire_WriteBit>
		byte >>= 1;
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	085b      	lsrs	r3, r3, #1
 800105a:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	1e5a      	subs	r2, r3, #1
 8001060:	73fa      	strb	r2, [r7, #15]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1ef      	bne.n	8001046 <OneWire_WriteByte+0x12>
	}
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001078:	2308      	movs	r3, #8
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	2300      	movs	r3, #0
 800107e:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8001080:	e00d      	b.n	800109e <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	085b      	lsrs	r3, r3, #1
 8001086:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff91 	bl	8000fb0 <OneWire_ReadBit>
 800108e:	4603      	mov	r3, r0
 8001090:	01db      	lsls	r3, r3, #7
 8001092:	b25a      	sxtb	r2, r3
 8001094:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001098:	4313      	orrs	r3, r2
 800109a:	b25b      	sxtb	r3, r3
 800109c:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	1e5a      	subs	r2, r3, #1
 80010a2:	73fa      	strb	r2, [r7, #15]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1ec      	bne.n	8001082 <OneWire_ReadByte+0x12>
	}
	
	return byte;
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f816 	bl	80010ec <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80010c0:	21f0      	movs	r1, #240	@ 0xf0
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f824 	bl	8001110 <OneWire_Search>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80010da:	21f0      	movs	r1, #240	@ 0xf0
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f817 	bl	8001110 <OneWire_Search>
 80010e2:	4603      	mov	r3, r0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	71da      	strb	r2, [r3, #7]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7a1b      	ldrb	r3, [r3, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	f040 809a 	bne.w	800126e <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct)) 
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff feaa 	bl	8000e94 <OneWire_Reset>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00a      	beq.n	800115c <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	71da      	strb	r2, [r3, #7]
			return 0;
 8001158:	2300      	movs	r3, #0
 800115a:	e09b      	b.n	8001294 <OneWire_Search+0x184>
		}

		// issue the search command 
		OneWire_WriteByte(OneWireStruct, command);  
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	4619      	mov	r1, r3
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff67 	bl	8001034 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ff22 	bl	8000fb0 <OneWire_ReadBit>
 800116c:	4603      	mov	r3, r0
 800116e:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff1d 	bl	8000fb0 <OneWire_ReadBit>
 8001176:	4603      	mov	r3, r0
 8001178:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 800117a:	7a7b      	ldrb	r3, [r7, #9]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d102      	bne.n	8001186 <OneWire_Search+0x76>
 8001180:	7a3b      	ldrb	r3, [r7, #8]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d064      	beq.n	8001250 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8001186:	7a7a      	ldrb	r2, [r7, #9]
 8001188:	7a3b      	ldrb	r3, [r7, #8]
 800118a:	429a      	cmp	r2, r3
 800118c:	d002      	beq.n	8001194 <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 800118e:	7a7b      	ldrb	r3, [r7, #9]
 8001190:	72bb      	strb	r3, [r7, #10]
 8001192:	e026      	b.n	80011e2 <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	799b      	ldrb	r3, [r3, #6]
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	429a      	cmp	r2, r3
 800119c:	d20d      	bcs.n	80011ba <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 800119e:	7b7b      	ldrb	r3, [r7, #13]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	7a5a      	ldrb	r2, [r3, #9]
 80011a6:	7afb      	ldrb	r3, [r7, #11]
 80011a8:	4013      	ands	r3, r2
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf14      	ite	ne
 80011b0:	2301      	movne	r3, #1
 80011b2:	2300      	moveq	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	72bb      	strb	r3, [r7, #10]
 80011b8:	e008      	b.n	80011cc <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	799b      	ldrb	r3, [r3, #6]
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	bf0c      	ite	eq
 80011c4:	2301      	moveq	r3, #1
 80011c6:	2300      	movne	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	72bb      	strb	r3, [r7, #10]
					}
					
					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 80011cc:	7abb      	ldrb	r3, [r7, #10]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d107      	bne.n	80011e2 <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d802      	bhi.n	80011e2 <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7bba      	ldrb	r2, [r7, #14]
 80011e0:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 80011e2:	7abb      	ldrb	r3, [r7, #10]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d10c      	bne.n	8001202 <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	7a59      	ldrb	r1, [r3, #9]
 80011f0:	7b7b      	ldrb	r3, [r7, #13]
 80011f2:	7afa      	ldrb	r2, [r7, #11]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	b2d1      	uxtb	r1, r2
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	460a      	mov	r2, r1
 80011fe:	725a      	strb	r2, [r3, #9]
 8001200:	e010      	b.n	8001224 <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8001202:	7b7b      	ldrb	r3, [r7, #13]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	4413      	add	r3, r2
 8001208:	7a5b      	ldrb	r3, [r3, #9]
 800120a:	b25a      	sxtb	r2, r3
 800120c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001210:	43db      	mvns	r3, r3
 8001212:	b25b      	sxtb	r3, r3
 8001214:	4013      	ands	r3, r2
 8001216:	b25a      	sxtb	r2, r3
 8001218:	7b7b      	ldrb	r3, [r7, #13]
 800121a:	b2d1      	uxtb	r1, r2
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	460a      	mov	r2, r1
 8001222:	725a      	strb	r2, [r3, #9]
				}
				
				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 8001224:	7abb      	ldrb	r3, [r7, #10]
 8001226:	4619      	mov	r1, r3
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fe65 	bl	8000ef8 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	3301      	adds	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8001234:	7afb      	ldrb	r3, [r7, #11]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 800123a:	7afb      	ldrb	r3, [r7, #11]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d104      	bne.n	800124a <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8001240:	7b7b      	ldrb	r3, [r7, #13]
 8001242:	3301      	adds	r3, #1
 8001244:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8001246:	2301      	movs	r3, #1
 8001248:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 800124a:	7b7b      	ldrb	r3, [r7, #13]
 800124c:	2b07      	cmp	r3, #7
 800124e:	d98a      	bls.n	8001166 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b40      	cmp	r3, #64	@ 0x40
 8001254:	d90b      	bls.n	800126e <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7bba      	ldrb	r2, [r7, #14]
 800125a:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	799b      	ldrb	r3, [r3, #6]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 800126e:	7b3b      	ldrb	r3, [r7, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <OneWire_Search+0x16c>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7a5b      	ldrb	r3, [r3, #9]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10a      	bne.n	8001292 <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8001292:	7b3b      	ldrb	r3, [r7, #12]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80012a6:	2155      	movs	r1, #85	@ 0x55
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff fec3 	bl	8001034 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e00a      	b.n	80012ca <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff feb8 	bl	8001034 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	3301      	adds	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b07      	cmp	r3, #7
 80012ce:	d9f1      	bls.n	80012b4 <OneWire_SelectWithPointer+0x18>
	}	
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 80012da:	b480      	push	{r7}
 80012dc:	b085      	sub	sp, #20
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e00a      	b.n	8001300 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	6839      	ldr	r1, [r7, #0]
 80012f0:	440b      	add	r3, r1
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	440a      	add	r2, r1
 80012f6:	7a52      	ldrb	r2, [r2, #9]
 80012f8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	3301      	adds	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	2b07      	cmp	r3, #7
 8001304:	d9f1      	bls.n	80012ea <OneWire_GetFullROM+0x10>
	}
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8001312:	b480      	push	{r7}
 8001314:	b085      	sub	sp, #20
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 8001322:	e022      	b.n	800136a <OneWire_CRC8+0x58>
		inbyte = *addr++;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800132e:	2308      	movs	r3, #8
 8001330:	737b      	strb	r3, [r7, #13]
 8001332:	e017      	b.n	8001364 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	4053      	eors	r3, r2
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	085b      	lsrs	r3, r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8001348:	7b3b      	ldrb	r3, [r7, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d004      	beq.n	8001358 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001354:	43db      	mvns	r3, r3
 8001356:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8001358:	7bbb      	ldrb	r3, [r7, #14]
 800135a:	085b      	lsrs	r3, r3, #1
 800135c:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800135e:	7b7b      	ldrb	r3, [r7, #13]
 8001360:	3b01      	subs	r3, #1
 8001362:	737b      	strb	r3, [r7, #13]
 8001364:	7b7b      	ldrb	r3, [r7, #13]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1e4      	bne.n	8001334 <OneWire_CRC8+0x22>
	while (len--) {
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	1e5a      	subs	r2, r3, #1
 800136e:	70fa      	strb	r2, [r7, #3]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1d7      	bne.n	8001324 <OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001386:	f000 f905 	bl	8001594 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&H_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800138a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800138e:	2201      	movs	r2, #1
 8001390:	2178      	movs	r1, #120	@ 0x78
 8001392:	485b      	ldr	r0, [pc, #364]	@ (8001500 <SSD1306_Init+0x180>)
 8001394:	f001 fd6c 	bl	8002e70 <HAL_I2C_IsDeviceReady>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	e0a9      	b.n	80014f6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80013a2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80013a6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013a8:	e002      	b.n	80013b0 <SSD1306_Init+0x30>
		p--;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f9      	bne.n	80013aa <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80013b6:	22ae      	movs	r2, #174	@ 0xae
 80013b8:	2100      	movs	r1, #0
 80013ba:	2078      	movs	r0, #120	@ 0x78
 80013bc:	f000 f964 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80013c0:	2220      	movs	r2, #32
 80013c2:	2100      	movs	r1, #0
 80013c4:	2078      	movs	r0, #120	@ 0x78
 80013c6:	f000 f95f 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80013ca:	2210      	movs	r2, #16
 80013cc:	2100      	movs	r1, #0
 80013ce:	2078      	movs	r0, #120	@ 0x78
 80013d0:	f000 f95a 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80013d4:	22b0      	movs	r2, #176	@ 0xb0
 80013d6:	2100      	movs	r1, #0
 80013d8:	2078      	movs	r0, #120	@ 0x78
 80013da:	f000 f955 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80013de:	22c8      	movs	r2, #200	@ 0xc8
 80013e0:	2100      	movs	r1, #0
 80013e2:	2078      	movs	r0, #120	@ 0x78
 80013e4:	f000 f950 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2078      	movs	r0, #120	@ 0x78
 80013ee:	f000 f94b 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80013f2:	2210      	movs	r2, #16
 80013f4:	2100      	movs	r1, #0
 80013f6:	2078      	movs	r0, #120	@ 0x78
 80013f8:	f000 f946 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80013fc:	2240      	movs	r2, #64	@ 0x40
 80013fe:	2100      	movs	r1, #0
 8001400:	2078      	movs	r0, #120	@ 0x78
 8001402:	f000 f941 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001406:	2281      	movs	r2, #129	@ 0x81
 8001408:	2100      	movs	r1, #0
 800140a:	2078      	movs	r0, #120	@ 0x78
 800140c:	f000 f93c 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001410:	22ff      	movs	r2, #255	@ 0xff
 8001412:	2100      	movs	r1, #0
 8001414:	2078      	movs	r0, #120	@ 0x78
 8001416:	f000 f937 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800141a:	22a1      	movs	r2, #161	@ 0xa1
 800141c:	2100      	movs	r1, #0
 800141e:	2078      	movs	r0, #120	@ 0x78
 8001420:	f000 f932 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001424:	22a6      	movs	r2, #166	@ 0xa6
 8001426:	2100      	movs	r1, #0
 8001428:	2078      	movs	r0, #120	@ 0x78
 800142a:	f000 f92d 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800142e:	22a8      	movs	r2, #168	@ 0xa8
 8001430:	2100      	movs	r1, #0
 8001432:	2078      	movs	r0, #120	@ 0x78
 8001434:	f000 f928 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001438:	223f      	movs	r2, #63	@ 0x3f
 800143a:	2100      	movs	r1, #0
 800143c:	2078      	movs	r0, #120	@ 0x78
 800143e:	f000 f923 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001442:	22a4      	movs	r2, #164	@ 0xa4
 8001444:	2100      	movs	r1, #0
 8001446:	2078      	movs	r0, #120	@ 0x78
 8001448:	f000 f91e 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800144c:	22d3      	movs	r2, #211	@ 0xd3
 800144e:	2100      	movs	r1, #0
 8001450:	2078      	movs	r0, #120	@ 0x78
 8001452:	f000 f919 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2078      	movs	r0, #120	@ 0x78
 800145c:	f000 f914 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001460:	22d5      	movs	r2, #213	@ 0xd5
 8001462:	2100      	movs	r1, #0
 8001464:	2078      	movs	r0, #120	@ 0x78
 8001466:	f000 f90f 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800146a:	22f0      	movs	r2, #240	@ 0xf0
 800146c:	2100      	movs	r1, #0
 800146e:	2078      	movs	r0, #120	@ 0x78
 8001470:	f000 f90a 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001474:	22d9      	movs	r2, #217	@ 0xd9
 8001476:	2100      	movs	r1, #0
 8001478:	2078      	movs	r0, #120	@ 0x78
 800147a:	f000 f905 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800147e:	2222      	movs	r2, #34	@ 0x22
 8001480:	2100      	movs	r1, #0
 8001482:	2078      	movs	r0, #120	@ 0x78
 8001484:	f000 f900 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001488:	22da      	movs	r2, #218	@ 0xda
 800148a:	2100      	movs	r1, #0
 800148c:	2078      	movs	r0, #120	@ 0x78
 800148e:	f000 f8fb 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001492:	2212      	movs	r2, #18
 8001494:	2100      	movs	r1, #0
 8001496:	2078      	movs	r0, #120	@ 0x78
 8001498:	f000 f8f6 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800149c:	22db      	movs	r2, #219	@ 0xdb
 800149e:	2100      	movs	r1, #0
 80014a0:	2078      	movs	r0, #120	@ 0x78
 80014a2:	f000 f8f1 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80014a6:	2220      	movs	r2, #32
 80014a8:	2100      	movs	r1, #0
 80014aa:	2078      	movs	r0, #120	@ 0x78
 80014ac:	f000 f8ec 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80014b0:	228d      	movs	r2, #141	@ 0x8d
 80014b2:	2100      	movs	r1, #0
 80014b4:	2078      	movs	r0, #120	@ 0x78
 80014b6:	f000 f8e7 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80014ba:	2214      	movs	r2, #20
 80014bc:	2100      	movs	r1, #0
 80014be:	2078      	movs	r0, #120	@ 0x78
 80014c0:	f000 f8e2 	bl	8001688 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80014c4:	22af      	movs	r2, #175	@ 0xaf
 80014c6:	2100      	movs	r1, #0
 80014c8:	2078      	movs	r0, #120	@ 0x78
 80014ca:	f000 f8dd 	bl	8001688 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80014ce:	222e      	movs	r2, #46	@ 0x2e
 80014d0:	2100      	movs	r1, #0
 80014d2:	2078      	movs	r0, #120	@ 0x78
 80014d4:	f000 f8d8 	bl	8001688 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 f843 	bl	8001564 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80014de:	f000 f813 	bl	8001508 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80014e2:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <SSD1306_Init+0x184>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <SSD1306_Init+0x184>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80014ee:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <SSD1306_Init+0x184>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80014f4:	2301      	movs	r3, #1
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000498 	.word	0x20000498
 8001504:	20000464 	.word	0x20000464

08001508 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800150e:	2300      	movs	r3, #0
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	e01d      	b.n	8001550 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	3b50      	subs	r3, #80	@ 0x50
 8001518:	b2db      	uxtb	r3, r3
 800151a:	461a      	mov	r2, r3
 800151c:	2100      	movs	r1, #0
 800151e:	2078      	movs	r0, #120	@ 0x78
 8001520:	f000 f8b2 	bl	8001688 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	2078      	movs	r0, #120	@ 0x78
 800152a:	f000 f8ad 	bl	8001688 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800152e:	2210      	movs	r2, #16
 8001530:	2100      	movs	r1, #0
 8001532:	2078      	movs	r0, #120	@ 0x78
 8001534:	f000 f8a8 	bl	8001688 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	01db      	lsls	r3, r3, #7
 800153c:	4a08      	ldr	r2, [pc, #32]	@ (8001560 <SSD1306_UpdateScreen+0x58>)
 800153e:	441a      	add	r2, r3
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	2140      	movs	r1, #64	@ 0x40
 8001544:	2078      	movs	r0, #120	@ 0x78
 8001546:	f000 f839 	bl	80015bc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	3301      	adds	r3, #1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	2b07      	cmp	r3, #7
 8001554:	d9de      	bls.n	8001514 <SSD1306_UpdateScreen+0xc>
	}
}
 8001556:	bf00      	nop
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000064 	.word	0x20000064

08001564 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <SSD1306_Fill+0x14>
 8001574:	2300      	movs	r3, #0
 8001576:	e000      	b.n	800157a <SSD1306_Fill+0x16>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800157e:	4619      	mov	r1, r3
 8001580:	4803      	ldr	r0, [pc, #12]	@ (8001590 <SSD1306_Fill+0x2c>)
 8001582:	f003 fbaf 	bl	8004ce4 <memset>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000064 	.word	0x20000064

08001594 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800159a:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <ssd1306_I2C_Init+0x24>)
 800159c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800159e:	e002      	b.n	80015a6 <ssd1306_I2C_Init+0x12>
		p--;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f9      	bne.n	80015a0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&H_I2C);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	0003d090 	.word	0x0003d090

080015bc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b0c7      	sub	sp, #284	@ 0x11c
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	4604      	mov	r4, r0
 80015c4:	4608      	mov	r0, r1
 80015c6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80015ca:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80015ce:	600a      	str	r2, [r1, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015d6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80015da:	4622      	mov	r2, r4
 80015dc:	701a      	strb	r2, [r3, #0]
 80015de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015e2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80015e6:	4602      	mov	r2, r0
 80015e8:	701a      	strb	r2, [r3, #0]
 80015ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015f2:	460a      	mov	r2, r1
 80015f4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80015f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015fe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001602:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001606:	7812      	ldrb	r2, [r2, #0]
 8001608:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800160a:	2300      	movs	r3, #0
 800160c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001610:	e015      	b.n	800163e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001612:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001616:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800161a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	441a      	add	r2, r3
 8001622:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001626:	3301      	adds	r3, #1
 8001628:	7811      	ldrb	r1, [r2, #0]
 800162a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800162e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001632:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001634:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001638:	3301      	adds	r3, #1
 800163a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800163e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001642:	b29b      	uxth	r3, r3
 8001644:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001648:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800164c:	8812      	ldrh	r2, [r2, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d8df      	bhi.n	8001612 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&H_I2C, address, dt, count+1, 10);
 8001652:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001656:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b299      	uxth	r1, r3
 800165e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001662:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	b29b      	uxth	r3, r3
 800166c:	f107 020c 	add.w	r2, r7, #12
 8001670:	200a      	movs	r0, #10
 8001672:	9000      	str	r0, [sp, #0]
 8001674:	4803      	ldr	r0, [pc, #12]	@ (8001684 <ssd1306_I2C_WriteMulti+0xc8>)
 8001676:	f001 fafd 	bl	8002c74 <HAL_I2C_Master_Transmit>
}
 800167a:	bf00      	nop
 800167c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001680:	46bd      	mov	sp, r7
 8001682:	bd90      	pop	{r4, r7, pc}
 8001684:	20000498 	.word	0x20000498

08001688 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af02      	add	r7, sp, #8
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	460b      	mov	r3, r1
 8001694:	71bb      	strb	r3, [r7, #6]
 8001696:	4613      	mov	r3, r2
 8001698:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800169a:	79bb      	ldrb	r3, [r7, #6]
 800169c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800169e:	797b      	ldrb	r3, [r7, #5]
 80016a0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&H_I2C, address, dt, 2, 10);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	b299      	uxth	r1, r3
 80016a6:	f107 020c 	add.w	r2, r7, #12
 80016aa:	230a      	movs	r3, #10
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2302      	movs	r3, #2
 80016b0:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <ssd1306_I2C_Write+0x38>)
 80016b2:	f001 fadf 	bl	8002c74 <HAL_I2C_Master_Transmit>
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000498 	.word	0x20000498

080016c4 <init_fnd>:
#include "fnd_controller.h"

uint8_t _LED_0F[29];
static SPI_HandleTypeDef * m_hspi;

void init_fnd(SPI_HandleTypeDef * hspi) {
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	_LED_0F[0] = 0xC0; //0
 80016cc:	4b2f      	ldr	r3, [pc, #188]	@ (800178c <init_fnd+0xc8>)
 80016ce:	22c0      	movs	r2, #192	@ 0xc0
 80016d0:	701a      	strb	r2, [r3, #0]
	_LED_0F[1] = 0xF9; //1
 80016d2:	4b2e      	ldr	r3, [pc, #184]	@ (800178c <init_fnd+0xc8>)
 80016d4:	22f9      	movs	r2, #249	@ 0xf9
 80016d6:	705a      	strb	r2, [r3, #1]
	_LED_0F[2] = 0xA4; //2
 80016d8:	4b2c      	ldr	r3, [pc, #176]	@ (800178c <init_fnd+0xc8>)
 80016da:	22a4      	movs	r2, #164	@ 0xa4
 80016dc:	709a      	strb	r2, [r3, #2]
	_LED_0F[3] = 0xB0; //3
 80016de:	4b2b      	ldr	r3, [pc, #172]	@ (800178c <init_fnd+0xc8>)
 80016e0:	22b0      	movs	r2, #176	@ 0xb0
 80016e2:	70da      	strb	r2, [r3, #3]
	_LED_0F[4] = 0x99; //4
 80016e4:	4b29      	ldr	r3, [pc, #164]	@ (800178c <init_fnd+0xc8>)
 80016e6:	2299      	movs	r2, #153	@ 0x99
 80016e8:	711a      	strb	r2, [r3, #4]
	_LED_0F[5] = 0x92; //5
 80016ea:	4b28      	ldr	r3, [pc, #160]	@ (800178c <init_fnd+0xc8>)
 80016ec:	2292      	movs	r2, #146	@ 0x92
 80016ee:	715a      	strb	r2, [r3, #5]
	_LED_0F[6] = 0x82; //6
 80016f0:	4b26      	ldr	r3, [pc, #152]	@ (800178c <init_fnd+0xc8>)
 80016f2:	2282      	movs	r2, #130	@ 0x82
 80016f4:	719a      	strb	r2, [r3, #6]
	_LED_0F[7] = 0xF8; //7
 80016f6:	4b25      	ldr	r3, [pc, #148]	@ (800178c <init_fnd+0xc8>)
 80016f8:	22f8      	movs	r2, #248	@ 0xf8
 80016fa:	71da      	strb	r2, [r3, #7]
	_LED_0F[8] = 0x80; //8
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <init_fnd+0xc8>)
 80016fe:	2280      	movs	r2, #128	@ 0x80
 8001700:	721a      	strb	r2, [r3, #8]
	_LED_0F[9] = 0x90; //9
 8001702:	4b22      	ldr	r3, [pc, #136]	@ (800178c <init_fnd+0xc8>)
 8001704:	2290      	movs	r2, #144	@ 0x90
 8001706:	725a      	strb	r2, [r3, #9]
	_LED_0F[10] = 0x88; //A
 8001708:	4b20      	ldr	r3, [pc, #128]	@ (800178c <init_fnd+0xc8>)
 800170a:	2288      	movs	r2, #136	@ 0x88
 800170c:	729a      	strb	r2, [r3, #10]
	_LED_0F[11] = 0x83; //b
 800170e:	4b1f      	ldr	r3, [pc, #124]	@ (800178c <init_fnd+0xc8>)
 8001710:	2283      	movs	r2, #131	@ 0x83
 8001712:	72da      	strb	r2, [r3, #11]
	_LED_0F[12] = 0xC6; //C
 8001714:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <init_fnd+0xc8>)
 8001716:	22c6      	movs	r2, #198	@ 0xc6
 8001718:	731a      	strb	r2, [r3, #12]
	_LED_0F[13] = 0xA1; //d
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <init_fnd+0xc8>)
 800171c:	22a1      	movs	r2, #161	@ 0xa1
 800171e:	735a      	strb	r2, [r3, #13]
	_LED_0F[14] = 0x86; //E
 8001720:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <init_fnd+0xc8>)
 8001722:	2286      	movs	r2, #134	@ 0x86
 8001724:	739a      	strb	r2, [r3, #14]
	_LED_0F[15] = 0x8E; //F
 8001726:	4b19      	ldr	r3, [pc, #100]	@ (800178c <init_fnd+0xc8>)
 8001728:	228e      	movs	r2, #142	@ 0x8e
 800172a:	73da      	strb	r2, [r3, #15]
	_LED_0F[16] = 0xC2; //G
 800172c:	4b17      	ldr	r3, [pc, #92]	@ (800178c <init_fnd+0xc8>)
 800172e:	22c2      	movs	r2, #194	@ 0xc2
 8001730:	741a      	strb	r2, [r3, #16]
	_LED_0F[17] = 0x89; //H
 8001732:	4b16      	ldr	r3, [pc, #88]	@ (800178c <init_fnd+0xc8>)
 8001734:	2289      	movs	r2, #137	@ 0x89
 8001736:	745a      	strb	r2, [r3, #17]
	_LED_0F[18] = 0xF9; //I
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <init_fnd+0xc8>)
 800173a:	22f9      	movs	r2, #249	@ 0xf9
 800173c:	749a      	strb	r2, [r3, #18]
	_LED_0F[19] = 0xF1; //J
 800173e:	4b13      	ldr	r3, [pc, #76]	@ (800178c <init_fnd+0xc8>)
 8001740:	22f1      	movs	r2, #241	@ 0xf1
 8001742:	74da      	strb	r2, [r3, #19]
	_LED_0F[20] = 0xC3; //L
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <init_fnd+0xc8>)
 8001746:	22c3      	movs	r2, #195	@ 0xc3
 8001748:	751a      	strb	r2, [r3, #20]
	_LED_0F[21] = 0xA9; //n
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <init_fnd+0xc8>)
 800174c:	22a9      	movs	r2, #169	@ 0xa9
 800174e:	755a      	strb	r2, [r3, #21]
	_LED_0F[22] = 0xC0; //O
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <init_fnd+0xc8>)
 8001752:	22c0      	movs	r2, #192	@ 0xc0
 8001754:	759a      	strb	r2, [r3, #22]
	_LED_0F[23] = 0x8C; //P
 8001756:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <init_fnd+0xc8>)
 8001758:	228c      	movs	r2, #140	@ 0x8c
 800175a:	75da      	strb	r2, [r3, #23]
	_LED_0F[24] = 0x98; //q
 800175c:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <init_fnd+0xc8>)
 800175e:	2298      	movs	r2, #152	@ 0x98
 8001760:	761a      	strb	r2, [r3, #24]
	_LED_0F[25] = 0x92; //S
 8001762:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <init_fnd+0xc8>)
 8001764:	2292      	movs	r2, #146	@ 0x92
 8001766:	765a      	strb	r2, [r3, #25]
	_LED_0F[26] = 0xC1; //U
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <init_fnd+0xc8>)
 800176a:	22c1      	movs	r2, #193	@ 0xc1
 800176c:	769a      	strb	r2, [r3, #26]
	_LED_0F[27] = 0x91; //Y
 800176e:	4b07      	ldr	r3, [pc, #28]	@ (800178c <init_fnd+0xc8>)
 8001770:	2291      	movs	r2, #145	@ 0x91
 8001772:	76da      	strb	r2, [r3, #27]
	_LED_0F[28] = 0xFE; //hight -
 8001774:	4b05      	ldr	r3, [pc, #20]	@ (800178c <init_fnd+0xc8>)
 8001776:	22fe      	movs	r2, #254	@ 0xfe
 8001778:	771a      	strb	r2, [r3, #28]
	m_hspi = hspi;
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <init_fnd+0xcc>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	2000046c 	.word	0x2000046c
 8001790:	2000048c 	.word	0x2000048c

08001794 <send>:

void send(uint8_t X) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
		}
		X <<= 1;
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, HIGH);
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, LOW);
	}  */
	HAL_SPI_Transmit(m_hspi, &X, 1, 100);
 800179e:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <send+0x20>)
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	1df9      	adds	r1, r7, #7
 80017a4:	2364      	movs	r3, #100	@ 0x64
 80017a6:	2201      	movs	r2, #1
 80017a8:	f002 fb7e 	bl	8003ea8 <HAL_SPI_Transmit>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000048c 	.word	0x2000048c

080017b8 <send_port>:

void send_port(uint8_t X, uint8_t port) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]
	send(X);
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ffe2 	bl	8001794 <send>
	send(port);
 80017d0:	79bb      	ldrb	r3, [r7, #6]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ffde 	bl	8001794 <send>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017de:	4806      	ldr	r0, [pc, #24]	@ (80017f8 <send_port+0x40>)
 80017e0:	f001 f8c9 	bl	8002976 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);
 80017e4:	2201      	movs	r2, #1
 80017e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017ea:	4803      	ldr	r0, [pc, #12]	@ (80017f8 <send_port+0x40>)
 80017ec:	f001 f8c3 	bl	8002976 <HAL_GPIO_WritePin>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40010c00 	.word	0x40010c00

080017fc <digit4_temper>:
			send_port(_LED_0F[n4], 0b1000);
	}
}

static uint8_t m_tempercount = 0;
void digit4_temper(int temper) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	int n1, n2, n3, n4;
	n1 = (int) temper % 10;
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4b55      	ldr	r3, [pc, #340]	@ (800195c <digit4_temper+0x160>)
 8001808:	fb83 1302 	smull	r1, r3, r3, r2
 800180c:	1099      	asrs	r1, r3, #2
 800180e:	17d3      	asrs	r3, r2, #31
 8001810:	1ac9      	subs	r1, r1, r3
 8001812:	460b      	mov	r3, r1
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	617b      	str	r3, [r7, #20]
	n2 = (int) ((temper % 100)) / 10;
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	4b4f      	ldr	r3, [pc, #316]	@ (8001960 <digit4_temper+0x164>)
 8001822:	fb83 1302 	smull	r1, r3, r3, r2
 8001826:	1159      	asrs	r1, r3, #5
 8001828:	17d3      	asrs	r3, r2, #31
 800182a:	1acb      	subs	r3, r1, r3
 800182c:	2164      	movs	r1, #100	@ 0x64
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	4a49      	ldr	r2, [pc, #292]	@ (800195c <digit4_temper+0x160>)
 8001836:	fb82 1203 	smull	r1, r2, r2, r3
 800183a:	1092      	asrs	r2, r2, #2
 800183c:	17db      	asrs	r3, r3, #31
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	613b      	str	r3, [r7, #16]
	n3 = (int) ((temper % 1000)) / 100;
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	4b47      	ldr	r3, [pc, #284]	@ (8001964 <digit4_temper+0x168>)
 8001846:	fb83 1302 	smull	r1, r3, r3, r2
 800184a:	1199      	asrs	r1, r3, #6
 800184c:	17d3      	asrs	r3, r2, #31
 800184e:	1acb      	subs	r3, r1, r3
 8001850:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	4a41      	ldr	r2, [pc, #260]	@ (8001960 <digit4_temper+0x164>)
 800185c:	fb82 1203 	smull	r1, r2, r2, r3
 8001860:	1152      	asrs	r2, r2, #5
 8001862:	17db      	asrs	r3, r3, #31
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	60fb      	str	r3, [r7, #12]
	n4 = (int) ((temper % 10000)) / 1000;
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	4b3f      	ldr	r3, [pc, #252]	@ (8001968 <digit4_temper+0x16c>)
 800186c:	fb83 1302 	smull	r1, r3, r3, r2
 8001870:	1319      	asrs	r1, r3, #12
 8001872:	17d3      	asrs	r3, r2, #31
 8001874:	1acb      	subs	r3, r1, r3
 8001876:	f242 7110 	movw	r1, #10000	@ 0x2710
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	4a38      	ldr	r2, [pc, #224]	@ (8001964 <digit4_temper+0x168>)
 8001882:	fb82 1203 	smull	r1, r2, r2, r3
 8001886:	1192      	asrs	r2, r2, #6
 8001888:	17db      	asrs	r3, r3, #31
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	60bb      	str	r3, [r7, #8]

	switch (m_tempercount) {
 800188e:	4b37      	ldr	r3, [pc, #220]	@ (800196c <digit4_temper+0x170>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b03      	cmp	r3, #3
 8001894:	d835      	bhi.n	8001902 <digit4_temper+0x106>
 8001896:	a201      	add	r2, pc, #4	@ (adr r2, 800189c <digit4_temper+0xa0>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	080018ad 	.word	0x080018ad
 80018a0:	080018bf 	.word	0x080018bf
 80018a4:	080018d1 	.word	0x080018d1
 80018a8:	080018e9 	.word	0x080018e9
	case 0:
		send_port(_LED_0F[n1], 0b0001);
 80018ac:	4a30      	ldr	r2, [pc, #192]	@ (8001970 <digit4_temper+0x174>)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	4413      	add	r3, r2
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2101      	movs	r1, #1
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff7e 	bl	80017b8 <send_port>
		break;
 80018bc:	e022      	b.n	8001904 <digit4_temper+0x108>
	case 1:
		send_port(_LED_0F[n2], 0b0010);
 80018be:	4a2c      	ldr	r2, [pc, #176]	@ (8001970 <digit4_temper+0x174>)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4413      	add	r3, r2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2102      	movs	r1, #2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff75 	bl	80017b8 <send_port>
		break;
 80018ce:	e019      	b.n	8001904 <digit4_temper+0x108>
	case 2:
		if (temper > 99){
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b63      	cmp	r3, #99	@ 0x63
 80018d4:	dd08      	ble.n	80018e8 <digit4_temper+0xec>
			send_port(_LED_0F[n3], 0b0100);
 80018d6:	4a26      	ldr	r2, [pc, #152]	@ (8001970 <digit4_temper+0x174>)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2104      	movs	r1, #4
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff69 	bl	80017b8 <send_port>
		break;
 80018e6:	e00d      	b.n	8001904 <digit4_temper+0x108>
		}
    case 3:
		if (temper > 999){
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018ee:	db08      	blt.n	8001902 <digit4_temper+0x106>
			send_port(_LED_0F[n4], 0b1000);
 80018f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001970 <digit4_temper+0x174>)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	4413      	add	r3, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2108      	movs	r1, #8
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff5c 	bl	80017b8 <send_port>
		break;
 8001900:	e000      	b.n	8001904 <digit4_temper+0x108>
		}
	default:
		break;
 8001902:	bf00      	nop
	}

	m_tempercount++;
 8001904:	4b19      	ldr	r3, [pc, #100]	@ (800196c <digit4_temper+0x170>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b17      	ldr	r3, [pc, #92]	@ (800196c <digit4_temper+0x170>)
 800190e:	701a      	strb	r2, [r3, #0]

	if (temper > 999 && m_tempercount >= 4) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001916:	db07      	blt.n	8001928 <digit4_temper+0x12c>
 8001918:	4b14      	ldr	r3, [pc, #80]	@ (800196c <digit4_temper+0x170>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b03      	cmp	r3, #3
 800191e:	d903      	bls.n	8001928 <digit4_temper+0x12c>
				m_tempercount = 0;
 8001920:	4b12      	ldr	r3, [pc, #72]	@ (800196c <digit4_temper+0x170>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
 8001926:	e015      	b.n	8001954 <digit4_temper+0x158>
	}else if(temper > 99 && m_tempercount >= 3){
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b63      	cmp	r3, #99	@ 0x63
 800192c:	dd07      	ble.n	800193e <digit4_temper+0x142>
 800192e:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <digit4_temper+0x170>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d903      	bls.n	800193e <digit4_temper+0x142>
				m_tempercount = 0;
 8001936:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <digit4_temper+0x170>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	e00a      	b.n	8001954 <digit4_temper+0x158>
	}else if(temper <= 99 && m_tempercount >= 2){
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b63      	cmp	r3, #99	@ 0x63
 8001942:	dc07      	bgt.n	8001954 <digit4_temper+0x158>
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <digit4_temper+0x170>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d903      	bls.n	8001954 <digit4_temper+0x158>
				m_tempercount = 0;
 800194c:	4b07      	ldr	r3, [pc, #28]	@ (800196c <digit4_temper+0x170>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
			}

}
 8001952:	e7ff      	b.n	8001954 <digit4_temper+0x158>
 8001954:	bf00      	nop
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	66666667 	.word	0x66666667
 8001960:	51eb851f 	.word	0x51eb851f
 8001964:	10624dd3 	.word	0x10624dd3
 8001968:	68db8bad 	.word	0x68db8bad
 800196c:	20000490 	.word	0x20000490
 8001970:	2000046c 	.word	0x2000046c

08001974 <heaterControll>:
#include "heaterController.h"


static uint8_t m_state = 0;
void heaterControll(uint8_t onOff){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin,onOff);
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	461a      	mov	r2, r3
 8001982:	2120      	movs	r1, #32
 8001984:	4804      	ldr	r0, [pc, #16]	@ (8001998 <heaterControll+0x24>)
 8001986:	f000 fff6 	bl	8002976 <HAL_GPIO_WritePin>
    m_state = onOff;
 800198a:	4a04      	ldr	r2, [pc, #16]	@ (800199c <heaterControll+0x28>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	7013      	strb	r3, [r2, #0]

}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40010c00 	.word	0x40010c00
 800199c:	20000491 	.word	0x20000491

080019a0 <getHeaterState>:


uint8_t getHeaterState(){
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
		return m_state;
 80019a4:	4b02      	ldr	r3, [pc, #8]	@ (80019b0 <getHeaterState+0x10>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	20000491 	.word	0x20000491

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

float temper = 0.0;
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c0:	f000 fcaa 	bl	8002318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c4:	f000 f85c 	bl	8001a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c8:	f000 f9c6 	bl	8001d58 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80019cc:	f000 f99a 	bl	8001d04 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80019d0:	f000 f900 	bl	8001bd4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019d4:	f000 f94a 	bl	8001c6c <MX_TIM3_Init>
  MX_I2C2_Init();
 80019d8:	f000 f898 	bl	8001b0c <MX_I2C2_Init>
  MX_SPI2_Init();
 80019dc:	f000 f8c4 	bl	8001b68 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80019e0:	f7ff fcce 	bl	8001380 <SSD1306_Init>
		  SSD1306_DrawBitmap(0,0,ojtubelog1,128,64,1);
		  SSD1306_UpdateScreen();
          HAL_Delay (300);
*/

init_fnd(&hspi2);
 80019e4:	4822      	ldr	r0, [pc, #136]	@ (8001a70 <main+0xbc>)
 80019e6:	f7ff fe6d 	bl	80016c4 <init_fnd>


HAL_TIM_Base_Start_IT(&htim3);
 80019ea:	4822      	ldr	r0, [pc, #136]	@ (8001a74 <main+0xc0>)
 80019ec:	f002 fcf2 	bl	80043d4 <HAL_TIM_Base_Start_IT>

Ds18b20_Init();
 80019f0:	f7fe fe6a 	bl	80006c8 <Ds18b20_Init>
Ds18b20_Init_Simple();
 80019f4:	f7fe fe24 	bl	8000640 <Ds18b20_Init_Simple>
          */




	    if(!isConverting()){
 80019f8:	f7fe fe18 	bl	800062c <isConverting>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <main+0x52>
	       StartConverting();
 8001a02:	f7fe ff7f 	bl	8000904 <StartConverting>
        }

        checkConverting();
 8001a06:	f7fe fedf 	bl	80007c8 <checkConverting>

       if(!isConverting()){
 8001a0a:	f7fe fe0f 	bl	800062c <isConverting>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <main+0x66>
         temper = getTemper();
 8001a14:	f7fe feec 	bl	80007f0 <getTemper>
 8001a18:	6078      	str	r0, [r7, #4]
        }

       HAL_Delay(10);
 8001a1a:	200a      	movs	r0, #10
 8001a1c:	f000 fcde 	bl	80023dc <HAL_Delay>


	Ds18b20_ManualConvert();
 8001a20:	f7fe fefe 	bl	8000820 <Ds18b20_ManualConvert>


	 if(getCurrentTemper() > 50 && getHeaterState() == t_ON){
 8001a24:	f7ff f986 	bl	8000d34 <getCurrentTemper>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4913      	ldr	r1, [pc, #76]	@ (8001a78 <main+0xc4>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fdbb 	bl	80005a8 <__aeabi_fcmpgt>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <main+0x96>
 8001a38:	f7ff ffb2 	bl	80019a0 <getHeaterState>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d103      	bne.n	8001a4a <main+0x96>
		  heaterControll(t_OFF);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff ff96 	bl	8001974 <heaterControll>
 8001a48:	e011      	b.n	8001a6e <main+0xba>
	  }else if (getCurrentTemper() < 45 && getHeaterState() == t_OFF){
 8001a4a:	f7ff f973 	bl	8000d34 <getCurrentTemper>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	490a      	ldr	r1, [pc, #40]	@ (8001a7c <main+0xc8>)
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd8a 	bl	800056c <__aeabi_fcmplt>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <main+0xba>
 8001a5e:	f7ff ff9f 	bl	80019a0 <getHeaterState>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1c7      	bne.n	80019f8 <main+0x44>
		  heaterControll(t_ON);
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f7ff ff83 	bl	8001974 <heaterControll>
	    if(!isConverting()){
 8001a6e:	e7c3      	b.n	80019f8 <main+0x44>
 8001a70:	200004ec 	.word	0x200004ec
 8001a74:	2000058c 	.word	0x2000058c
 8001a78:	42480000 	.word	0x42480000
 8001a7c:	42340000 	.word	0x42340000

08001a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b090      	sub	sp, #64	@ 0x40
 8001a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a86:	f107 0318 	add.w	r3, r7, #24
 8001a8a:	2228      	movs	r2, #40	@ 0x28
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 f928 	bl	8004ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001aaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ab8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001abc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001abe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac4:	f107 0318 	add.w	r3, r7, #24
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f001 fd59 	bl	8003580 <HAL_RCC_OscConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ad4:	f000 fa20 	bl	8001f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad8:	230f      	movs	r3, #15
 8001ada:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001adc:	2302      	movs	r3, #2
 8001ade:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ae8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2102      	movs	r1, #2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f001 ffc6 	bl	8003a84 <HAL_RCC_ClockConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001afe:	f000 fa0b 	bl	8001f18 <Error_Handler>
  }
}
 8001b02:	bf00      	nop
 8001b04:	3740      	adds	r7, #64	@ 0x40
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <MX_I2C2_Init+0x50>)
 8001b12:	4a13      	ldr	r2, [pc, #76]	@ (8001b60 <MX_I2C2_Init+0x54>)
 8001b14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001b16:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <MX_I2C2_Init+0x50>)
 8001b18:	4a12      	ldr	r2, [pc, #72]	@ (8001b64 <MX_I2C2_Init+0x58>)
 8001b1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <MX_I2C2_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <MX_I2C2_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <MX_I2C2_Init+0x50>)
 8001b2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b2e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <MX_I2C2_Init+0x50>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <MX_I2C2_Init+0x50>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <MX_I2C2_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <MX_I2C2_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b48:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <MX_I2C2_Init+0x50>)
 8001b4a:	f000 ff4f 	bl	80029ec <HAL_I2C_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b54:	f000 f9e0 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000498 	.word	0x20000498
 8001b60:	40005800 	.word	0x40005800
 8001b64:	00061a80 	.word	0x00061a80

08001b68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b6e:	4a18      	ldr	r2, [pc, #96]	@ (8001bd0 <MX_SPI2_Init+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b72:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b88:	2202      	movs	r2, #2
 8001b8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bac:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001bb4:	220a      	movs	r2, #10
 8001bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bb8:	4804      	ldr	r0, [pc, #16]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001bba:	f002 f8f1 	bl	8003da0 <HAL_SPI_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001bc4:	f000 f9a8 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200004ec 	.word	0x200004ec
 8001bd0:	40003800 	.word	0x40003800

08001bd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	463b      	mov	r3, r7
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <MX_TIM2_Init+0x94>)
 8001bf2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (72- 1);
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <MX_TIM2_Init+0x94>)
 8001bfa:	2247      	movs	r2, #71	@ 0x47
 8001bfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <MX_TIM2_Init+0x94>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8001c04:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <MX_TIM2_Init+0x94>)
 8001c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <MX_TIM2_Init+0x94>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <MX_TIM2_Init+0x94>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c18:	4813      	ldr	r0, [pc, #76]	@ (8001c68 <MX_TIM2_Init+0x94>)
 8001c1a:	f002 fb42 	bl	80042a2 <HAL_TIM_Base_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c24:	f000 f978 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	4619      	mov	r1, r3
 8001c34:	480c      	ldr	r0, [pc, #48]	@ (8001c68 <MX_TIM2_Init+0x94>)
 8001c36:	f002 fd0f 	bl	8004658 <HAL_TIM_ConfigClockSource>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c40:	f000 f96a 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	@ (8001c68 <MX_TIM2_Init+0x94>)
 8001c52:	f002 fef9 	bl	8004a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c5c:	f000 f95c 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000544 	.word	0x20000544

08001c6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c80:	463b      	mov	r3, r7
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c88:	4b1c      	ldr	r3, [pc, #112]	@ (8001cfc <MX_TIM3_Init+0x90>)
 8001c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d00 <MX_TIM3_Init+0x94>)
 8001c8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <MX_TIM3_Init+0x90>)
 8001c90:	2247      	movs	r2, #71	@ 0x47
 8001c92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c94:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <MX_TIM3_Init+0x90>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001c9a:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <MX_TIM3_Init+0x90>)
 8001c9c:	2263      	movs	r2, #99	@ 0x63
 8001c9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca0:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <MX_TIM3_Init+0x90>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <MX_TIM3_Init+0x90>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cac:	4813      	ldr	r0, [pc, #76]	@ (8001cfc <MX_TIM3_Init+0x90>)
 8001cae:	f002 faf8 	bl	80042a2 <HAL_TIM_Base_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001cb8:	f000 f92e 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cc2:	f107 0308 	add.w	r3, r7, #8
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480c      	ldr	r0, [pc, #48]	@ (8001cfc <MX_TIM3_Init+0x90>)
 8001cca:	f002 fcc5 	bl	8004658 <HAL_TIM_ConfigClockSource>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001cd4:	f000 f920 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4805      	ldr	r0, [pc, #20]	@ (8001cfc <MX_TIM3_Init+0x90>)
 8001ce6:	f002 feaf 	bl	8004a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001cf0:	f000 f912 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	2000058c 	.word	0x2000058c
 8001d00:	40000400 	.word	0x40000400

08001d04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <MX_USART1_UART_Init+0x50>)
 8001d0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d28:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	@ (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d3c:	f002 fef4 	bl	8004b28 <HAL_UART_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d46:	f000 f8e7 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200005d4 	.word	0x200005d4
 8001d54:	40013800 	.word	0x40013800

08001d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6c:	4b65      	ldr	r3, [pc, #404]	@ (8001f04 <MX_GPIO_Init+0x1ac>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a64      	ldr	r2, [pc, #400]	@ (8001f04 <MX_GPIO_Init+0x1ac>)
 8001d72:	f043 0310 	orr.w	r3, r3, #16
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b62      	ldr	r3, [pc, #392]	@ (8001f04 <MX_GPIO_Init+0x1ac>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d84:	4b5f      	ldr	r3, [pc, #380]	@ (8001f04 <MX_GPIO_Init+0x1ac>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	4a5e      	ldr	r2, [pc, #376]	@ (8001f04 <MX_GPIO_Init+0x1ac>)
 8001d8a:	f043 0320 	orr.w	r3, r3, #32
 8001d8e:	6193      	str	r3, [r2, #24]
 8001d90:	4b5c      	ldr	r3, [pc, #368]	@ (8001f04 <MX_GPIO_Init+0x1ac>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9c:	4b59      	ldr	r3, [pc, #356]	@ (8001f04 <MX_GPIO_Init+0x1ac>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	4a58      	ldr	r2, [pc, #352]	@ (8001f04 <MX_GPIO_Init+0x1ac>)
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6193      	str	r3, [r2, #24]
 8001da8:	4b56      	ldr	r3, [pc, #344]	@ (8001f04 <MX_GPIO_Init+0x1ac>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db4:	4b53      	ldr	r3, [pc, #332]	@ (8001f04 <MX_GPIO_Init+0x1ac>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4a52      	ldr	r2, [pc, #328]	@ (8001f04 <MX_GPIO_Init+0x1ac>)
 8001dba:	f043 0308 	orr.w	r3, r3, #8
 8001dbe:	6193      	str	r3, [r2, #24]
 8001dc0:	4b50      	ldr	r3, [pc, #320]	@ (8001f04 <MX_GPIO_Init+0x1ac>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dd2:	484d      	ldr	r0, [pc, #308]	@ (8001f08 <MX_GPIO_Init+0x1b0>)
 8001dd4:	f000 fdcf 	bl	8002976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA2_TEMP_DATA_Pin|PA3_TEMP_DATA_Pin, GPIO_PIN_SET);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	210c      	movs	r1, #12
 8001ddc:	484b      	ldr	r0, [pc, #300]	@ (8001f0c <MX_GPIO_Init+0x1b4>)
 8001dde:	f000 fdca 	bl	8002976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|PB6_LED1_Pin|PB7_LED1_Pin, GPIO_PIN_SET);
 8001de2:	2201      	movs	r2, #1
 8001de4:	f244 01c0 	movw	r1, #16576	@ 0x40c0
 8001de8:	4849      	ldr	r0, [pc, #292]	@ (8001f10 <MX_GPIO_Init+0x1b8>)
 8001dea:	f000 fdc4 	bl	8002976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2120      	movs	r1, #32
 8001df2:	4847      	ldr	r0, [pc, #284]	@ (8001f10 <MX_GPIO_Init+0x1b8>)
 8001df4:	f000 fdbf 	bl	8002976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8001df8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e02:	2302      	movs	r3, #2
 8001e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8001e0a:	f107 0310 	add.w	r3, r7, #16
 8001e0e:	4619      	mov	r1, r3
 8001e10:	483d      	ldr	r0, [pc, #244]	@ (8001f08 <MX_GPIO_Init+0x1b0>)
 8001e12:	f000 fc15 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_Pin;
 8001e16:	2301      	movs	r3, #1
 8001e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_SW_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	4619      	mov	r1, r3
 8001e28:	4838      	ldr	r0, [pc, #224]	@ (8001f0c <MX_GPIO_Init+0x1b4>)
 8001e2a:	f000 fc09 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2_TEMP_DATA_Pin PA3_TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = PA2_TEMP_DATA_Pin|PA3_TEMP_DATA_Pin;
 8001e2e:	230c      	movs	r3, #12
 8001e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e36:	2301      	movs	r3, #1
 8001e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f107 0310 	add.w	r3, r7, #16
 8001e42:	4619      	mov	r1, r3
 8001e44:	4831      	ldr	r0, [pc, #196]	@ (8001f0c <MX_GPIO_Init+0x1b4>)
 8001e46:	f000 fbfb 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0_TEMP_SET_UP_Pin PB1_TEMP_SET_FIX_Pin PB2_TEMP_SET_DOWN_Pin PB12_START_SW_PIN_GPIO_Port_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin|PB1_TEMP_SET_FIX_Pin|PB2_TEMP_SET_DOWN_Pin|PB12_START_SW_PIN_GPIO_Port_Pin;
 8001e4a:	f241 0307 	movw	r3, #4103	@ 0x1007
 8001e4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e50:	4b30      	ldr	r3, [pc, #192]	@ (8001f14 <MX_GPIO_Init+0x1bc>)
 8001e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	482c      	ldr	r0, [pc, #176]	@ (8001f10 <MX_GPIO_Init+0x1b8>)
 8001e60:	f000 fbee 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_RCLK_Pin PB6_LED1_Pin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|PB6_LED1_Pin;
 8001e64:	f244 0340 	movw	r3, #16448	@ 0x4040
 8001e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4824      	ldr	r0, [pc, #144]	@ (8001f10 <MX_GPIO_Init+0x1b8>)
 8001e7e:	f000 fbdf 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5_RELAY_ON_OFF_CTRL_Pin */
  GPIO_InitStruct.Pin = PB5_RELAY_ON_OFF_CTRL_Pin;
 8001e82:	2320      	movs	r3, #32
 8001e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 0310 	add.w	r3, r7, #16
 8001e96:	4619      	mov	r1, r3
 8001e98:	481d      	ldr	r0, [pc, #116]	@ (8001f10 <MX_GPIO_Init+0x1b8>)
 8001e9a:	f000 fbd1 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7_LED1_Pin */
  GPIO_InitStruct.Pin = PB7_LED1_Pin;
 8001e9e:	2380      	movs	r3, #128	@ 0x80
 8001ea0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB7_LED1_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4816      	ldr	r0, [pc, #88]	@ (8001f10 <MX_GPIO_Init+0x1b8>)
 8001eb6:	f000 fbc3 	bl	8002640 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 9, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2109      	movs	r1, #9
 8001ebe:	2006      	movs	r0, #6
 8001ec0:	f000 fb87 	bl	80025d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ec4:	2006      	movs	r0, #6
 8001ec6:	f000 fba0 	bl	800260a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 9, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2109      	movs	r1, #9
 8001ece:	2007      	movs	r0, #7
 8001ed0:	f000 fb7f 	bl	80025d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ed4:	2007      	movs	r0, #7
 8001ed6:	f000 fb98 	bl	800260a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 9, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2109      	movs	r1, #9
 8001ede:	2008      	movs	r0, #8
 8001ee0:	f000 fb77 	bl	80025d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ee4:	2008      	movs	r0, #8
 8001ee6:	f000 fb90 	bl	800260a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 9, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2109      	movs	r1, #9
 8001eee:	2028      	movs	r0, #40	@ 0x28
 8001ef0:	f000 fb6f 	bl	80025d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ef4:	2028      	movs	r0, #40	@ 0x28
 8001ef6:	f000 fb88 	bl	800260a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001efa:	bf00      	nop
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40011000 	.word	0x40011000
 8001f0c:	40010800 	.word	0x40010800
 8001f10:	40010c00 	.word	0x40010c00
 8001f14:	10210000 	.word	0x10210000

08001f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f1c:	b672      	cpsid	i
}
 8001f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <Error_Handler+0x8>

08001f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <HAL_MspInit+0x5c>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	4a14      	ldr	r2, [pc, #80]	@ (8001f80 <HAL_MspInit+0x5c>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6193      	str	r3, [r2, #24]
 8001f36:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_MspInit+0x5c>)
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <HAL_MspInit+0x5c>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4a0e      	ldr	r2, [pc, #56]	@ (8001f80 <HAL_MspInit+0x5c>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	61d3      	str	r3, [r2, #28]
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <HAL_MspInit+0x5c>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <HAL_MspInit+0x60>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <HAL_MspInit+0x60>)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010000 	.word	0x40010000

08001f88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a16      	ldr	r2, [pc, #88]	@ (8001ffc <HAL_I2C_MspInit+0x74>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d124      	bne.n	8001ff2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa8:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_I2C_MspInit+0x78>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <HAL_I2C_MspInit+0x78>)
 8001fae:	f043 0308 	orr.w	r3, r3, #8
 8001fb2:	6193      	str	r3, [r2, #24]
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <HAL_I2C_MspInit+0x78>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fc0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc6:	2312      	movs	r3, #18
 8001fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fce:	f107 0310 	add.w	r3, r7, #16
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480b      	ldr	r0, [pc, #44]	@ (8002004 <HAL_I2C_MspInit+0x7c>)
 8001fd6:	f000 fb33 	bl	8002640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_I2C_MspInit+0x78>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a08      	ldr	r2, [pc, #32]	@ (8002000 <HAL_I2C_MspInit+0x78>)
 8001fe0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fe4:	61d3      	str	r3, [r2, #28]
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_I2C_MspInit+0x78>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ff2:	bf00      	nop
 8001ff4:	3720      	adds	r7, #32
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40005800 	.word	0x40005800
 8002000:	40021000 	.word	0x40021000
 8002004:	40010c00 	.word	0x40010c00

08002008 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a16      	ldr	r2, [pc, #88]	@ (800207c <HAL_SPI_MspInit+0x74>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d124      	bne.n	8002072 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002028:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <HAL_SPI_MspInit+0x78>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	4a14      	ldr	r2, [pc, #80]	@ (8002080 <HAL_SPI_MspInit+0x78>)
 800202e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002032:	61d3      	str	r3, [r2, #28]
 8002034:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <HAL_SPI_MspInit+0x78>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <HAL_SPI_MspInit+0x78>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4a0e      	ldr	r2, [pc, #56]	@ (8002080 <HAL_SPI_MspInit+0x78>)
 8002046:	f043 0308 	orr.w	r3, r3, #8
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <HAL_SPI_MspInit+0x78>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = FND_SCLK_Pin|FND_DIO_Pin;
 8002058:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800205c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002066:	f107 0310 	add.w	r3, r7, #16
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	@ (8002084 <HAL_SPI_MspInit+0x7c>)
 800206e:	f000 fae7 	bl	8002640 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002072:	bf00      	nop
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40003800 	.word	0x40003800
 8002080:	40021000 	.word	0x40021000
 8002084:	40010c00 	.word	0x40010c00

08002088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002098:	d114      	bne.n	80020c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800209a:	4b19      	ldr	r3, [pc, #100]	@ (8002100 <HAL_TIM_Base_MspInit+0x78>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a18      	ldr	r2, [pc, #96]	@ (8002100 <HAL_TIM_Base_MspInit+0x78>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <HAL_TIM_Base_MspInit+0x78>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	201c      	movs	r0, #28
 80020b8:	f000 fa8b 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020bc:	201c      	movs	r0, #28
 80020be:	f000 faa4 	bl	800260a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020c2:	e018      	b.n	80020f6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002104 <HAL_TIM_Base_MspInit+0x7c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d113      	bne.n	80020f6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <HAL_TIM_Base_MspInit+0x78>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002100 <HAL_TIM_Base_MspInit+0x78>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	61d3      	str	r3, [r2, #28]
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <HAL_TIM_Base_MspInit+0x78>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	210a      	movs	r1, #10
 80020ea:	201d      	movs	r0, #29
 80020ec:	f000 fa71 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020f0:	201d      	movs	r0, #29
 80020f2:	f000 fa8a 	bl	800260a <HAL_NVIC_EnableIRQ>
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	40000400 	.word	0x40000400

08002108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1c      	ldr	r2, [pc, #112]	@ (8002194 <HAL_UART_MspInit+0x8c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d131      	bne.n	800218c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002128:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <HAL_UART_MspInit+0x90>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	4a1a      	ldr	r2, [pc, #104]	@ (8002198 <HAL_UART_MspInit+0x90>)
 800212e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002132:	6193      	str	r3, [r2, #24]
 8002134:	4b18      	ldr	r3, [pc, #96]	@ (8002198 <HAL_UART_MspInit+0x90>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002140:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <HAL_UART_MspInit+0x90>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	4a14      	ldr	r2, [pc, #80]	@ (8002198 <HAL_UART_MspInit+0x90>)
 8002146:	f043 0304 	orr.w	r3, r3, #4
 800214a:	6193      	str	r3, [r2, #24]
 800214c:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_UART_MspInit+0x90>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002158:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800215c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002162:	2303      	movs	r3, #3
 8002164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	4619      	mov	r1, r3
 800216c:	480b      	ldr	r0, [pc, #44]	@ (800219c <HAL_UART_MspInit+0x94>)
 800216e:	f000 fa67 	bl	8002640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	4619      	mov	r1, r3
 8002186:	4805      	ldr	r0, [pc, #20]	@ (800219c <HAL_UART_MspInit+0x94>)
 8002188:	f000 fa5a 	bl	8002640 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800218c:	bf00      	nop
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40013800 	.word	0x40013800
 8002198:	40021000 	.word	0x40021000
 800219c:	40010800 	.word	0x40010800

080021a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <NMI_Handler+0x4>

080021a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <HardFault_Handler+0x4>

080021b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <MemManage_Handler+0x4>

080021b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <BusFault_Handler+0x4>

080021c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <UsageFault_Handler+0x4>

080021c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f0:	f000 f8d8 	bl	80023a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_TEMP_SET_UP_Pin);
 80021fc:	2001      	movs	r0, #1
 80021fe:	f000 fbd3 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

 g_f_sw_up = 1;
 8002202:	4b02      	ldr	r3, [pc, #8]	@ (800220c <EXTI0_IRQHandler+0x14>)
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000492 	.word	0x20000492

08002210 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	 g_f_sw_fix = 1;
 8002214:	4b03      	ldr	r3, [pc, #12]	@ (8002224 <EXTI1_IRQHandler+0x14>)
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB1_TEMP_SET_FIX_Pin);
 800221a:	2002      	movs	r0, #2
 800221c:	f000 fbc4 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000494 	.word	0x20000494

08002228 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	 g_f_sw_down = 1;
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <EXTI2_IRQHandler+0x14>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_TEMP_SET_DOWN_Pin);
 8002232:	2004      	movs	r0, #4
 8002234:	f000 fbb8 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000493 	.word	0x20000493

08002240 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  m_time ++;
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <TIM2_IRQHandler+0x18>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	4a03      	ldr	r2, [pc, #12]	@ (8002258 <TIM2_IRQHandler+0x18>)
 800224c:	6013      	str	r3, [r2, #0]
  //}



  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800224e:	4803      	ldr	r0, [pc, #12]	@ (800225c <TIM2_IRQHandler+0x1c>)
 8002250:	f002 f912 	bl	8004478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	2000061c 	.word	0x2000061c
 800225c:	20000544 	.word	0x20000544

08002260 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
if(isTemperSensorInit() && !isBusy()){
 8002264:	f7fe f9d0 	bl	8000608 <isTemperSensorInit>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d012      	beq.n	8002294 <TIM3_IRQHandler+0x34>
 800226e:	f7fe f9d5 	bl	800061c <isBusy>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10d      	bne.n	8002294 <TIM3_IRQHandler+0x34>
	digit4_temper((int)getCurrentTemper() * 10 );
 8002278:	f7fe fd5c 	bl	8000d34 <getCurrentTemper>
 800227c:	4603      	mov	r3, r0
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f99c 	bl	80005bc <__aeabi_f2iz>
 8002284:	4602      	mov	r2, r0
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fab4 	bl	80017fc <digit4_temper>
}
//digit4_temper((int)getCurrentTemper() * 10 );

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002294:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <TIM3_IRQHandler+0x40>)
 8002296:	f002 f8ef 	bl	8004478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000058c 	.word	0x2000058c

080022a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB12_START_SW_PIN_GPIO_Port_Pin);
 80022a8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80022ac:	f000 fb7c 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  g_f_sw_on = 1;
 80022b0:	4b02      	ldr	r3, [pc, #8]	@ (80022bc <EXTI15_10_IRQHandler+0x18>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000495 	.word	0x20000495

080022c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022cc:	f7ff fff8 	bl	80022c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d0:	480b      	ldr	r0, [pc, #44]	@ (8002300 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022d2:	490c      	ldr	r1, [pc, #48]	@ (8002304 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002308 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d8:	e002      	b.n	80022e0 <LoopCopyDataInit>

080022da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022de:	3304      	adds	r3, #4

080022e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e4:	d3f9      	bcc.n	80022da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e6:	4a09      	ldr	r2, [pc, #36]	@ (800230c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022e8:	4c09      	ldr	r4, [pc, #36]	@ (8002310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ec:	e001      	b.n	80022f2 <LoopFillZerobss>

080022ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f0:	3204      	adds	r2, #4

080022f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f4:	d3fb      	bcc.n	80022ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022f6:	f002 fcfd 	bl	8004cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022fa:	f7ff fb5b 	bl	80019b4 <main>
  bx lr
 80022fe:	4770      	bx	lr
  ldr r0, =_sdata
 8002300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002304:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002308:	08004d88 	.word	0x08004d88
  ldr r2, =_sbss
 800230c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002310:	20000624 	.word	0x20000624

08002314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002314:	e7fe      	b.n	8002314 <ADC1_2_IRQHandler>
	...

08002318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800231c:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <HAL_Init+0x28>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a07      	ldr	r2, [pc, #28]	@ (8002340 <HAL_Init+0x28>)
 8002322:	f043 0310 	orr.w	r3, r3, #16
 8002326:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002328:	2003      	movs	r0, #3
 800232a:	f000 f947 	bl	80025bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232e:	200f      	movs	r0, #15
 8002330:	f000 f808 	bl	8002344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002334:	f7ff fdf6 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40022000 	.word	0x40022000

08002344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800234c:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <HAL_InitTick+0x54>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b12      	ldr	r3, [pc, #72]	@ (800239c <HAL_InitTick+0x58>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4619      	mov	r1, r3
 8002356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800235a:	fbb3 f3f1 	udiv	r3, r3, r1
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f95f 	bl	8002626 <HAL_SYSTICK_Config>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e00e      	b.n	8002390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b0f      	cmp	r3, #15
 8002376:	d80a      	bhi.n	800238e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002378:	2200      	movs	r2, #0
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f000 f927 	bl	80025d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002384:	4a06      	ldr	r2, [pc, #24]	@ (80023a0 <HAL_InitTick+0x5c>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000000 	.word	0x20000000
 800239c:	20000008 	.word	0x20000008
 80023a0:	20000004 	.word	0x20000004

080023a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_IncTick+0x1c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_IncTick+0x20>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	4a03      	ldr	r2, [pc, #12]	@ (80023c4 <HAL_IncTick+0x20>)
 80023b6:	6013      	str	r3, [r2, #0]
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	20000008 	.word	0x20000008
 80023c4:	20000620 	.word	0x20000620

080023c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b02      	ldr	r3, [pc, #8]	@ (80023d8 <HAL_GetTick+0x10>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	20000620 	.word	0x20000620

080023dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff fff0 	bl	80023c8 <HAL_GetTick>
 80023e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d005      	beq.n	8002402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <HAL_Delay+0x44>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002402:	bf00      	nop
 8002404:	f7ff ffe0 	bl	80023c8 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	429a      	cmp	r2, r3
 8002412:	d8f7      	bhi.n	8002404 <HAL_Delay+0x28>
  {
  }
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000008 	.word	0x20000008

08002424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002440:	4013      	ands	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800244c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002456:	4a04      	ldr	r2, [pc, #16]	@ (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	60d3      	str	r3, [r2, #12]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002470:	4b04      	ldr	r3, [pc, #16]	@ (8002484 <__NVIC_GetPriorityGrouping+0x18>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	f003 0307 	and.w	r3, r3, #7
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	db0b      	blt.n	80024b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	4906      	ldr	r1, [pc, #24]	@ (80024bc <__NVIC_EnableIRQ+0x34>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2001      	movs	r0, #1
 80024aa:	fa00 f202 	lsl.w	r2, r0, r2
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	6039      	str	r1, [r7, #0]
 80024ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db0a      	blt.n	80024ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	490c      	ldr	r1, [pc, #48]	@ (800250c <__NVIC_SetPriority+0x4c>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	440b      	add	r3, r1
 80024e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e8:	e00a      	b.n	8002500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	@ (8002510 <__NVIC_SetPriority+0x50>)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3b04      	subs	r3, #4
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	440b      	add	r3, r1
 80024fe:	761a      	strb	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	@ 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f1c3 0307 	rsb	r3, r3, #7
 800252e:	2b04      	cmp	r3, #4
 8002530:	bf28      	it	cs
 8002532:	2304      	movcs	r3, #4
 8002534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3304      	adds	r3, #4
 800253a:	2b06      	cmp	r3, #6
 800253c:	d902      	bls.n	8002544 <NVIC_EncodePriority+0x30>
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3b03      	subs	r3, #3
 8002542:	e000      	b.n	8002546 <NVIC_EncodePriority+0x32>
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	401a      	ands	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43d9      	mvns	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	4313      	orrs	r3, r2
         );
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	@ 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002588:	d301      	bcc.n	800258e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258a:	2301      	movs	r3, #1
 800258c:	e00f      	b.n	80025ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258e:	4a0a      	ldr	r2, [pc, #40]	@ (80025b8 <SysTick_Config+0x40>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002596:	210f      	movs	r1, #15
 8002598:	f04f 30ff 	mov.w	r0, #4294967295
 800259c:	f7ff ff90 	bl	80024c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a0:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <SysTick_Config+0x40>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a6:	4b04      	ldr	r3, [pc, #16]	@ (80025b8 <SysTick_Config+0x40>)
 80025a8:	2207      	movs	r2, #7
 80025aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	e000e010 	.word	0xe000e010

080025bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ff2d 	bl	8002424 <__NVIC_SetPriorityGrouping>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e4:	f7ff ff42 	bl	800246c <__NVIC_GetPriorityGrouping>
 80025e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7ff ff90 	bl	8002514 <NVIC_EncodePriority>
 80025f4:	4602      	mov	r2, r0
 80025f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff5f 	bl	80024c0 <__NVIC_SetPriority>
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff35 	bl	8002488 <__NVIC_EnableIRQ>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ffa2 	bl	8002578 <SysTick_Config>
 8002634:	4603      	mov	r3, r0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002640:	b480      	push	{r7}
 8002642:	b08b      	sub	sp, #44	@ 0x2c
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002652:	e169      	b.n	8002928 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002654:	2201      	movs	r2, #1
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	429a      	cmp	r2, r3
 800266e:	f040 8158 	bne.w	8002922 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4a9a      	ldr	r2, [pc, #616]	@ (80028e0 <HAL_GPIO_Init+0x2a0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d05e      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 800267c:	4a98      	ldr	r2, [pc, #608]	@ (80028e0 <HAL_GPIO_Init+0x2a0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d875      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 8002682:	4a98      	ldr	r2, [pc, #608]	@ (80028e4 <HAL_GPIO_Init+0x2a4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d058      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 8002688:	4a96      	ldr	r2, [pc, #600]	@ (80028e4 <HAL_GPIO_Init+0x2a4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d86f      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 800268e:	4a96      	ldr	r2, [pc, #600]	@ (80028e8 <HAL_GPIO_Init+0x2a8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d052      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 8002694:	4a94      	ldr	r2, [pc, #592]	@ (80028e8 <HAL_GPIO_Init+0x2a8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d869      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 800269a:	4a94      	ldr	r2, [pc, #592]	@ (80028ec <HAL_GPIO_Init+0x2ac>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d04c      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 80026a0:	4a92      	ldr	r2, [pc, #584]	@ (80028ec <HAL_GPIO_Init+0x2ac>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d863      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 80026a6:	4a92      	ldr	r2, [pc, #584]	@ (80028f0 <HAL_GPIO_Init+0x2b0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d046      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 80026ac:	4a90      	ldr	r2, [pc, #576]	@ (80028f0 <HAL_GPIO_Init+0x2b0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d85d      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 80026b2:	2b12      	cmp	r3, #18
 80026b4:	d82a      	bhi.n	800270c <HAL_GPIO_Init+0xcc>
 80026b6:	2b12      	cmp	r3, #18
 80026b8:	d859      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 80026ba:	a201      	add	r2, pc, #4	@ (adr r2, 80026c0 <HAL_GPIO_Init+0x80>)
 80026bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c0:	0800273b 	.word	0x0800273b
 80026c4:	08002715 	.word	0x08002715
 80026c8:	08002727 	.word	0x08002727
 80026cc:	08002769 	.word	0x08002769
 80026d0:	0800276f 	.word	0x0800276f
 80026d4:	0800276f 	.word	0x0800276f
 80026d8:	0800276f 	.word	0x0800276f
 80026dc:	0800276f 	.word	0x0800276f
 80026e0:	0800276f 	.word	0x0800276f
 80026e4:	0800276f 	.word	0x0800276f
 80026e8:	0800276f 	.word	0x0800276f
 80026ec:	0800276f 	.word	0x0800276f
 80026f0:	0800276f 	.word	0x0800276f
 80026f4:	0800276f 	.word	0x0800276f
 80026f8:	0800276f 	.word	0x0800276f
 80026fc:	0800276f 	.word	0x0800276f
 8002700:	0800276f 	.word	0x0800276f
 8002704:	0800271d 	.word	0x0800271d
 8002708:	08002731 	.word	0x08002731
 800270c:	4a79      	ldr	r2, [pc, #484]	@ (80028f4 <HAL_GPIO_Init+0x2b4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002712:	e02c      	b.n	800276e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	623b      	str	r3, [r7, #32]
          break;
 800271a:	e029      	b.n	8002770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	3304      	adds	r3, #4
 8002722:	623b      	str	r3, [r7, #32]
          break;
 8002724:	e024      	b.n	8002770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	3308      	adds	r3, #8
 800272c:	623b      	str	r3, [r7, #32]
          break;
 800272e:	e01f      	b.n	8002770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	330c      	adds	r3, #12
 8002736:	623b      	str	r3, [r7, #32]
          break;
 8002738:	e01a      	b.n	8002770 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002742:	2304      	movs	r3, #4
 8002744:	623b      	str	r3, [r7, #32]
          break;
 8002746:	e013      	b.n	8002770 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d105      	bne.n	800275c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002750:	2308      	movs	r3, #8
 8002752:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	611a      	str	r2, [r3, #16]
          break;
 800275a:	e009      	b.n	8002770 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800275c:	2308      	movs	r3, #8
 800275e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	615a      	str	r2, [r3, #20]
          break;
 8002766:	e003      	b.n	8002770 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002768:	2300      	movs	r3, #0
 800276a:	623b      	str	r3, [r7, #32]
          break;
 800276c:	e000      	b.n	8002770 <HAL_GPIO_Init+0x130>
          break;
 800276e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2bff      	cmp	r3, #255	@ 0xff
 8002774:	d801      	bhi.n	800277a <HAL_GPIO_Init+0x13a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	e001      	b.n	800277e <HAL_GPIO_Init+0x13e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3304      	adds	r3, #4
 800277e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2bff      	cmp	r3, #255	@ 0xff
 8002784:	d802      	bhi.n	800278c <HAL_GPIO_Init+0x14c>
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	e002      	b.n	8002792 <HAL_GPIO_Init+0x152>
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	3b08      	subs	r3, #8
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	210f      	movs	r1, #15
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	401a      	ands	r2, r3
 80027a4:	6a39      	ldr	r1, [r7, #32]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	431a      	orrs	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80b1 	beq.w	8002922 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027c0:	4b4d      	ldr	r3, [pc, #308]	@ (80028f8 <HAL_GPIO_Init+0x2b8>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	4a4c      	ldr	r2, [pc, #304]	@ (80028f8 <HAL_GPIO_Init+0x2b8>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6193      	str	r3, [r2, #24]
 80027cc:	4b4a      	ldr	r3, [pc, #296]	@ (80028f8 <HAL_GPIO_Init+0x2b8>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027d8:	4a48      	ldr	r2, [pc, #288]	@ (80028fc <HAL_GPIO_Init+0x2bc>)
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	3302      	adds	r3, #2
 80027e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	220f      	movs	r2, #15
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4013      	ands	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a40      	ldr	r2, [pc, #256]	@ (8002900 <HAL_GPIO_Init+0x2c0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d013      	beq.n	800282c <HAL_GPIO_Init+0x1ec>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a3f      	ldr	r2, [pc, #252]	@ (8002904 <HAL_GPIO_Init+0x2c4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00d      	beq.n	8002828 <HAL_GPIO_Init+0x1e8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a3e      	ldr	r2, [pc, #248]	@ (8002908 <HAL_GPIO_Init+0x2c8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d007      	beq.n	8002824 <HAL_GPIO_Init+0x1e4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a3d      	ldr	r2, [pc, #244]	@ (800290c <HAL_GPIO_Init+0x2cc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d101      	bne.n	8002820 <HAL_GPIO_Init+0x1e0>
 800281c:	2303      	movs	r3, #3
 800281e:	e006      	b.n	800282e <HAL_GPIO_Init+0x1ee>
 8002820:	2304      	movs	r3, #4
 8002822:	e004      	b.n	800282e <HAL_GPIO_Init+0x1ee>
 8002824:	2302      	movs	r3, #2
 8002826:	e002      	b.n	800282e <HAL_GPIO_Init+0x1ee>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <HAL_GPIO_Init+0x1ee>
 800282c:	2300      	movs	r3, #0
 800282e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002830:	f002 0203 	and.w	r2, r2, #3
 8002834:	0092      	lsls	r2, r2, #2
 8002836:	4093      	lsls	r3, r2
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800283e:	492f      	ldr	r1, [pc, #188]	@ (80028fc <HAL_GPIO_Init+0x2bc>)
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d006      	beq.n	8002866 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002858:	4b2d      	ldr	r3, [pc, #180]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	492c      	ldr	r1, [pc, #176]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	608b      	str	r3, [r1, #8]
 8002864:	e006      	b.n	8002874 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002866:	4b2a      	ldr	r3, [pc, #168]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	43db      	mvns	r3, r3
 800286e:	4928      	ldr	r1, [pc, #160]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 8002870:	4013      	ands	r3, r2
 8002872:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002880:	4b23      	ldr	r3, [pc, #140]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	4922      	ldr	r1, [pc, #136]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	60cb      	str	r3, [r1, #12]
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800288e:	4b20      	ldr	r3, [pc, #128]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	43db      	mvns	r3, r3
 8002896:	491e      	ldr	r1, [pc, #120]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 8002898:	4013      	ands	r3, r2
 800289a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028a8:	4b19      	ldr	r3, [pc, #100]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	4918      	ldr	r1, [pc, #96]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028b6:	4b16      	ldr	r3, [pc, #88]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	43db      	mvns	r3, r3
 80028be:	4914      	ldr	r1, [pc, #80]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d021      	beq.n	8002914 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	490e      	ldr	r1, [pc, #56]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]
 80028dc:	e021      	b.n	8002922 <HAL_GPIO_Init+0x2e2>
 80028de:	bf00      	nop
 80028e0:	10320000 	.word	0x10320000
 80028e4:	10310000 	.word	0x10310000
 80028e8:	10220000 	.word	0x10220000
 80028ec:	10210000 	.word	0x10210000
 80028f0:	10120000 	.word	0x10120000
 80028f4:	10110000 	.word	0x10110000
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40010000 	.word	0x40010000
 8002900:	40010800 	.word	0x40010800
 8002904:	40010c00 	.word	0x40010c00
 8002908:	40011000 	.word	0x40011000
 800290c:	40011400 	.word	0x40011400
 8002910:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_GPIO_Init+0x304>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	43db      	mvns	r3, r3
 800291c:	4909      	ldr	r1, [pc, #36]	@ (8002944 <HAL_GPIO_Init+0x304>)
 800291e:	4013      	ands	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	3301      	adds	r3, #1
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	f47f ae8e 	bne.w	8002654 <HAL_GPIO_Init+0x14>
  }
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	372c      	adds	r7, #44	@ 0x2c
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40010400 	.word	0x40010400

08002948 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	887b      	ldrh	r3, [r7, #2]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
 8002964:	e001      	b.n	800296a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800296a:	7bfb      	ldrb	r3, [r7, #15]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	807b      	strh	r3, [r7, #2]
 8002982:	4613      	mov	r3, r2
 8002984:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002986:	787b      	ldrb	r3, [r7, #1]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800298c:	887a      	ldrh	r2, [r7, #2]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002992:	e003      	b.n	800299c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	041a      	lsls	r2, r3, #16
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	611a      	str	r2, [r3, #16]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029b2:	4b08      	ldr	r3, [pc, #32]	@ (80029d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029be:	4a05      	ldr	r2, [pc, #20]	@ (80029d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f806 	bl	80029d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40010400 	.word	0x40010400

080029d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e12b      	b.n	8002c56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff fab8 	bl	8001f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2224      	movs	r2, #36	@ 0x24
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a50:	f001 f960 	bl	8003d14 <HAL_RCC_GetPCLK1Freq>
 8002a54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4a81      	ldr	r2, [pc, #516]	@ (8002c60 <HAL_I2C_Init+0x274>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d807      	bhi.n	8002a70 <HAL_I2C_Init+0x84>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a80      	ldr	r2, [pc, #512]	@ (8002c64 <HAL_I2C_Init+0x278>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	bf94      	ite	ls
 8002a68:	2301      	movls	r3, #1
 8002a6a:	2300      	movhi	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e006      	b.n	8002a7e <HAL_I2C_Init+0x92>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a7d      	ldr	r2, [pc, #500]	@ (8002c68 <HAL_I2C_Init+0x27c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	bf94      	ite	ls
 8002a78:	2301      	movls	r3, #1
 8002a7a:	2300      	movhi	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0e7      	b.n	8002c56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4a78      	ldr	r2, [pc, #480]	@ (8002c6c <HAL_I2C_Init+0x280>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0c9b      	lsrs	r3, r3, #18
 8002a90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4a6a      	ldr	r2, [pc, #424]	@ (8002c60 <HAL_I2C_Init+0x274>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d802      	bhi.n	8002ac0 <HAL_I2C_Init+0xd4>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	3301      	adds	r3, #1
 8002abe:	e009      	b.n	8002ad4 <HAL_I2C_Init+0xe8>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	4a69      	ldr	r2, [pc, #420]	@ (8002c70 <HAL_I2C_Init+0x284>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	099b      	lsrs	r3, r3, #6
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ae6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	495c      	ldr	r1, [pc, #368]	@ (8002c60 <HAL_I2C_Init+0x274>)
 8002af0:	428b      	cmp	r3, r1
 8002af2:	d819      	bhi.n	8002b28 <HAL_I2C_Init+0x13c>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e59      	subs	r1, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b02:	1c59      	adds	r1, r3, #1
 8002b04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b08:	400b      	ands	r3, r1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_I2C_Init+0x138>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1e59      	subs	r1, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b22:	e051      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002b24:	2304      	movs	r3, #4
 8002b26:	e04f      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d111      	bne.n	8002b54 <HAL_I2C_Init+0x168>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1e58      	subs	r0, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	440b      	add	r3, r1
 8002b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	e012      	b.n	8002b7a <HAL_I2C_Init+0x18e>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1e58      	subs	r0, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	0099      	lsls	r1, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Init+0x196>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e022      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10e      	bne.n	8002ba8 <HAL_I2C_Init+0x1bc>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1e58      	subs	r0, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	460b      	mov	r3, r1
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	440b      	add	r3, r1
 8002b98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ba6:	e00f      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1e58      	subs	r0, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	0099      	lsls	r1, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	6809      	ldr	r1, [r1, #0]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bf6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6911      	ldr	r1, [r2, #16]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68d2      	ldr	r2, [r2, #12]
 8002c02:	4311      	orrs	r1, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	000186a0 	.word	0x000186a0
 8002c64:	001e847f 	.word	0x001e847f
 8002c68:	003d08ff 	.word	0x003d08ff
 8002c6c:	431bde83 	.word	0x431bde83
 8002c70:	10624dd3 	.word	0x10624dd3

08002c74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	460b      	mov	r3, r1
 8002c82:	817b      	strh	r3, [r7, #10]
 8002c84:	4613      	mov	r3, r2
 8002c86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff fb9e 	bl	80023c8 <HAL_GetTick>
 8002c8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	f040 80e0 	bne.w	8002e5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2319      	movs	r3, #25
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4970      	ldr	r1, [pc, #448]	@ (8002e68 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fa92 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e0d3      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_I2C_Master_Transmit+0x50>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e0cc      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d007      	beq.n	8002cea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2221      	movs	r2, #33	@ 0x21
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2210      	movs	r2, #16
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	893a      	ldrh	r2, [r7, #8]
 8002d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4a50      	ldr	r2, [pc, #320]	@ (8002e6c <HAL_I2C_Master_Transmit+0x1f8>)
 8002d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d2c:	8979      	ldrh	r1, [r7, #10]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f9ca 	bl	80030cc <I2C_MasterRequestWrite>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e08d      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d58:	e066      	b.n	8002e28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	6a39      	ldr	r1, [r7, #32]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 fb50 	bl	8003404 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00d      	beq.n	8002d86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d107      	bne.n	8002d82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e06b      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d11b      	bne.n	8002dfc <HAL_I2C_Master_Transmit+0x188>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d017      	beq.n	8002dfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	6a39      	ldr	r1, [r7, #32]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fb47 	bl	8003494 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d107      	bne.n	8002e24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e01a      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d194      	bne.n	8002d5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e000      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
  }
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	00100002 	.word	0x00100002
 8002e6c:	ffff0000 	.word	0xffff0000

08002e70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	@ 0x28
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff faa2 	bl	80023c8 <HAL_GetTick>
 8002e84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	f040 8111 	bne.w	80030ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2319      	movs	r3, #25
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4988      	ldr	r1, [pc, #544]	@ (80030c4 <HAL_I2C_IsDeviceReady+0x254>)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f994 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e104      	b.n	80030bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_I2C_IsDeviceReady+0x50>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e0fd      	b.n	80030bc <HAL_I2C_IsDeviceReady+0x24c>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d007      	beq.n	8002ee6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2224      	movs	r2, #36	@ 0x24
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4a70      	ldr	r2, [pc, #448]	@ (80030c8 <HAL_I2C_IsDeviceReady+0x258>)
 8002f08:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f18:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f952 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00d      	beq.n	8002f4e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f40:	d103      	bne.n	8002f4a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f48:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e0b6      	b.n	80030bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f4e:	897b      	ldrh	r3, [r7, #10]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f5c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f5e:	f7ff fa33 	bl	80023c8 <HAL_GetTick>
 8002f62:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	bf0c      	ite	eq
 8002f72:	2301      	moveq	r3, #1
 8002f74:	2300      	movne	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f88:	bf0c      	ite	eq
 8002f8a:	2301      	moveq	r3, #1
 8002f8c:	2300      	movne	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f92:	e025      	b.n	8002fe0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f94:	f7ff fa18 	bl	80023c8 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d302      	bcc.n	8002faa <HAL_I2C_IsDeviceReady+0x13a>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	22a0      	movs	r2, #160	@ 0xa0
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fea:	d005      	beq.n	8002ff8 <HAL_I2C_IsDeviceReady+0x188>
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <HAL_I2C_IsDeviceReady+0x188>
 8002ff2:	7dbb      	ldrb	r3, [r7, #22]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0cd      	beq.n	8002f94 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b02      	cmp	r3, #2
 800300c:	d129      	bne.n	8003062 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800301c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2319      	movs	r3, #25
 800303a:	2201      	movs	r2, #1
 800303c:	4921      	ldr	r1, [pc, #132]	@ (80030c4 <HAL_I2C_IsDeviceReady+0x254>)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f8c6 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e036      	b.n	80030bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e02c      	b.n	80030bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003070:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800307a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2319      	movs	r3, #25
 8003082:	2201      	movs	r2, #1
 8003084:	490f      	ldr	r1, [pc, #60]	@ (80030c4 <HAL_I2C_IsDeviceReady+0x254>)
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f8a2 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e012      	b.n	80030bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	3301      	adds	r3, #1
 800309a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	f4ff af32 	bcc.w	8002f0a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80030ba:	2302      	movs	r3, #2
  }
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	00100002 	.word	0x00100002
 80030c8:	ffff0000 	.word	0xffff0000

080030cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	460b      	mov	r3, r1
 80030da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d006      	beq.n	80030f6 <I2C_MasterRequestWrite+0x2a>
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d003      	beq.n	80030f6 <I2C_MasterRequestWrite+0x2a>
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030f4:	d108      	bne.n	8003108 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e00b      	b.n	8003120 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	2b12      	cmp	r3, #18
 800310e:	d107      	bne.n	8003120 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800311e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f84f 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00d      	beq.n	8003154 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003146:	d103      	bne.n	8003150 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e035      	b.n	80031c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800315c:	d108      	bne.n	8003170 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800315e:	897b      	ldrh	r3, [r7, #10]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800316c:	611a      	str	r2, [r3, #16]
 800316e:	e01b      	b.n	80031a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003170:	897b      	ldrh	r3, [r7, #10]
 8003172:	11db      	asrs	r3, r3, #7
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f003 0306 	and.w	r3, r3, #6
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f063 030f 	orn	r3, r3, #15
 8003180:	b2da      	uxtb	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	490e      	ldr	r1, [pc, #56]	@ (80031c8 <I2C_MasterRequestWrite+0xfc>)
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f898 	bl	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e010      	b.n	80031c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800319e:	897b      	ldrh	r3, [r7, #10]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4907      	ldr	r1, [pc, #28]	@ (80031cc <I2C_MasterRequestWrite+0x100>)
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 f888 	bl	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	00010008 	.word	0x00010008
 80031cc:	00010002 	.word	0x00010002

080031d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e0:	e048      	b.n	8003274 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d044      	beq.n	8003274 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ea:	f7ff f8ed 	bl	80023c8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d139      	bne.n	8003274 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	0c1b      	lsrs	r3, r3, #16
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	d10d      	bne.n	8003226 <I2C_WaitOnFlagUntilTimeout+0x56>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	43da      	mvns	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	e00c      	b.n	8003240 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	43da      	mvns	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4013      	ands	r3, r2
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	429a      	cmp	r2, r3
 8003244:	d116      	bne.n	8003274 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e023      	b.n	80032bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	0c1b      	lsrs	r3, r3, #16
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d10d      	bne.n	800329a <I2C_WaitOnFlagUntilTimeout+0xca>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	43da      	mvns	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4013      	ands	r3, r2
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	e00c      	b.n	80032b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	43da      	mvns	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	4013      	ands	r3, r2
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf0c      	ite	eq
 80032ac:	2301      	moveq	r3, #1
 80032ae:	2300      	movne	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d093      	beq.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032d2:	e071      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e2:	d123      	bne.n	800332c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e067      	b.n	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003332:	d041      	beq.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003334:	f7ff f848 	bl	80023c8 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	d302      	bcc.n	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d136      	bne.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d10c      	bne.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf14      	ite	ne
 8003366:	2301      	movne	r3, #1
 8003368:	2300      	moveq	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	e00b      	b.n	8003386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	43da      	mvns	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	4013      	ands	r3, r2
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	bf14      	ite	ne
 8003380:	2301      	movne	r3, #1
 8003382:	2300      	moveq	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d016      	beq.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e021      	b.n	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	0c1b      	lsrs	r3, r3, #16
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10c      	bne.n	80033dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	43da      	mvns	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	4013      	ands	r3, r2
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	e00b      	b.n	80033f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	43da      	mvns	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4013      	ands	r3, r2
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bf14      	ite	ne
 80033ee:	2301      	movne	r3, #1
 80033f0:	2300      	moveq	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f47f af6d 	bne.w	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003410:	e034      	b.n	800347c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f886 	bl	8003524 <I2C_IsAcknowledgeFailed>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e034      	b.n	800348c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d028      	beq.n	800347c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fe ffcd 	bl	80023c8 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d11d      	bne.n	800347c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	2b80      	cmp	r3, #128	@ 0x80
 800344c:	d016      	beq.n	800347c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e007      	b.n	800348c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003486:	2b80      	cmp	r3, #128	@ 0x80
 8003488:	d1c3      	bne.n	8003412 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a0:	e034      	b.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f83e 	bl	8003524 <I2C_IsAcknowledgeFailed>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e034      	b.n	800351c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d028      	beq.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fe ff85 	bl	80023c8 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d11d      	bne.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d016      	beq.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e007      	b.n	800351c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b04      	cmp	r3, #4
 8003518:	d1c3      	bne.n	80034a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800353a:	d11b      	bne.n	8003574 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003544:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003560:	f043 0204 	orr.w	r2, r3, #4
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e272      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8087 	beq.w	80036ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035a0:	4b92      	ldr	r3, [pc, #584]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d00c      	beq.n	80035c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035ac:	4b8f      	ldr	r3, [pc, #572]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d112      	bne.n	80035de <HAL_RCC_OscConfig+0x5e>
 80035b8:	4b8c      	ldr	r3, [pc, #560]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c4:	d10b      	bne.n	80035de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c6:	4b89      	ldr	r3, [pc, #548]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d06c      	beq.n	80036ac <HAL_RCC_OscConfig+0x12c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d168      	bne.n	80036ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e24c      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x76>
 80035e8:	4b80      	ldr	r3, [pc, #512]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a7f      	ldr	r2, [pc, #508]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	e02e      	b.n	8003654 <HAL_RCC_OscConfig+0xd4>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x98>
 80035fe:	4b7b      	ldr	r3, [pc, #492]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a7a      	ldr	r2, [pc, #488]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b78      	ldr	r3, [pc, #480]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a77      	ldr	r2, [pc, #476]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003610:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e01d      	b.n	8003654 <HAL_RCC_OscConfig+0xd4>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0xbc>
 8003622:	4b72      	ldr	r3, [pc, #456]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a71      	ldr	r2, [pc, #452]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b6f      	ldr	r3, [pc, #444]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a6e      	ldr	r2, [pc, #440]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	e00b      	b.n	8003654 <HAL_RCC_OscConfig+0xd4>
 800363c:	4b6b      	ldr	r3, [pc, #428]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a6a      	ldr	r2, [pc, #424]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	4b68      	ldr	r3, [pc, #416]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a67      	ldr	r2, [pc, #412]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 800364e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003652:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d013      	beq.n	8003684 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fe feb4 	bl	80023c8 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7fe feb0 	bl	80023c8 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	@ 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e200      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003676:	4b5d      	ldr	r3, [pc, #372]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0xe4>
 8003682:	e014      	b.n	80036ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fe fea0 	bl	80023c8 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800368c:	f7fe fe9c 	bl	80023c8 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	@ 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e1ec      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369e:	4b53      	ldr	r3, [pc, #332]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x10c>
 80036aa:	e000      	b.n	80036ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d063      	beq.n	8003782 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ba:	4b4c      	ldr	r3, [pc, #304]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 030c 	and.w	r3, r3, #12
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036c6:	4b49      	ldr	r3, [pc, #292]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d11c      	bne.n	800370c <HAL_RCC_OscConfig+0x18c>
 80036d2:	4b46      	ldr	r3, [pc, #280]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d116      	bne.n	800370c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036de:	4b43      	ldr	r3, [pc, #268]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_RCC_OscConfig+0x176>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d001      	beq.n	80036f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e1c0      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f6:	4b3d      	ldr	r3, [pc, #244]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4939      	ldr	r1, [pc, #228]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370a:	e03a      	b.n	8003782 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d020      	beq.n	8003756 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003714:	4b36      	ldr	r3, [pc, #216]	@ (80037f0 <HAL_RCC_OscConfig+0x270>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7fe fe55 	bl	80023c8 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003722:	f7fe fe51 	bl	80023c8 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e1a1      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003734:	4b2d      	ldr	r3, [pc, #180]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003740:	4b2a      	ldr	r3, [pc, #168]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4927      	ldr	r1, [pc, #156]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003750:	4313      	orrs	r3, r2
 8003752:	600b      	str	r3, [r1, #0]
 8003754:	e015      	b.n	8003782 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003756:	4b26      	ldr	r3, [pc, #152]	@ (80037f0 <HAL_RCC_OscConfig+0x270>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fe fe34 	bl	80023c8 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003764:	f7fe fe30 	bl	80023c8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e180      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003776:	4b1d      	ldr	r3, [pc, #116]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d03a      	beq.n	8003804 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d019      	beq.n	80037ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003796:	4b17      	ldr	r3, [pc, #92]	@ (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379c:	f7fe fe14 	bl	80023c8 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a4:	f7fe fe10 	bl	80023c8 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e160      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b6:	4b0d      	ldr	r3, [pc, #52]	@ (80037ec <HAL_RCC_OscConfig+0x26c>)
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037c2:	2001      	movs	r0, #1
 80037c4:	f000 face 	bl	8003d64 <RCC_Delay>
 80037c8:	e01c      	b.n	8003804 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ca:	4b0a      	ldr	r3, [pc, #40]	@ (80037f4 <HAL_RCC_OscConfig+0x274>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d0:	f7fe fdfa 	bl	80023c8 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d6:	e00f      	b.n	80037f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d8:	f7fe fdf6 	bl	80023c8 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d908      	bls.n	80037f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e146      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	42420000 	.word	0x42420000
 80037f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f8:	4b92      	ldr	r3, [pc, #584]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e9      	bne.n	80037d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80a6 	beq.w	800395e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003812:	2300      	movs	r3, #0
 8003814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003816:	4b8b      	ldr	r3, [pc, #556]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10d      	bne.n	800383e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003822:	4b88      	ldr	r3, [pc, #544]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	4a87      	ldr	r2, [pc, #540]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800382c:	61d3      	str	r3, [r2, #28]
 800382e:	4b85      	ldr	r3, [pc, #532]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383a:	2301      	movs	r3, #1
 800383c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	4b82      	ldr	r3, [pc, #520]	@ (8003a48 <HAL_RCC_OscConfig+0x4c8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d118      	bne.n	800387c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800384a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a48 <HAL_RCC_OscConfig+0x4c8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a48 <HAL_RCC_OscConfig+0x4c8>)
 8003850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003856:	f7fe fdb7 	bl	80023c8 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385e:	f7fe fdb3 	bl	80023c8 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b64      	cmp	r3, #100	@ 0x64
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e103      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	4b75      	ldr	r3, [pc, #468]	@ (8003a48 <HAL_RCC_OscConfig+0x4c8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x312>
 8003884:	4b6f      	ldr	r3, [pc, #444]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	4a6e      	ldr	r2, [pc, #440]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6213      	str	r3, [r2, #32]
 8003890:	e02d      	b.n	80038ee <HAL_RCC_OscConfig+0x36e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x334>
 800389a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	4a69      	ldr	r2, [pc, #420]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	6213      	str	r3, [r2, #32]
 80038a6:	4b67      	ldr	r3, [pc, #412]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	4a66      	ldr	r2, [pc, #408]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038ac:	f023 0304 	bic.w	r3, r3, #4
 80038b0:	6213      	str	r3, [r2, #32]
 80038b2:	e01c      	b.n	80038ee <HAL_RCC_OscConfig+0x36e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b05      	cmp	r3, #5
 80038ba:	d10c      	bne.n	80038d6 <HAL_RCC_OscConfig+0x356>
 80038bc:	4b61      	ldr	r3, [pc, #388]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	4a60      	ldr	r2, [pc, #384]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038c2:	f043 0304 	orr.w	r3, r3, #4
 80038c6:	6213      	str	r3, [r2, #32]
 80038c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	4a5d      	ldr	r2, [pc, #372]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6213      	str	r3, [r2, #32]
 80038d4:	e00b      	b.n	80038ee <HAL_RCC_OscConfig+0x36e>
 80038d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	4a5a      	ldr	r2, [pc, #360]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	6213      	str	r3, [r2, #32]
 80038e2:	4b58      	ldr	r3, [pc, #352]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	4a57      	ldr	r2, [pc, #348]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	f023 0304 	bic.w	r3, r3, #4
 80038ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d015      	beq.n	8003922 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f6:	f7fe fd67 	bl	80023c8 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fe fd63 	bl	80023c8 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e0b1      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003914:	4b4b      	ldr	r3, [pc, #300]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0ee      	beq.n	80038fe <HAL_RCC_OscConfig+0x37e>
 8003920:	e014      	b.n	800394c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003922:	f7fe fd51 	bl	80023c8 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003928:	e00a      	b.n	8003940 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7fe fd4d 	bl	80023c8 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e09b      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003940:	4b40      	ldr	r3, [pc, #256]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1ee      	bne.n	800392a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d105      	bne.n	800395e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003952:	4b3c      	ldr	r3, [pc, #240]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	4a3b      	ldr	r2, [pc, #236]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800395c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8087 	beq.w	8003a76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003968:	4b36      	ldr	r3, [pc, #216]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 030c 	and.w	r3, r3, #12
 8003970:	2b08      	cmp	r3, #8
 8003972:	d061      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d146      	bne.n	8003a0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397c:	4b33      	ldr	r3, [pc, #204]	@ (8003a4c <HAL_RCC_OscConfig+0x4cc>)
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003982:	f7fe fd21 	bl	80023c8 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398a:	f7fe fd1d 	bl	80023c8 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e06d      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399c:	4b29      	ldr	r3, [pc, #164]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f0      	bne.n	800398a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b0:	d108      	bne.n	80039c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039b2:	4b24      	ldr	r3, [pc, #144]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	4921      	ldr	r1, [pc, #132]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a19      	ldr	r1, [r3, #32]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	430b      	orrs	r3, r1
 80039d6:	491b      	ldr	r1, [pc, #108]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039dc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a4c <HAL_RCC_OscConfig+0x4cc>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e2:	f7fe fcf1 	bl	80023c8 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ea:	f7fe fced 	bl	80023c8 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e03d      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039fc:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x46a>
 8003a08:	e035      	b.n	8003a76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0a:	4b10      	ldr	r3, [pc, #64]	@ (8003a4c <HAL_RCC_OscConfig+0x4cc>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7fe fcda 	bl	80023c8 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fe fcd6 	bl	80023c8 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e026      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2a:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x498>
 8003a36:	e01e      	b.n	8003a76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d107      	bne.n	8003a50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e019      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_RCC_OscConfig+0x500>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d001      	beq.n	8003a76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000

08003a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0d0      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a98:	4b6a      	ldr	r3, [pc, #424]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d910      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b67      	ldr	r3, [pc, #412]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 0207 	bic.w	r2, r3, #7
 8003aae:	4965      	ldr	r1, [pc, #404]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b63      	ldr	r3, [pc, #396]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0b8      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d020      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae0:	4b59      	ldr	r3, [pc, #356]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a58      	ldr	r2, [pc, #352]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003aea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003af8:	4b53      	ldr	r3, [pc, #332]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	4a52      	ldr	r2, [pc, #328]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003afe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003b02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b04:	4b50      	ldr	r3, [pc, #320]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	494d      	ldr	r1, [pc, #308]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d040      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d107      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2a:	4b47      	ldr	r3, [pc, #284]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d115      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e07f      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d107      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b42:	4b41      	ldr	r3, [pc, #260]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d109      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e073      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b52:	4b3d      	ldr	r3, [pc, #244]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e06b      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b62:	4b39      	ldr	r3, [pc, #228]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f023 0203 	bic.w	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4936      	ldr	r1, [pc, #216]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b74:	f7fe fc28 	bl	80023c8 <HAL_GetTick>
 8003b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b7c:	f7fe fc24 	bl	80023c8 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e053      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b92:	4b2d      	ldr	r3, [pc, #180]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 020c 	and.w	r2, r3, #12
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d1eb      	bne.n	8003b7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b27      	ldr	r3, [pc, #156]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d210      	bcs.n	8003bd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b24      	ldr	r3, [pc, #144]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 0207 	bic.w	r2, r3, #7
 8003bba:	4922      	ldr	r1, [pc, #136]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b20      	ldr	r3, [pc, #128]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e032      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be0:	4b19      	ldr	r3, [pc, #100]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4916      	ldr	r1, [pc, #88]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bfe:	4b12      	ldr	r3, [pc, #72]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	490e      	ldr	r1, [pc, #56]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c12:	f000 f821 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8003c16:	4602      	mov	r2, r0
 8003c18:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	490a      	ldr	r1, [pc, #40]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c8>)
 8003c24:	5ccb      	ldrb	r3, [r1, r3]
 8003c26:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2a:	4a09      	ldr	r2, [pc, #36]	@ (8003c50 <HAL_RCC_ClockConfig+0x1cc>)
 8003c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c2e:	4b09      	ldr	r3, [pc, #36]	@ (8003c54 <HAL_RCC_ClockConfig+0x1d0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe fb86 	bl	8002344 <HAL_InitTick>

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40022000 	.word	0x40022000
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	08004d54 	.word	0x08004d54
 8003c50:	20000000 	.word	0x20000000
 8003c54:	20000004 	.word	0x20000004

08003c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c72:	4b1e      	ldr	r3, [pc, #120]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x94>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d002      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x30>
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0x36>
 8003c86:	e027      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c88:	4b19      	ldr	r3, [pc, #100]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c8a:	613b      	str	r3, [r7, #16]
      break;
 8003c8c:	e027      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	0c9b      	lsrs	r3, r3, #18
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	4a17      	ldr	r2, [pc, #92]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c98:	5cd3      	ldrb	r3, [r2, r3]
 8003c9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d010      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ca6:	4b11      	ldr	r3, [pc, #68]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x94>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	0c5b      	lsrs	r3, r3, #17
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	4a11      	ldr	r2, [pc, #68]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cb2:	5cd3      	ldrb	r3, [r2, r3]
 8003cb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cba:	fb03 f202 	mul.w	r2, r3, r2
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e004      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a0c      	ldr	r2, [pc, #48]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ccc:	fb02 f303 	mul.w	r3, r2, r3
 8003cd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	613b      	str	r3, [r7, #16]
      break;
 8003cd6:	e002      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cda:	613b      	str	r3, [r7, #16]
      break;
 8003cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cde:	693b      	ldr	r3, [r7, #16]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	007a1200 	.word	0x007a1200
 8003cf4:	08004d6c 	.word	0x08004d6c
 8003cf8:	08004d7c 	.word	0x08004d7c
 8003cfc:	003d0900 	.word	0x003d0900

08003d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d04:	4b02      	ldr	r3, [pc, #8]	@ (8003d10 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr
 8003d10:	20000000 	.word	0x20000000

08003d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d18:	f7ff fff2 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	0a1b      	lsrs	r3, r3, #8
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	4903      	ldr	r1, [pc, #12]	@ (8003d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d2a:	5ccb      	ldrb	r3, [r1, r3]
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000
 8003d38:	08004d64 	.word	0x08004d64

08003d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d40:	f7ff ffde 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b05      	ldr	r3, [pc, #20]	@ (8003d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	0adb      	lsrs	r3, r3, #11
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4903      	ldr	r1, [pc, #12]	@ (8003d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	08004d64 	.word	0x08004d64

08003d64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <RCC_Delay+0x34>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a0a      	ldr	r2, [pc, #40]	@ (8003d9c <RCC_Delay+0x38>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	0a5b      	lsrs	r3, r3, #9
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d80:	bf00      	nop
  }
  while (Delay --);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1e5a      	subs	r2, r3, #1
 8003d86:	60fa      	str	r2, [r7, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f9      	bne.n	8003d80 <RCC_Delay+0x1c>
}
 8003d8c:	bf00      	nop
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr
 8003d98:	20000000 	.word	0x20000000
 8003d9c:	10624dd3 	.word	0x10624dd3

08003da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e076      	b.n	8003ea0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d108      	bne.n	8003dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dc2:	d009      	beq.n	8003dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	61da      	str	r2, [r3, #28]
 8003dca:	e005      	b.n	8003dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fe f908 	bl	8002008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5c:	ea42 0103 	orr.w	r1, r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e64:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	0c1a      	lsrs	r2, r3, #16
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f002 0204 	and.w	r2, r2, #4
 8003e7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eb8:	f7fe fa86 	bl	80023c8 <HAL_GetTick>
 8003ebc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d001      	beq.n	8003ed2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e12a      	b.n	8004128 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_SPI_Transmit+0x36>
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e122      	b.n	8004128 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_SPI_Transmit+0x48>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e11b      	b.n	8004128 <HAL_SPI_Transmit+0x280>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2203      	movs	r2, #3
 8003efc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	88fa      	ldrh	r2, [r7, #6]
 8003f10:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	88fa      	ldrh	r2, [r7, #6]
 8003f16:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f3e:	d10f      	bne.n	8003f60 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6a:	2b40      	cmp	r3, #64	@ 0x40
 8003f6c:	d007      	beq.n	8003f7e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f86:	d152      	bne.n	800402e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_SPI_Transmit+0xee>
 8003f90:	8b7b      	ldrh	r3, [r7, #26]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d145      	bne.n	8004022 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9a:	881a      	ldrh	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	1c9a      	adds	r2, r3, #2
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fba:	e032      	b.n	8004022 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d112      	bne.n	8003ff0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	881a      	ldrh	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	1c9a      	adds	r2, r3, #2
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003fee:	e018      	b.n	8004022 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ff0:	f7fe f9ea 	bl	80023c8 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d803      	bhi.n	8004008 <HAL_SPI_Transmit+0x160>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d102      	bne.n	800400e <HAL_SPI_Transmit+0x166>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e082      	b.n	8004128 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1c7      	bne.n	8003fbc <HAL_SPI_Transmit+0x114>
 800402c:	e053      	b.n	80040d6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_SPI_Transmit+0x194>
 8004036:	8b7b      	ldrh	r3, [r7, #26]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d147      	bne.n	80040cc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	7812      	ldrb	r2, [r2, #0]
 8004048:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004062:	e033      	b.n	80040cc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b02      	cmp	r3, #2
 8004070:	d113      	bne.n	800409a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	330c      	adds	r3, #12
 800407c:	7812      	ldrb	r2, [r2, #0]
 800407e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004098:	e018      	b.n	80040cc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800409a:	f7fe f995 	bl	80023c8 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d803      	bhi.n	80040b2 <HAL_SPI_Transmit+0x20a>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d102      	bne.n	80040b8 <HAL_SPI_Transmit+0x210>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d109      	bne.n	80040cc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e02d      	b.n	8004128 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1c6      	bne.n	8004064 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	6839      	ldr	r1, [r7, #0]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f8b0 	bl	8004240 <SPI_EndRxTxTransaction>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004126:	2300      	movs	r3, #0
  }
}
 8004128:	4618      	mov	r0, r3
 800412a:	3720      	adds	r7, #32
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004140:	f7fe f942 	bl	80023c8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4413      	add	r3, r2
 800414e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004150:	f7fe f93a 	bl	80023c8 <HAL_GetTick>
 8004154:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004156:	4b39      	ldr	r3, [pc, #228]	@ (800423c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	015b      	lsls	r3, r3, #5
 800415c:	0d1b      	lsrs	r3, r3, #20
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	fb02 f303 	mul.w	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004166:	e054      	b.n	8004212 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d050      	beq.n	8004212 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004170:	f7fe f92a 	bl	80023c8 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	429a      	cmp	r2, r3
 800417e:	d902      	bls.n	8004186 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d13d      	bne.n	8004202 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004194:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800419e:	d111      	bne.n	80041c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041a8:	d004      	beq.n	80041b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b2:	d107      	bne.n	80041c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041cc:	d10f      	bne.n	80041ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e017      	b.n	8004232 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	3b01      	subs	r3, #1
 8004210:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4013      	ands	r3, r2
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	429a      	cmp	r2, r3
 8004220:	bf0c      	ite	eq
 8004222:	2301      	moveq	r3, #1
 8004224:	2300      	movne	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	429a      	cmp	r2, r3
 800422e:	d19b      	bne.n	8004168 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000000 	.word	0x20000000

08004240 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af02      	add	r7, sp, #8
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2201      	movs	r2, #1
 8004254:	2102      	movs	r1, #2
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f7ff ff6a 	bl	8004130 <SPI_WaitFlagStateUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004266:	f043 0220 	orr.w	r2, r3, #32
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e013      	b.n	800429a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2200      	movs	r2, #0
 800427a:	2180      	movs	r1, #128	@ 0x80
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f7ff ff57 	bl	8004130 <SPI_WaitFlagStateUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428c:	f043 0220 	orr.w	r2, r3, #32
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e000      	b.n	800429a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e041      	b.n	8004338 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d106      	bne.n	80042ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7fd fedd 	bl	8002088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2202      	movs	r2, #2
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3304      	adds	r3, #4
 80042de:	4619      	mov	r1, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	f000 faad 	bl	8004840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d001      	beq.n	8004358 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e032      	b.n	80043be <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a18      	ldr	r2, [pc, #96]	@ (80043c8 <HAL_TIM_Base_Start+0x88>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00e      	beq.n	8004388 <HAL_TIM_Base_Start+0x48>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004372:	d009      	beq.n	8004388 <HAL_TIM_Base_Start+0x48>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a14      	ldr	r2, [pc, #80]	@ (80043cc <HAL_TIM_Base_Start+0x8c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_TIM_Base_Start+0x48>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a13      	ldr	r2, [pc, #76]	@ (80043d0 <HAL_TIM_Base_Start+0x90>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d111      	bne.n	80043ac <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b06      	cmp	r3, #6
 8004398:	d010      	beq.n	80043bc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0201 	orr.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043aa:	e007      	b.n	80043bc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800

080043d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d001      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e03a      	b.n	8004462 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a18      	ldr	r2, [pc, #96]	@ (800446c <HAL_TIM_Base_Start_IT+0x98>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00e      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x58>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004416:	d009      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x58>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a14      	ldr	r2, [pc, #80]	@ (8004470 <HAL_TIM_Base_Start_IT+0x9c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d004      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x58>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a13      	ldr	r2, [pc, #76]	@ (8004474 <HAL_TIM_Base_Start_IT+0xa0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d111      	bne.n	8004450 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b06      	cmp	r3, #6
 800443c:	d010      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444e:	e007      	b.n	8004460 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr
 800446c:	40012c00 	.word	0x40012c00
 8004470:	40000400 	.word	0x40000400
 8004474:	40000800 	.word	0x40000800

08004478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d020      	beq.n	80044dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01b      	beq.n	80044dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0202 	mvn.w	r2, #2
 80044ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f9a1 	bl	800480a <HAL_TIM_IC_CaptureCallback>
 80044c8:	e005      	b.n	80044d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f994 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f9a3 	bl	800481c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d020      	beq.n	8004528 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01b      	beq.n	8004528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0204 	mvn.w	r2, #4
 80044f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f97b 	bl	800480a <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f96e 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f97d 	bl	800481c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d020      	beq.n	8004574 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01b      	beq.n	8004574 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0208 	mvn.w	r2, #8
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2204      	movs	r2, #4
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f955 	bl	800480a <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f948 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f957 	bl	800481c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b00      	cmp	r3, #0
 800457c:	d020      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01b      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0210 	mvn.w	r2, #16
 8004590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2208      	movs	r2, #8
 8004596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f92f 	bl	800480a <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f922 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f931 	bl	800481c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00c      	beq.n	80045e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0201 	mvn.w	r2, #1
 80045dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f901 	bl	80047e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00c      	beq.n	8004608 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa87 	bl	8004b16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00c      	beq.n	800462c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f901 	bl	800482e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00c      	beq.n	8004650 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0220 	mvn.w	r2, #32
 8004648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fa5a 	bl	8004b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIM_ConfigClockSource+0x1c>
 8004670:	2302      	movs	r3, #2
 8004672:	e0b4      	b.n	80047de <HAL_TIM_ConfigClockSource+0x186>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800469a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ac:	d03e      	beq.n	800472c <HAL_TIM_ConfigClockSource+0xd4>
 80046ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046b2:	f200 8087 	bhi.w	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ba:	f000 8086 	beq.w	80047ca <HAL_TIM_ConfigClockSource+0x172>
 80046be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046c2:	d87f      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046c4:	2b70      	cmp	r3, #112	@ 0x70
 80046c6:	d01a      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0xa6>
 80046c8:	2b70      	cmp	r3, #112	@ 0x70
 80046ca:	d87b      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046cc:	2b60      	cmp	r3, #96	@ 0x60
 80046ce:	d050      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x11a>
 80046d0:	2b60      	cmp	r3, #96	@ 0x60
 80046d2:	d877      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046d4:	2b50      	cmp	r3, #80	@ 0x50
 80046d6:	d03c      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0xfa>
 80046d8:	2b50      	cmp	r3, #80	@ 0x50
 80046da:	d873      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046dc:	2b40      	cmp	r3, #64	@ 0x40
 80046de:	d058      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x13a>
 80046e0:	2b40      	cmp	r3, #64	@ 0x40
 80046e2:	d86f      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046e4:	2b30      	cmp	r3, #48	@ 0x30
 80046e6:	d064      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046e8:	2b30      	cmp	r3, #48	@ 0x30
 80046ea:	d86b      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d060      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d867      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d05c      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d05a      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046fc:	e062      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800470e:	f000 f97c 	bl	8004a0a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	609a      	str	r2, [r3, #8]
      break;
 800472a:	e04f      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800473c:	f000 f965 	bl	8004a0a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800474e:	609a      	str	r2, [r3, #8]
      break;
 8004750:	e03c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800475e:	461a      	mov	r2, r3
 8004760:	f000 f8dc 	bl	800491c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2150      	movs	r1, #80	@ 0x50
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f933 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 8004770:	e02c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800477e:	461a      	mov	r2, r3
 8004780:	f000 f8fa 	bl	8004978 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2160      	movs	r1, #96	@ 0x60
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f923 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 8004790:	e01c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800479e:	461a      	mov	r2, r3
 80047a0:	f000 f8bc 	bl	800491c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2140      	movs	r1, #64	@ 0x40
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f913 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 80047b0:	e00c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4619      	mov	r1, r3
 80047bc:	4610      	mov	r0, r2
 80047be:	f000 f90a 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 80047c2:	e003      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
      break;
 80047c8:	e000      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr

0800480a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr

0800482e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr

08004840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a2f      	ldr	r2, [pc, #188]	@ (8004910 <TIM_Base_SetConfig+0xd0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00b      	beq.n	8004870 <TIM_Base_SetConfig+0x30>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800485e:	d007      	beq.n	8004870 <TIM_Base_SetConfig+0x30>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a2c      	ldr	r2, [pc, #176]	@ (8004914 <TIM_Base_SetConfig+0xd4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_Base_SetConfig+0x30>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a2b      	ldr	r2, [pc, #172]	@ (8004918 <TIM_Base_SetConfig+0xd8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d108      	bne.n	8004882 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a22      	ldr	r2, [pc, #136]	@ (8004910 <TIM_Base_SetConfig+0xd0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00b      	beq.n	80048a2 <TIM_Base_SetConfig+0x62>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004890:	d007      	beq.n	80048a2 <TIM_Base_SetConfig+0x62>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a1f      	ldr	r2, [pc, #124]	@ (8004914 <TIM_Base_SetConfig+0xd4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d003      	beq.n	80048a2 <TIM_Base_SetConfig+0x62>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a1e      	ldr	r2, [pc, #120]	@ (8004918 <TIM_Base_SetConfig+0xd8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d108      	bne.n	80048b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0d      	ldr	r2, [pc, #52]	@ (8004910 <TIM_Base_SetConfig+0xd0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d103      	bne.n	80048e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f023 0201 	bic.w	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	611a      	str	r2, [r3, #16]
  }
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	40012c00 	.word	0x40012c00
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800

0800491c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f023 0201 	bic.w	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f023 030a 	bic.w	r3, r3, #10
 8004958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f023 0210 	bic.w	r2, r3, #16
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	031b      	lsls	r3, r3, #12
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	621a      	str	r2, [r3, #32]
}
 80049cc:	bf00      	nop
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f043 0307 	orr.w	r3, r3, #7
 80049f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	609a      	str	r2, [r3, #8]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b087      	sub	sp, #28
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
 8004a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	021a      	lsls	r2, r3, #8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	609a      	str	r2, [r3, #8]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr

08004a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e046      	b.n	8004aee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a16      	ldr	r2, [pc, #88]	@ (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00e      	beq.n	8004ac2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aac:	d009      	beq.n	8004ac2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a12      	ldr	r2, [pc, #72]	@ (8004afc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d004      	beq.n	8004ac2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a10      	ldr	r2, [pc, #64]	@ (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d10c      	bne.n	8004adc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800

08004b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e042      	b.n	8004bc0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fd fada 	bl	8002108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2224      	movs	r2, #36	@ 0x24
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f82b 	bl	8004bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695a      	ldr	r2, [r3, #20]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ba0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004c02:	f023 030c 	bic.w	r3, r3, #12
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004cdc <UART_SetConfig+0x114>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d103      	bne.n	8004c38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c30:	f7ff f884 	bl	8003d3c <HAL_RCC_GetPCLK2Freq>
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	e002      	b.n	8004c3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c38:	f7ff f86c 	bl	8003d14 <HAL_RCC_GetPCLK1Freq>
 8004c3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	009a      	lsls	r2, r3, #2
 8004c48:	441a      	add	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	4a22      	ldr	r2, [pc, #136]	@ (8004ce0 <UART_SetConfig+0x118>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	0119      	lsls	r1, r3, #4
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	009a      	lsls	r2, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c74:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce0 <UART_SetConfig+0x118>)
 8004c76:	fba3 0302 	umull	r0, r3, r3, r2
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	2064      	movs	r0, #100	@ 0x64
 8004c7e:	fb00 f303 	mul.w	r3, r0, r3
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	3332      	adds	r3, #50	@ 0x32
 8004c88:	4a15      	ldr	r2, [pc, #84]	@ (8004ce0 <UART_SetConfig+0x118>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c94:	4419      	add	r1, r3
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009a      	lsls	r2, r3, #2
 8004ca0:	441a      	add	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce0 <UART_SetConfig+0x118>)
 8004cae:	fba3 0302 	umull	r0, r3, r3, r2
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	2064      	movs	r0, #100	@ 0x64
 8004cb6:	fb00 f303 	mul.w	r3, r0, r3
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	3332      	adds	r3, #50	@ 0x32
 8004cc0:	4a07      	ldr	r2, [pc, #28]	@ (8004ce0 <UART_SetConfig+0x118>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	f003 020f 	and.w	r2, r3, #15
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	440a      	add	r2, r1
 8004cd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40013800 	.word	0x40013800
 8004ce0:	51eb851f 	.word	0x51eb851f

08004ce4 <memset>:
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	4402      	add	r2, r0
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d100      	bne.n	8004cee <memset+0xa>
 8004cec:	4770      	bx	lr
 8004cee:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf2:	e7f9      	b.n	8004ce8 <memset+0x4>

08004cf4 <__libc_init_array>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	2600      	movs	r6, #0
 8004cf8:	4d0c      	ldr	r5, [pc, #48]	@ (8004d2c <__libc_init_array+0x38>)
 8004cfa:	4c0d      	ldr	r4, [pc, #52]	@ (8004d30 <__libc_init_array+0x3c>)
 8004cfc:	1b64      	subs	r4, r4, r5
 8004cfe:	10a4      	asrs	r4, r4, #2
 8004d00:	42a6      	cmp	r6, r4
 8004d02:	d109      	bne.n	8004d18 <__libc_init_array+0x24>
 8004d04:	f000 f81a 	bl	8004d3c <_init>
 8004d08:	2600      	movs	r6, #0
 8004d0a:	4d0a      	ldr	r5, [pc, #40]	@ (8004d34 <__libc_init_array+0x40>)
 8004d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8004d38 <__libc_init_array+0x44>)
 8004d0e:	1b64      	subs	r4, r4, r5
 8004d10:	10a4      	asrs	r4, r4, #2
 8004d12:	42a6      	cmp	r6, r4
 8004d14:	d105      	bne.n	8004d22 <__libc_init_array+0x2e>
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
 8004d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1c:	4798      	blx	r3
 8004d1e:	3601      	adds	r6, #1
 8004d20:	e7ee      	b.n	8004d00 <__libc_init_array+0xc>
 8004d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d26:	4798      	blx	r3
 8004d28:	3601      	adds	r6, #1
 8004d2a:	e7f2      	b.n	8004d12 <__libc_init_array+0x1e>
 8004d2c:	08004d80 	.word	0x08004d80
 8004d30:	08004d80 	.word	0x08004d80
 8004d34:	08004d80 	.word	0x08004d80
 8004d38:	08004d84 	.word	0x08004d84

08004d3c <_init>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr

08004d48 <_fini>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr
