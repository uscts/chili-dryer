
two.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  080029b4  080029b4  000039b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003030  08003030  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003030  08003030  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003030  08003030  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003030  08003030  00004030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003034  08003034  00004034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003038  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  2000000c  08003044  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08003044  00005550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da44  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002482  00000000  00000000  00012a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00014f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd0  00000000  00000000  00015e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c7c  00000000  00000000  000169e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011039  00000000  00000000  0002e664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d18d  00000000  00000000  0003f69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc82a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f8c  00000000  00000000  000cc870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d07fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800299c 	.word	0x0800299c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800299c 	.word	0x0800299c

0800014c <__aeabi_f2iz>:
 800014c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000150:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000154:	d30f      	bcc.n	8000176 <__aeabi_f2iz+0x2a>
 8000156:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800015a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800015e:	d90d      	bls.n	800017c <__aeabi_f2iz+0x30>
 8000160:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000164:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000168:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800016c:	fa23 f002 	lsr.w	r0, r3, r2
 8000170:	bf18      	it	ne
 8000172:	4240      	negne	r0, r0
 8000174:	4770      	bx	lr
 8000176:	f04f 0000 	mov.w	r0, #0
 800017a:	4770      	bx	lr
 800017c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000180:	d101      	bne.n	8000186 <__aeabi_f2iz+0x3a>
 8000182:	0242      	lsls	r2, r0, #9
 8000184:	d105      	bne.n	8000192 <__aeabi_f2iz+0x46>
 8000186:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800018a:	bf08      	it	eq
 800018c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000190:	4770      	bx	lr
 8000192:	f04f 0000 	mov.w	r0, #0
 8000196:	4770      	bx	lr

08000198 <isTemperSensorInit>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);	
}
#else

uint8_t isTemperSensorInit(){
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	     return m_init;
 800019c:	4b02      	ldr	r3, [pc, #8]	@ (80001a8 <isTemperSensorInit+0x10>)
 800019e:	781b      	ldrb	r3, [r3, #0]
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000038 	.word	0x20000038

080001ac <isBusy>:

uint8_t isBusy(){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	return isBusyLine();
 80001b0:	f000 f80e 	bl	80001d0 <isBusyLine>
 80001b4:	4603      	mov	r3, r0
	//return m_busy;
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	bd80      	pop	{r7, pc}
	...

080001bc <getCurrentTemper>:
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
}


float getCurrentTemper(){
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
     return temperSensor.Temperature;
 80001c0:	4b02      	ldr	r3, [pc, #8]	@ (80001cc <getCurrentTemper+0x10>)
 80001c2:	689b      	ldr	r3, [r3, #8]
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	20000028 	.word	0x20000028

080001d0 <isBusyLine>:
#include "onewire.h"
#include "ds18b20Config.h"
//#include "tim.h"

static uint8_t m_busy_line = 0;
uint8_t isBusyLine(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	return m_busy_line;
 80001d4:	4b02      	ldr	r3, [pc, #8]	@ (80001e0 <isBusyLine+0x10>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
}
 80001d8:	4618      	mov	r0, r3
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	20000039 	.word	0x20000039

080001e4 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	60ba      	str	r2, [r7, #8]
 80001ec:	461a      	mov	r2, r3
 80001ee:	4603      	mov	r3, r0
 80001f0:	81fb      	strh	r3, [r7, #14]
 80001f2:	460b      	mov	r3, r1
 80001f4:	81bb      	strh	r3, [r7, #12]
 80001f6:	4613      	mov	r3, r2
 80001f8:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80001fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80001fe:	3307      	adds	r3, #7
 8000200:	2b00      	cmp	r3, #0
 8000202:	da00      	bge.n	8000206 <SSD1306_DrawBitmap+0x22>
 8000204:	3307      	adds	r3, #7
 8000206:	10db      	asrs	r3, r3, #3
 8000208:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 800020e:	2300      	movs	r3, #0
 8000210:	82bb      	strh	r3, [r7, #20]
 8000212:	e044      	b.n	800029e <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000214:	2300      	movs	r3, #0
 8000216:	827b      	strh	r3, [r7, #18]
 8000218:	e02f      	b.n	800027a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 800021a:	8a7b      	ldrh	r3, [r7, #18]
 800021c:	f003 0307 	and.w	r3, r3, #7
 8000220:	2b00      	cmp	r3, #0
 8000222:	d003      	beq.n	800022c <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000224:	7dfb      	ldrb	r3, [r7, #23]
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	75fb      	strb	r3, [r7, #23]
 800022a:	e012      	b.n	8000252 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800022c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000230:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000234:	fb03 f202 	mul.w	r2, r3, r2
 8000238:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800023c:	2b00      	cmp	r3, #0
 800023e:	da00      	bge.n	8000242 <SSD1306_DrawBitmap+0x5e>
 8000240:	3307      	adds	r3, #7
 8000242:	10db      	asrs	r3, r3, #3
 8000244:	b21b      	sxth	r3, r3
 8000246:	4413      	add	r3, r2
 8000248:	461a      	mov	r2, r3
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	4413      	add	r3, r2
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000252:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000256:	2b00      	cmp	r3, #0
 8000258:	da09      	bge.n	800026e <SSD1306_DrawBitmap+0x8a>
 800025a:	89fa      	ldrh	r2, [r7, #14]
 800025c:	8a7b      	ldrh	r3, [r7, #18]
 800025e:	4413      	add	r3, r2
 8000260:	b29b      	uxth	r3, r3
 8000262:	89b9      	ldrh	r1, [r7, #12]
 8000264:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000266:	b2d2      	uxtb	r2, r2
 8000268:	4618      	mov	r0, r3
 800026a:	f000 f92d 	bl	80004c8 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800026e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000272:	b29b      	uxth	r3, r3
 8000274:	3301      	adds	r3, #1
 8000276:	b29b      	uxth	r3, r3
 8000278:	827b      	strh	r3, [r7, #18]
 800027a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800027e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000282:	429a      	cmp	r2, r3
 8000284:	dbc9      	blt.n	800021a <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000286:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800028a:	b29b      	uxth	r3, r3
 800028c:	3301      	adds	r3, #1
 800028e:	b29b      	uxth	r3, r3
 8000290:	82bb      	strh	r3, [r7, #20]
 8000292:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000296:	b29b      	uxth	r3, r3
 8000298:	3301      	adds	r3, #1
 800029a:	b29b      	uxth	r3, r3
 800029c:	81bb      	strh	r3, [r7, #12]
 800029e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80002a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	dbb4      	blt.n	8000214 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	3718      	adds	r7, #24
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80002ba:	f000 f96d 	bl	8000598 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&H_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80002be:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80002c2:	2201      	movs	r2, #1
 80002c4:	2178      	movs	r1, #120	@ 0x78
 80002c6:	485b      	ldr	r0, [pc, #364]	@ (8000434 <SSD1306_Init+0x180>)
 80002c8:	f001 fa88 	bl	80017dc <HAL_I2C_IsDeviceReady>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	e0a9      	b.n	800042a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80002d6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80002da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80002dc:	e002      	b.n	80002e4 <SSD1306_Init+0x30>
		p--;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d1f9      	bne.n	80002de <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80002ea:	22ae      	movs	r2, #174	@ 0xae
 80002ec:	2100      	movs	r1, #0
 80002ee:	2078      	movs	r0, #120	@ 0x78
 80002f0:	f000 f9cc 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80002f4:	2220      	movs	r2, #32
 80002f6:	2100      	movs	r1, #0
 80002f8:	2078      	movs	r0, #120	@ 0x78
 80002fa:	f000 f9c7 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80002fe:	2210      	movs	r2, #16
 8000300:	2100      	movs	r1, #0
 8000302:	2078      	movs	r0, #120	@ 0x78
 8000304:	f000 f9c2 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000308:	22b0      	movs	r2, #176	@ 0xb0
 800030a:	2100      	movs	r1, #0
 800030c:	2078      	movs	r0, #120	@ 0x78
 800030e:	f000 f9bd 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000312:	22c8      	movs	r2, #200	@ 0xc8
 8000314:	2100      	movs	r1, #0
 8000316:	2078      	movs	r0, #120	@ 0x78
 8000318:	f000 f9b8 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800031c:	2200      	movs	r2, #0
 800031e:	2100      	movs	r1, #0
 8000320:	2078      	movs	r0, #120	@ 0x78
 8000322:	f000 f9b3 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000326:	2210      	movs	r2, #16
 8000328:	2100      	movs	r1, #0
 800032a:	2078      	movs	r0, #120	@ 0x78
 800032c:	f000 f9ae 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000330:	2240      	movs	r2, #64	@ 0x40
 8000332:	2100      	movs	r1, #0
 8000334:	2078      	movs	r0, #120	@ 0x78
 8000336:	f000 f9a9 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800033a:	2281      	movs	r2, #129	@ 0x81
 800033c:	2100      	movs	r1, #0
 800033e:	2078      	movs	r0, #120	@ 0x78
 8000340:	f000 f9a4 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000344:	22ff      	movs	r2, #255	@ 0xff
 8000346:	2100      	movs	r1, #0
 8000348:	2078      	movs	r0, #120	@ 0x78
 800034a:	f000 f99f 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800034e:	22a1      	movs	r2, #161	@ 0xa1
 8000350:	2100      	movs	r1, #0
 8000352:	2078      	movs	r0, #120	@ 0x78
 8000354:	f000 f99a 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000358:	22a6      	movs	r2, #166	@ 0xa6
 800035a:	2100      	movs	r1, #0
 800035c:	2078      	movs	r0, #120	@ 0x78
 800035e:	f000 f995 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000362:	22a8      	movs	r2, #168	@ 0xa8
 8000364:	2100      	movs	r1, #0
 8000366:	2078      	movs	r0, #120	@ 0x78
 8000368:	f000 f990 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800036c:	223f      	movs	r2, #63	@ 0x3f
 800036e:	2100      	movs	r1, #0
 8000370:	2078      	movs	r0, #120	@ 0x78
 8000372:	f000 f98b 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000376:	22a4      	movs	r2, #164	@ 0xa4
 8000378:	2100      	movs	r1, #0
 800037a:	2078      	movs	r0, #120	@ 0x78
 800037c:	f000 f986 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000380:	22d3      	movs	r2, #211	@ 0xd3
 8000382:	2100      	movs	r1, #0
 8000384:	2078      	movs	r0, #120	@ 0x78
 8000386:	f000 f981 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800038a:	2200      	movs	r2, #0
 800038c:	2100      	movs	r1, #0
 800038e:	2078      	movs	r0, #120	@ 0x78
 8000390:	f000 f97c 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000394:	22d5      	movs	r2, #213	@ 0xd5
 8000396:	2100      	movs	r1, #0
 8000398:	2078      	movs	r0, #120	@ 0x78
 800039a:	f000 f977 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800039e:	22f0      	movs	r2, #240	@ 0xf0
 80003a0:	2100      	movs	r1, #0
 80003a2:	2078      	movs	r0, #120	@ 0x78
 80003a4:	f000 f972 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80003a8:	22d9      	movs	r2, #217	@ 0xd9
 80003aa:	2100      	movs	r1, #0
 80003ac:	2078      	movs	r0, #120	@ 0x78
 80003ae:	f000 f96d 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80003b2:	2222      	movs	r2, #34	@ 0x22
 80003b4:	2100      	movs	r1, #0
 80003b6:	2078      	movs	r0, #120	@ 0x78
 80003b8:	f000 f968 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80003bc:	22da      	movs	r2, #218	@ 0xda
 80003be:	2100      	movs	r1, #0
 80003c0:	2078      	movs	r0, #120	@ 0x78
 80003c2:	f000 f963 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80003c6:	2212      	movs	r2, #18
 80003c8:	2100      	movs	r1, #0
 80003ca:	2078      	movs	r0, #120	@ 0x78
 80003cc:	f000 f95e 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80003d0:	22db      	movs	r2, #219	@ 0xdb
 80003d2:	2100      	movs	r1, #0
 80003d4:	2078      	movs	r0, #120	@ 0x78
 80003d6:	f000 f959 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80003da:	2220      	movs	r2, #32
 80003dc:	2100      	movs	r1, #0
 80003de:	2078      	movs	r0, #120	@ 0x78
 80003e0:	f000 f954 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80003e4:	228d      	movs	r2, #141	@ 0x8d
 80003e6:	2100      	movs	r1, #0
 80003e8:	2078      	movs	r0, #120	@ 0x78
 80003ea:	f000 f94f 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80003ee:	2214      	movs	r2, #20
 80003f0:	2100      	movs	r1, #0
 80003f2:	2078      	movs	r0, #120	@ 0x78
 80003f4:	f000 f94a 	bl	800068c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80003f8:	22af      	movs	r2, #175	@ 0xaf
 80003fa:	2100      	movs	r1, #0
 80003fc:	2078      	movs	r0, #120	@ 0x78
 80003fe:	f000 f945 	bl	800068c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000402:	222e      	movs	r2, #46	@ 0x2e
 8000404:	2100      	movs	r1, #0
 8000406:	2078      	movs	r0, #120	@ 0x78
 8000408:	f000 f940 	bl	800068c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800040c:	2000      	movs	r0, #0
 800040e:	f000 f843 	bl	8000498 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000412:	f000 f813 	bl	800043c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000416:	4b08      	ldr	r3, [pc, #32]	@ (8000438 <SSD1306_Init+0x184>)
 8000418:	2200      	movs	r2, #0
 800041a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800041c:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <SSD1306_Init+0x184>)
 800041e:	2200      	movs	r2, #0
 8000420:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000422:	4b05      	ldr	r3, [pc, #20]	@ (8000438 <SSD1306_Init+0x184>)
 8000424:	2201      	movs	r2, #1
 8000426:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000428:	2301      	movs	r3, #1
}
 800042a:	4618      	mov	r0, r3
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000464 	.word	0x20000464
 8000438:	2000043c 	.word	0x2000043c

0800043c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000442:	2300      	movs	r3, #0
 8000444:	71fb      	strb	r3, [r7, #7]
 8000446:	e01d      	b.n	8000484 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	3b50      	subs	r3, #80	@ 0x50
 800044c:	b2db      	uxtb	r3, r3
 800044e:	461a      	mov	r2, r3
 8000450:	2100      	movs	r1, #0
 8000452:	2078      	movs	r0, #120	@ 0x78
 8000454:	f000 f91a 	bl	800068c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000458:	2200      	movs	r2, #0
 800045a:	2100      	movs	r1, #0
 800045c:	2078      	movs	r0, #120	@ 0x78
 800045e:	f000 f915 	bl	800068c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000462:	2210      	movs	r2, #16
 8000464:	2100      	movs	r1, #0
 8000466:	2078      	movs	r0, #120	@ 0x78
 8000468:	f000 f910 	bl	800068c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	01db      	lsls	r3, r3, #7
 8000470:	4a08      	ldr	r2, [pc, #32]	@ (8000494 <SSD1306_UpdateScreen+0x58>)
 8000472:	441a      	add	r2, r3
 8000474:	2380      	movs	r3, #128	@ 0x80
 8000476:	2140      	movs	r1, #64	@ 0x40
 8000478:	2078      	movs	r0, #120	@ 0x78
 800047a:	f000 f8a1 	bl	80005c0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	3301      	adds	r3, #1
 8000482:	71fb      	strb	r3, [r7, #7]
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	2b07      	cmp	r3, #7
 8000488:	d9de      	bls.n	8000448 <SSD1306_UpdateScreen+0xc>
	}
}
 800048a:	bf00      	nop
 800048c:	bf00      	nop
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	2000003c 	.word	0x2000003c

08000498 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d101      	bne.n	80004ac <SSD1306_Fill+0x14>
 80004a8:	2300      	movs	r3, #0
 80004aa:	e000      	b.n	80004ae <SSD1306_Fill+0x16>
 80004ac:	23ff      	movs	r3, #255	@ 0xff
 80004ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004b2:	4619      	mov	r1, r3
 80004b4:	4803      	ldr	r0, [pc, #12]	@ (80004c4 <SSD1306_Fill+0x2c>)
 80004b6:	f002 fa44 	bl	8002942 <memset>
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2000003c 	.word	0x2000003c

080004c8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
 80004d2:	460b      	mov	r3, r1
 80004d4:	80bb      	strh	r3, [r7, #4]
 80004d6:	4613      	mov	r3, r2
 80004d8:	70fb      	strb	r3, [r7, #3]
	if (
 80004da:	88fb      	ldrh	r3, [r7, #6]
 80004dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80004de:	d848      	bhi.n	8000572 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80004e0:	88bb      	ldrh	r3, [r7, #4]
 80004e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80004e4:	d845      	bhi.n	8000572 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80004e6:	4b25      	ldr	r3, [pc, #148]	@ (800057c <SSD1306_DrawPixel+0xb4>)
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d006      	beq.n	80004fc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80004ee:	78fb      	ldrb	r3, [r7, #3]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	bf0c      	ite	eq
 80004f4:	2301      	moveq	r3, #1
 80004f6:	2300      	movne	r3, #0
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d11a      	bne.n	8000538 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000502:	88fa      	ldrh	r2, [r7, #6]
 8000504:	88bb      	ldrh	r3, [r7, #4]
 8000506:	08db      	lsrs	r3, r3, #3
 8000508:	b298      	uxth	r0, r3
 800050a:	4603      	mov	r3, r0
 800050c:	01db      	lsls	r3, r3, #7
 800050e:	4413      	add	r3, r2
 8000510:	4a1b      	ldr	r2, [pc, #108]	@ (8000580 <SSD1306_DrawPixel+0xb8>)
 8000512:	5cd3      	ldrb	r3, [r2, r3]
 8000514:	b25a      	sxtb	r2, r3
 8000516:	88bb      	ldrh	r3, [r7, #4]
 8000518:	f003 0307 	and.w	r3, r3, #7
 800051c:	2101      	movs	r1, #1
 800051e:	fa01 f303 	lsl.w	r3, r1, r3
 8000522:	b25b      	sxtb	r3, r3
 8000524:	4313      	orrs	r3, r2
 8000526:	b259      	sxtb	r1, r3
 8000528:	88fa      	ldrh	r2, [r7, #6]
 800052a:	4603      	mov	r3, r0
 800052c:	01db      	lsls	r3, r3, #7
 800052e:	4413      	add	r3, r2
 8000530:	b2c9      	uxtb	r1, r1
 8000532:	4a13      	ldr	r2, [pc, #76]	@ (8000580 <SSD1306_DrawPixel+0xb8>)
 8000534:	54d1      	strb	r1, [r2, r3]
 8000536:	e01d      	b.n	8000574 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000538:	88fa      	ldrh	r2, [r7, #6]
 800053a:	88bb      	ldrh	r3, [r7, #4]
 800053c:	08db      	lsrs	r3, r3, #3
 800053e:	b298      	uxth	r0, r3
 8000540:	4603      	mov	r3, r0
 8000542:	01db      	lsls	r3, r3, #7
 8000544:	4413      	add	r3, r2
 8000546:	4a0e      	ldr	r2, [pc, #56]	@ (8000580 <SSD1306_DrawPixel+0xb8>)
 8000548:	5cd3      	ldrb	r3, [r2, r3]
 800054a:	b25a      	sxtb	r2, r3
 800054c:	88bb      	ldrh	r3, [r7, #4]
 800054e:	f003 0307 	and.w	r3, r3, #7
 8000552:	2101      	movs	r1, #1
 8000554:	fa01 f303 	lsl.w	r3, r1, r3
 8000558:	b25b      	sxtb	r3, r3
 800055a:	43db      	mvns	r3, r3
 800055c:	b25b      	sxtb	r3, r3
 800055e:	4013      	ands	r3, r2
 8000560:	b259      	sxtb	r1, r3
 8000562:	88fa      	ldrh	r2, [r7, #6]
 8000564:	4603      	mov	r3, r0
 8000566:	01db      	lsls	r3, r3, #7
 8000568:	4413      	add	r3, r2
 800056a:	b2c9      	uxtb	r1, r1
 800056c:	4a04      	ldr	r2, [pc, #16]	@ (8000580 <SSD1306_DrawPixel+0xb8>)
 800056e:	54d1      	strb	r1, [r2, r3]
 8000570:	e000      	b.n	8000574 <SSD1306_DrawPixel+0xac>
		return;
 8000572:	bf00      	nop
	}
}
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	2000043c 	.word	0x2000043c
 8000580:	2000003c 	.word	0x2000003c

08000584 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000588:	2000      	movs	r0, #0
 800058a:	f7ff ff85 	bl	8000498 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800058e:	f7ff ff55 	bl	800043c <SSD1306_UpdateScreen>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800059e:	4b07      	ldr	r3, [pc, #28]	@ (80005bc <ssd1306_I2C_Init+0x24>)
 80005a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005a2:	e002      	b.n	80005aa <ssd1306_I2C_Init+0x12>
		p--;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d1f9      	bne.n	80005a4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&H_I2C);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	0003d090 	.word	0x0003d090

080005c0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b0c7      	sub	sp, #284	@ 0x11c
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	4604      	mov	r4, r0
 80005c8:	4608      	mov	r0, r1
 80005ca:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80005ce:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80005d2:	600a      	str	r2, [r1, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005da:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80005de:	4622      	mov	r2, r4
 80005e0:	701a      	strb	r2, [r3, #0]
 80005e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005e6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80005ea:	4602      	mov	r2, r0
 80005ec:	701a      	strb	r2, [r3, #0]
 80005ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005f6:	460a      	mov	r2, r1
 80005f8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80005fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000602:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000606:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800060a:	7812      	ldrb	r2, [r2, #0]
 800060c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800060e:	2300      	movs	r3, #0
 8000610:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000614:	e015      	b.n	8000642 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000616:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800061a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800061e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000622:	6812      	ldr	r2, [r2, #0]
 8000624:	441a      	add	r2, r3
 8000626:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800062a:	3301      	adds	r3, #1
 800062c:	7811      	ldrb	r1, [r2, #0]
 800062e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000632:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000636:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000638:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800063c:	3301      	adds	r3, #1
 800063e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000642:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000646:	b29b      	uxth	r3, r3
 8000648:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800064c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000650:	8812      	ldrh	r2, [r2, #0]
 8000652:	429a      	cmp	r2, r3
 8000654:	d8df      	bhi.n	8000616 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&H_I2C, address, dt, count+1, 10);
 8000656:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800065a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b299      	uxth	r1, r3
 8000662:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000666:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	b29b      	uxth	r3, r3
 8000670:	f107 020c 	add.w	r2, r7, #12
 8000674:	200a      	movs	r0, #10
 8000676:	9000      	str	r0, [sp, #0]
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <ssd1306_I2C_WriteMulti+0xc8>)
 800067a:	f000 ffb1 	bl	80015e0 <HAL_I2C_Master_Transmit>
}
 800067e:	bf00      	nop
 8000680:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000684:	46bd      	mov	sp, r7
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	20000464 	.word	0x20000464

0800068c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af02      	add	r7, sp, #8
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	460b      	mov	r3, r1
 8000698:	71bb      	strb	r3, [r7, #6]
 800069a:	4613      	mov	r3, r2
 800069c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80006a2:	797b      	ldrb	r3, [r7, #5]
 80006a4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&H_I2C, address, dt, 2, 10);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	b299      	uxth	r1, r3
 80006aa:	f107 020c 	add.w	r2, r7, #12
 80006ae:	230a      	movs	r3, #10
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2302      	movs	r3, #2
 80006b4:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <ssd1306_I2C_Write+0x38>)
 80006b6:	f000 ff93 	bl	80015e0 <HAL_I2C_Master_Transmit>
}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000464 	.word	0x20000464

080006c8 <send>:
	_LED_0F[26] = 0xC1; //U
	_LED_0F[27] = 0x91; //Y
	_LED_0F[28] = 0xFE; //hight -
}

void send(uint8_t X) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]

	for (int i = 8; i >= 1; i--) {
 80006d2:	2308      	movs	r3, #8
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e022      	b.n	800071e <send+0x56>
		if (X & 0x80) {
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	da06      	bge.n	80006ee <send+0x26>
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, HIGH);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006e6:	4812      	ldr	r0, [pc, #72]	@ (8000730 <send+0x68>)
 80006e8:	f000 fe1e 	bl	8001328 <HAL_GPIO_WritePin>
 80006ec:	e005      	b.n	80006fa <send+0x32>
		} else {
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, LOW);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006f4:	480e      	ldr	r0, [pc, #56]	@ (8000730 <send+0x68>)
 80006f6:	f000 fe17 	bl	8001328 <HAL_GPIO_WritePin>
		}
		X <<= 1;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, HIGH);
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000706:	480a      	ldr	r0, [pc, #40]	@ (8000730 <send+0x68>)
 8000708:	f000 fe0e 	bl	8001328 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, LOW);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000712:	4807      	ldr	r0, [pc, #28]	@ (8000730 <send+0x68>)
 8000714:	f000 fe08 	bl	8001328 <HAL_GPIO_WritePin>
	for (int i = 8; i >= 1; i--) {
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3b01      	subs	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcd9      	bgt.n	80006d8 <send+0x10>
	}
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40010c00 	.word	0x40010c00

08000734 <send_port>:

void send_port(uint8_t X, uint8_t port) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	460a      	mov	r2, r1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	4613      	mov	r3, r2
 8000742:	71bb      	strb	r3, [r7, #6]
	send(X);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ffbe 	bl	80006c8 <send>
	send(port);
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ffba 	bl	80006c8 <send>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800075a:	4806      	ldr	r0, [pc, #24]	@ (8000774 <send_port+0x40>)
 800075c:	f000 fde4 	bl	8001328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000766:	4803      	ldr	r0, [pc, #12]	@ (8000774 <send_port+0x40>)
 8000768:	f000 fdde 	bl	8001328 <HAL_GPIO_WritePin>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40010c00 	.word	0x40010c00

08000778 <digit4_temper>:
			send_port(_LED_0F[n4], 0b1000);
	}
}

static uint8_t m_tempercount = 0;
void digit4_temper(int temper) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	int n1, n2, n3, n4;
	n1 = (int) temper % 10;
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4b55      	ldr	r3, [pc, #340]	@ (80008d8 <digit4_temper+0x160>)
 8000784:	fb83 1302 	smull	r1, r3, r3, r2
 8000788:	1099      	asrs	r1, r3, #2
 800078a:	17d3      	asrs	r3, r2, #31
 800078c:	1ac9      	subs	r1, r1, r3
 800078e:	460b      	mov	r3, r1
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	617b      	str	r3, [r7, #20]
	n2 = (int) ((temper % 100)) / 10;
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	4b4f      	ldr	r3, [pc, #316]	@ (80008dc <digit4_temper+0x164>)
 800079e:	fb83 1302 	smull	r1, r3, r3, r2
 80007a2:	1159      	asrs	r1, r3, #5
 80007a4:	17d3      	asrs	r3, r2, #31
 80007a6:	1acb      	subs	r3, r1, r3
 80007a8:	2164      	movs	r1, #100	@ 0x64
 80007aa:	fb01 f303 	mul.w	r3, r1, r3
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	4a49      	ldr	r2, [pc, #292]	@ (80008d8 <digit4_temper+0x160>)
 80007b2:	fb82 1203 	smull	r1, r2, r2, r3
 80007b6:	1092      	asrs	r2, r2, #2
 80007b8:	17db      	asrs	r3, r3, #31
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	613b      	str	r3, [r7, #16]
	n3 = (int) ((temper % 1000)) / 100;
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	4b47      	ldr	r3, [pc, #284]	@ (80008e0 <digit4_temper+0x168>)
 80007c2:	fb83 1302 	smull	r1, r3, r3, r2
 80007c6:	1199      	asrs	r1, r3, #6
 80007c8:	17d3      	asrs	r3, r2, #31
 80007ca:	1acb      	subs	r3, r1, r3
 80007cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007d0:	fb01 f303 	mul.w	r3, r1, r3
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	4a41      	ldr	r2, [pc, #260]	@ (80008dc <digit4_temper+0x164>)
 80007d8:	fb82 1203 	smull	r1, r2, r2, r3
 80007dc:	1152      	asrs	r2, r2, #5
 80007de:	17db      	asrs	r3, r3, #31
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	60fb      	str	r3, [r7, #12]
	n4 = (int) ((temper % 10000)) / 1000;
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	4b3f      	ldr	r3, [pc, #252]	@ (80008e4 <digit4_temper+0x16c>)
 80007e8:	fb83 1302 	smull	r1, r3, r3, r2
 80007ec:	1319      	asrs	r1, r3, #12
 80007ee:	17d3      	asrs	r3, r2, #31
 80007f0:	1acb      	subs	r3, r1, r3
 80007f2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80007f6:	fb01 f303 	mul.w	r3, r1, r3
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	4a38      	ldr	r2, [pc, #224]	@ (80008e0 <digit4_temper+0x168>)
 80007fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000802:	1192      	asrs	r2, r2, #6
 8000804:	17db      	asrs	r3, r3, #31
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	60bb      	str	r3, [r7, #8]

	switch (m_tempercount) {
 800080a:	4b37      	ldr	r3, [pc, #220]	@ (80008e8 <digit4_temper+0x170>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b03      	cmp	r3, #3
 8000810:	d835      	bhi.n	800087e <digit4_temper+0x106>
 8000812:	a201      	add	r2, pc, #4	@ (adr r2, 8000818 <digit4_temper+0xa0>)
 8000814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000818:	08000829 	.word	0x08000829
 800081c:	0800083b 	.word	0x0800083b
 8000820:	0800084d 	.word	0x0800084d
 8000824:	08000865 	.word	0x08000865
	case 0:
		send_port(_LED_0F[n1], 0b0001);
 8000828:	4a30      	ldr	r2, [pc, #192]	@ (80008ec <digit4_temper+0x174>)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2101      	movs	r1, #1
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff7e 	bl	8000734 <send_port>
		break;
 8000838:	e022      	b.n	8000880 <digit4_temper+0x108>
	case 1:
		send_port(_LED_0F[n2], 0b0010);
 800083a:	4a2c      	ldr	r2, [pc, #176]	@ (80008ec <digit4_temper+0x174>)
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	4413      	add	r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2102      	movs	r1, #2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff75 	bl	8000734 <send_port>
		break;
 800084a:	e019      	b.n	8000880 <digit4_temper+0x108>
	case 2:
		if (temper > 99){
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b63      	cmp	r3, #99	@ 0x63
 8000850:	dd08      	ble.n	8000864 <digit4_temper+0xec>
			send_port(_LED_0F[n3], 0b0100);
 8000852:	4a26      	ldr	r2, [pc, #152]	@ (80008ec <digit4_temper+0x174>)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2104      	movs	r1, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff69 	bl	8000734 <send_port>
		break;
 8000862:	e00d      	b.n	8000880 <digit4_temper+0x108>
		}
    case 3:
		if (temper > 999){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800086a:	db08      	blt.n	800087e <digit4_temper+0x106>
			send_port(_LED_0F[n4], 0b1000);
 800086c:	4a1f      	ldr	r2, [pc, #124]	@ (80008ec <digit4_temper+0x174>)
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2108      	movs	r1, #8
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff5c 	bl	8000734 <send_port>
		break;
 800087c:	e000      	b.n	8000880 <digit4_temper+0x108>
		}
	default:
		break;
 800087e:	bf00      	nop
	}

	m_tempercount++;
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <digit4_temper+0x170>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <digit4_temper+0x170>)
 800088a:	701a      	strb	r2, [r3, #0]

	if (temper > 999 && m_tempercount >= 4) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000892:	db07      	blt.n	80008a4 <digit4_temper+0x12c>
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <digit4_temper+0x170>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b03      	cmp	r3, #3
 800089a:	d903      	bls.n	80008a4 <digit4_temper+0x12c>
				m_tempercount = 0;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <digit4_temper+0x170>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
 80008a2:	e015      	b.n	80008d0 <digit4_temper+0x158>
	}else if(temper > 99 && m_tempercount >= 3){
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b63      	cmp	r3, #99	@ 0x63
 80008a8:	dd07      	ble.n	80008ba <digit4_temper+0x142>
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <digit4_temper+0x170>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d903      	bls.n	80008ba <digit4_temper+0x142>
				m_tempercount = 0;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <digit4_temper+0x170>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
 80008b8:	e00a      	b.n	80008d0 <digit4_temper+0x158>
	}else if(temper <= 99 && m_tempercount >= 2){
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b63      	cmp	r3, #99	@ 0x63
 80008be:	dc07      	bgt.n	80008d0 <digit4_temper+0x158>
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <digit4_temper+0x170>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d903      	bls.n	80008d0 <digit4_temper+0x158>
				m_tempercount = 0;
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <digit4_temper+0x170>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
			}

}
 80008ce:	e7ff      	b.n	80008d0 <digit4_temper+0x158>
 80008d0:	bf00      	nop
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	66666667 	.word	0x66666667
 80008dc:	51eb851f 	.word	0x51eb851f
 80008e0:	10624dd3 	.word	0x10624dd3
 80008e4:	68db8bad 	.word	0x68db8bad
 80008e8:	20000461 	.word	0x20000461
 80008ec:	20000444 	.word	0x20000444

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f6:	f000 fa4d 	bl	8000d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f819 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f000 f88b 	bl	8000a18 <MX_GPIO_Init>
 // MX_USART1_UART_Init();
 // MX_TIM2_Init();
 // MX_TIM3_Init();
  MX_I2C2_Init();
 8000902:	f000 f85b 	bl	80009bc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000906:	f7ff fcd5 	bl	80002b4 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
  {
		  SSD1306_Clear();
 800090a:	f7ff fe3b 	bl	8000584 <SSD1306_Clear>
		  SSD1306_DrawBitmap(0,0,ojtubelog1,128,64,1);
 800090e:	2301      	movs	r3, #1
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	2340      	movs	r3, #64	@ 0x40
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2380      	movs	r3, #128	@ 0x80
 8000918:	4a04      	ldr	r2, [pc, #16]	@ (800092c <main+0x3c>)
 800091a:	2100      	movs	r1, #0
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff fc61 	bl	80001e4 <SSD1306_DrawBitmap>
		  SSD1306_UpdateScreen();
 8000922:	f7ff fd8b 	bl	800043c <SSD1306_UpdateScreen>
		  SSD1306_Clear();
 8000926:	bf00      	nop
 8000928:	e7ef      	b.n	800090a <main+0x1a>
 800092a:	bf00      	nop
 800092c:	080029b4 	.word	0x080029b4

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b090      	sub	sp, #64	@ 0x40
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	2228      	movs	r2, #40	@ 0x28
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f001 ffff 	bl	8002942 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000956:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800095a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000960:	2301      	movs	r3, #1
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
 8000966:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000968:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800096c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800096e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000972:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0318 	add.w	r3, r7, #24
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fab7 	bl	8001eec <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000984:	f000 f904 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2302      	movs	r3, #2
 800098e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000994:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000998:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2102      	movs	r1, #2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 fd24 	bl	80023f0 <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009ae:	f000 f8ef 	bl	8000b90 <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3740      	adds	r7, #64	@ 0x40
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_I2C2_Init+0x50>)
 80009c2:	4a13      	ldr	r2, [pc, #76]	@ (8000a10 <MX_I2C2_Init+0x54>)
 80009c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_I2C2_Init+0x50>)
 80009c8:	4a12      	ldr	r2, [pc, #72]	@ (8000a14 <MX_I2C2_Init+0x58>)
 80009ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_I2C2_Init+0x50>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_I2C2_Init+0x50>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_I2C2_Init+0x50>)
 80009da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <MX_I2C2_Init+0x50>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_I2C2_Init+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ec:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <MX_I2C2_Init+0x50>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_I2C2_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <MX_I2C2_Init+0x50>)
 80009fa:	f000 fcad 	bl	8001358 <HAL_I2C_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a04:	f000 f8c4 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000464 	.word	0x20000464
 8000a10:	40005800 	.word	0x40005800
 8000a14:	00061a80 	.word	0x00061a80

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2c:	4b54      	ldr	r3, [pc, #336]	@ (8000b80 <MX_GPIO_Init+0x168>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a53      	ldr	r2, [pc, #332]	@ (8000b80 <MX_GPIO_Init+0x168>)
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b51      	ldr	r3, [pc, #324]	@ (8000b80 <MX_GPIO_Init+0x168>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0310 	and.w	r3, r3, #16
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a44:	4b4e      	ldr	r3, [pc, #312]	@ (8000b80 <MX_GPIO_Init+0x168>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a4d      	ldr	r2, [pc, #308]	@ (8000b80 <MX_GPIO_Init+0x168>)
 8000a4a:	f043 0320 	orr.w	r3, r3, #32
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b4b      	ldr	r3, [pc, #300]	@ (8000b80 <MX_GPIO_Init+0x168>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0320 	and.w	r3, r3, #32
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b48      	ldr	r3, [pc, #288]	@ (8000b80 <MX_GPIO_Init+0x168>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a47      	ldr	r2, [pc, #284]	@ (8000b80 <MX_GPIO_Init+0x168>)
 8000a62:	f043 0304 	orr.w	r3, r3, #4
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b45      	ldr	r3, [pc, #276]	@ (8000b80 <MX_GPIO_Init+0x168>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a74:	4b42      	ldr	r3, [pc, #264]	@ (8000b80 <MX_GPIO_Init+0x168>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a41      	ldr	r2, [pc, #260]	@ (8000b80 <MX_GPIO_Init+0x168>)
 8000a7a:	f043 0308 	orr.w	r3, r3, #8
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b3f      	ldr	r3, [pc, #252]	@ (8000b80 <MX_GPIO_Init+0x168>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a92:	483c      	ldr	r0, [pc, #240]	@ (8000b84 <MX_GPIO_Init+0x16c>)
 8000a94:	f000 fc48 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA3_TEMP_DATA_GPIO_Port, PA3_TEMP_DATA_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	483a      	ldr	r0, [pc, #232]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000a9e:	f000 fc43 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin|PB6_LED1_Pin, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f24e 0140 	movw	r1, #57408	@ 0xe040
 8000aa8:	4838      	ldr	r0, [pc, #224]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000aaa:	f000 fc3d 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	4836      	ldr	r0, [pc, #216]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000ab4:	f000 fc38 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8000ab8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	4619      	mov	r1, r3
 8000ad0:	482c      	ldr	r0, [pc, #176]	@ (8000b84 <MX_GPIO_Init+0x16c>)
 8000ad2:	f000 faa5 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_Pin;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_SW_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4827      	ldr	r0, [pc, #156]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000aea:	f000 fa99 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3_TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = PA3_TEMP_DATA_Pin;
 8000aee:	2308      	movs	r3, #8
 8000af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA3_TEMP_DATA_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4619      	mov	r1, r3
 8000b04:	4820      	ldr	r0, [pc, #128]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000b06:	f000 fa8b 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0_TEMP_SET_UP_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB0_TEMP_SET_UP_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481b      	ldr	r0, [pc, #108]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000b1e:	f000 fa7f 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_RCLK_Pin FND_DIO_Pin FND_SCLK_Pin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin;
 8000b22:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4814      	ldr	r0, [pc, #80]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000b3c:	f000 fa70 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5_RELAY_ON_OFF_CTRL_Pin */
  GPIO_InitStruct.Pin = PB5_RELAY_ON_OFF_CTRL_Pin;
 8000b40:	2320      	movs	r3, #32
 8000b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	4619      	mov	r1, r3
 8000b56:	480d      	ldr	r0, [pc, #52]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000b58:	f000 fa62 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6_LED1_Pin */
  GPIO_InitStruct.Pin = PB6_LED1_Pin;
 8000b5c:	2340      	movs	r3, #64	@ 0x40
 8000b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB6_LED1_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	4806      	ldr	r0, [pc, #24]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000b74:	f000 fa54 	bl	8001020 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b78:	bf00      	nop
 8000b7a:	3720      	adds	r7, #32
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40011000 	.word	0x40011000
 8000b88:	40010800 	.word	0x40010800
 8000b8c:	40010c00 	.word	0x40010c00

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <Error_Handler+0x8>

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <HAL_MspInit+0x5c>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	4a14      	ldr	r2, [pc, #80]	@ (8000bf8 <HAL_MspInit+0x5c>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6193      	str	r3, [r2, #24]
 8000bae:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <HAL_MspInit+0x5c>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <HAL_MspInit+0x5c>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf8 <HAL_MspInit+0x5c>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc4:	61d3      	str	r3, [r2, #28]
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <HAL_MspInit+0x5c>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <HAL_MspInit+0x60>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <HAL_MspInit+0x60>)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40010000 	.word	0x40010000

08000c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a16      	ldr	r2, [pc, #88]	@ (8000c74 <HAL_I2C_MspInit+0x74>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d124      	bne.n	8000c6a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <HAL_I2C_MspInit+0x78>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <HAL_I2C_MspInit+0x78>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_I2C_MspInit+0x78>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0308 	and.w	r3, r3, #8
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c38:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c3e:	2312      	movs	r3, #18
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480b      	ldr	r0, [pc, #44]	@ (8000c7c <HAL_I2C_MspInit+0x7c>)
 8000c4e:	f000 f9e7 	bl	8001020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <HAL_I2C_MspInit+0x78>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <HAL_I2C_MspInit+0x78>)
 8000c58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c5c:	61d3      	str	r3, [r2, #28]
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_I2C_MspInit+0x78>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3720      	adds	r7, #32
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40005800 	.word	0x40005800
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <NMI_Handler+0x4>

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <MemManage_Handler+0x4>

08000c98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f8a6 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  m_time ++;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <TIM2_IRQHandler+0x18>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a03      	ldr	r2, [pc, #12]	@ (8000cf0 <TIM2_IRQHandler+0x18>)
 8000ce4:	6013      	str	r3, [r2, #0]
  //}



  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ce6:	4803      	ldr	r0, [pc, #12]	@ (8000cf4 <TIM2_IRQHandler+0x1c>)
 8000ce8:	f001 fcfc 	bl	80026e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000548 	.word	0x20000548
 8000cf4:	200004b8 	.word	0x200004b8

08000cf8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
if(isTemperSensorInit() && !isBusy()){
 8000cfc:	f7ff fa4c 	bl	8000198 <isTemperSensorInit>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d012      	beq.n	8000d2c <TIM3_IRQHandler+0x34>
 8000d06:	f7ff fa51 	bl	80001ac <isBusy>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10d      	bne.n	8000d2c <TIM3_IRQHandler+0x34>
	digit4_temper((int)getCurrentTemper() * 10 );
 8000d10:	f7ff fa54 	bl	80001bc <getCurrentTemper>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fa18 	bl	800014c <__aeabi_f2iz>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fd26 	bl	8000778 <digit4_temper>
}
//digit4_temper((int)getCurrentTemper() * 10 );

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d2c:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <TIM3_IRQHandler+0x40>)
 8000d2e:	f001 fcd9 	bl	80026e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000500 	.word	0x20000500

08000d3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d48:	f7ff fff8 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d4e:	490c      	ldr	r1, [pc, #48]	@ (8000d80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d50:	4a0c      	ldr	r2, [pc, #48]	@ (8000d84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a09      	ldr	r2, [pc, #36]	@ (8000d88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d64:	4c09      	ldr	r4, [pc, #36]	@ (8000d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d72:	f001 fdef 	bl	8002954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d76:	f7ff fdbb 	bl	80008f0 <main>
  bx lr
 8000d7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d84:	08003038 	.word	0x08003038
  ldr r2, =_sbss
 8000d88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d8c:	20000550 	.word	0x20000550

08000d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC1_2_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <HAL_Init+0x28>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	@ (8000dbc <HAL_Init+0x28>)
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f907 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	200f      	movs	r0, #15
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fef4 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40022000 	.word	0x40022000

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f911 	bl	8001006 <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f8e7 	bl	8000fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_IncTick+0x1c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a03      	ldr	r2, [pc, #12]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	2000054c 	.word	0x2000054c

08000e44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b02      	ldr	r3, [pc, #8]	@ (8000e54 <HAL_GetTick+0x10>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	2000054c 	.word	0x2000054c

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	@ (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	@ (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	@ 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	@ 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f84:	d301      	bcc.n	8000f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00f      	b.n	8000faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <SysTick_Config+0x40>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f92:	210f      	movs	r1, #15
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f7ff ff90 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <SysTick_Config+0x40>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa2:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <SysTick_Config+0x40>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	e000e010 	.word	0xe000e010

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff49 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe0:	f7ff ff5e 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8000fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	6978      	ldr	r0, [r7, #20]
 8000fec:	f7ff ff90 	bl	8000f10 <NVIC_EncodePriority>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff5f 	bl	8000ebc <__NVIC_SetPriority>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffb0 	bl	8000f74 <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b08b      	sub	sp, #44	@ 0x2c
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001032:	e169      	b.n	8001308 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001034:	2201      	movs	r2, #1
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	429a      	cmp	r2, r3
 800104e:	f040 8158 	bne.w	8001302 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	4a9a      	ldr	r2, [pc, #616]	@ (80012c0 <HAL_GPIO_Init+0x2a0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d05e      	beq.n	800111a <HAL_GPIO_Init+0xfa>
 800105c:	4a98      	ldr	r2, [pc, #608]	@ (80012c0 <HAL_GPIO_Init+0x2a0>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d875      	bhi.n	800114e <HAL_GPIO_Init+0x12e>
 8001062:	4a98      	ldr	r2, [pc, #608]	@ (80012c4 <HAL_GPIO_Init+0x2a4>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d058      	beq.n	800111a <HAL_GPIO_Init+0xfa>
 8001068:	4a96      	ldr	r2, [pc, #600]	@ (80012c4 <HAL_GPIO_Init+0x2a4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d86f      	bhi.n	800114e <HAL_GPIO_Init+0x12e>
 800106e:	4a96      	ldr	r2, [pc, #600]	@ (80012c8 <HAL_GPIO_Init+0x2a8>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d052      	beq.n	800111a <HAL_GPIO_Init+0xfa>
 8001074:	4a94      	ldr	r2, [pc, #592]	@ (80012c8 <HAL_GPIO_Init+0x2a8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d869      	bhi.n	800114e <HAL_GPIO_Init+0x12e>
 800107a:	4a94      	ldr	r2, [pc, #592]	@ (80012cc <HAL_GPIO_Init+0x2ac>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d04c      	beq.n	800111a <HAL_GPIO_Init+0xfa>
 8001080:	4a92      	ldr	r2, [pc, #584]	@ (80012cc <HAL_GPIO_Init+0x2ac>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d863      	bhi.n	800114e <HAL_GPIO_Init+0x12e>
 8001086:	4a92      	ldr	r2, [pc, #584]	@ (80012d0 <HAL_GPIO_Init+0x2b0>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d046      	beq.n	800111a <HAL_GPIO_Init+0xfa>
 800108c:	4a90      	ldr	r2, [pc, #576]	@ (80012d0 <HAL_GPIO_Init+0x2b0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d85d      	bhi.n	800114e <HAL_GPIO_Init+0x12e>
 8001092:	2b12      	cmp	r3, #18
 8001094:	d82a      	bhi.n	80010ec <HAL_GPIO_Init+0xcc>
 8001096:	2b12      	cmp	r3, #18
 8001098:	d859      	bhi.n	800114e <HAL_GPIO_Init+0x12e>
 800109a:	a201      	add	r2, pc, #4	@ (adr r2, 80010a0 <HAL_GPIO_Init+0x80>)
 800109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a0:	0800111b 	.word	0x0800111b
 80010a4:	080010f5 	.word	0x080010f5
 80010a8:	08001107 	.word	0x08001107
 80010ac:	08001149 	.word	0x08001149
 80010b0:	0800114f 	.word	0x0800114f
 80010b4:	0800114f 	.word	0x0800114f
 80010b8:	0800114f 	.word	0x0800114f
 80010bc:	0800114f 	.word	0x0800114f
 80010c0:	0800114f 	.word	0x0800114f
 80010c4:	0800114f 	.word	0x0800114f
 80010c8:	0800114f 	.word	0x0800114f
 80010cc:	0800114f 	.word	0x0800114f
 80010d0:	0800114f 	.word	0x0800114f
 80010d4:	0800114f 	.word	0x0800114f
 80010d8:	0800114f 	.word	0x0800114f
 80010dc:	0800114f 	.word	0x0800114f
 80010e0:	0800114f 	.word	0x0800114f
 80010e4:	080010fd 	.word	0x080010fd
 80010e8:	08001111 	.word	0x08001111
 80010ec:	4a79      	ldr	r2, [pc, #484]	@ (80012d4 <HAL_GPIO_Init+0x2b4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010f2:	e02c      	b.n	800114e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	623b      	str	r3, [r7, #32]
          break;
 80010fa:	e029      	b.n	8001150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	3304      	adds	r3, #4
 8001102:	623b      	str	r3, [r7, #32]
          break;
 8001104:	e024      	b.n	8001150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	3308      	adds	r3, #8
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e01f      	b.n	8001150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	330c      	adds	r3, #12
 8001116:	623b      	str	r3, [r7, #32]
          break;
 8001118:	e01a      	b.n	8001150 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001122:	2304      	movs	r3, #4
 8001124:	623b      	str	r3, [r7, #32]
          break;
 8001126:	e013      	b.n	8001150 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d105      	bne.n	800113c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001130:	2308      	movs	r3, #8
 8001132:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	611a      	str	r2, [r3, #16]
          break;
 800113a:	e009      	b.n	8001150 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800113c:	2308      	movs	r3, #8
 800113e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	615a      	str	r2, [r3, #20]
          break;
 8001146:	e003      	b.n	8001150 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
          break;
 800114c:	e000      	b.n	8001150 <HAL_GPIO_Init+0x130>
          break;
 800114e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2bff      	cmp	r3, #255	@ 0xff
 8001154:	d801      	bhi.n	800115a <HAL_GPIO_Init+0x13a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	e001      	b.n	800115e <HAL_GPIO_Init+0x13e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3304      	adds	r3, #4
 800115e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2bff      	cmp	r3, #255	@ 0xff
 8001164:	d802      	bhi.n	800116c <HAL_GPIO_Init+0x14c>
 8001166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	e002      	b.n	8001172 <HAL_GPIO_Init+0x152>
 800116c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116e:	3b08      	subs	r3, #8
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	210f      	movs	r1, #15
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	401a      	ands	r2, r3
 8001184:	6a39      	ldr	r1, [r7, #32]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	431a      	orrs	r2, r3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 80b1 	beq.w	8001302 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011a0:	4b4d      	ldr	r3, [pc, #308]	@ (80012d8 <HAL_GPIO_Init+0x2b8>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a4c      	ldr	r2, [pc, #304]	@ (80012d8 <HAL_GPIO_Init+0x2b8>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b4a      	ldr	r3, [pc, #296]	@ (80012d8 <HAL_GPIO_Init+0x2b8>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011b8:	4a48      	ldr	r2, [pc, #288]	@ (80012dc <HAL_GPIO_Init+0x2bc>)
 80011ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	4013      	ands	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a40      	ldr	r2, [pc, #256]	@ (80012e0 <HAL_GPIO_Init+0x2c0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d013      	beq.n	800120c <HAL_GPIO_Init+0x1ec>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a3f      	ldr	r2, [pc, #252]	@ (80012e4 <HAL_GPIO_Init+0x2c4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d00d      	beq.n	8001208 <HAL_GPIO_Init+0x1e8>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a3e      	ldr	r2, [pc, #248]	@ (80012e8 <HAL_GPIO_Init+0x2c8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d007      	beq.n	8001204 <HAL_GPIO_Init+0x1e4>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a3d      	ldr	r2, [pc, #244]	@ (80012ec <HAL_GPIO_Init+0x2cc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d101      	bne.n	8001200 <HAL_GPIO_Init+0x1e0>
 80011fc:	2303      	movs	r3, #3
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x1ee>
 8001200:	2304      	movs	r3, #4
 8001202:	e004      	b.n	800120e <HAL_GPIO_Init+0x1ee>
 8001204:	2302      	movs	r3, #2
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0x1ee>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <HAL_GPIO_Init+0x1ee>
 800120c:	2300      	movs	r3, #0
 800120e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001210:	f002 0203 	and.w	r2, r2, #3
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	4093      	lsls	r3, r2
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800121e:	492f      	ldr	r1, [pc, #188]	@ (80012dc <HAL_GPIO_Init+0x2bc>)
 8001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001238:	4b2d      	ldr	r3, [pc, #180]	@ (80012f0 <HAL_GPIO_Init+0x2d0>)
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	492c      	ldr	r1, [pc, #176]	@ (80012f0 <HAL_GPIO_Init+0x2d0>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	608b      	str	r3, [r1, #8]
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001246:	4b2a      	ldr	r3, [pc, #168]	@ (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	43db      	mvns	r3, r3
 800124e:	4928      	ldr	r1, [pc, #160]	@ (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001250:	4013      	ands	r3, r2
 8001252:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001260:	4b23      	ldr	r3, [pc, #140]	@ (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	4922      	ldr	r1, [pc, #136]	@ (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	60cb      	str	r3, [r1, #12]
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	43db      	mvns	r3, r3
 8001276:	491e      	ldr	r1, [pc, #120]	@ (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001278:	4013      	ands	r3, r2
 800127a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001288:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <HAL_GPIO_Init+0x2d0>)
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	4918      	ldr	r1, [pc, #96]	@ (80012f0 <HAL_GPIO_Init+0x2d0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001296:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	43db      	mvns	r3, r3
 800129e:	4914      	ldr	r1, [pc, #80]	@ (80012f0 <HAL_GPIO_Init+0x2d0>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d021      	beq.n	80012f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <HAL_GPIO_Init+0x2d0>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	490e      	ldr	r1, [pc, #56]	@ (80012f0 <HAL_GPIO_Init+0x2d0>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
 80012bc:	e021      	b.n	8001302 <HAL_GPIO_Init+0x2e2>
 80012be:	bf00      	nop
 80012c0:	10320000 	.word	0x10320000
 80012c4:	10310000 	.word	0x10310000
 80012c8:	10220000 	.word	0x10220000
 80012cc:	10210000 	.word	0x10210000
 80012d0:	10120000 	.word	0x10120000
 80012d4:	10110000 	.word	0x10110000
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010000 	.word	0x40010000
 80012e0:	40010800 	.word	0x40010800
 80012e4:	40010c00 	.word	0x40010c00
 80012e8:	40011000 	.word	0x40011000
 80012ec:	40011400 	.word	0x40011400
 80012f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_GPIO_Init+0x304>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	4909      	ldr	r1, [pc, #36]	@ (8001324 <HAL_GPIO_Init+0x304>)
 80012fe:	4013      	ands	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001304:	3301      	adds	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	fa22 f303 	lsr.w	r3, r2, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	f47f ae8e 	bne.w	8001034 <HAL_GPIO_Init+0x14>
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	372c      	adds	r7, #44	@ 0x2c
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	40010400 	.word	0x40010400

08001328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
 8001334:	4613      	mov	r3, r2
 8001336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001338:	787b      	ldrb	r3, [r7, #1]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001344:	e003      	b.n	800134e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	041a      	lsls	r2, r3, #16
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	611a      	str	r2, [r3, #16]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e12b      	b.n	80015c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d106      	bne.n	8001384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fc3e 	bl	8000c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2224      	movs	r2, #36	@ 0x24
 8001388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0201 	bic.w	r2, r2, #1
 800139a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013bc:	f001 f960 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 80013c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4a81      	ldr	r2, [pc, #516]	@ (80015cc <HAL_I2C_Init+0x274>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d807      	bhi.n	80013dc <HAL_I2C_Init+0x84>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4a80      	ldr	r2, [pc, #512]	@ (80015d0 <HAL_I2C_Init+0x278>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	bf94      	ite	ls
 80013d4:	2301      	movls	r3, #1
 80013d6:	2300      	movhi	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	e006      	b.n	80013ea <HAL_I2C_Init+0x92>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4a7d      	ldr	r2, [pc, #500]	@ (80015d4 <HAL_I2C_Init+0x27c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	bf94      	ite	ls
 80013e4:	2301      	movls	r3, #1
 80013e6:	2300      	movhi	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0e7      	b.n	80015c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4a78      	ldr	r2, [pc, #480]	@ (80015d8 <HAL_I2C_Init+0x280>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	0c9b      	lsrs	r3, r3, #18
 80013fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	430a      	orrs	r2, r1
 8001410:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a6a      	ldr	r2, [pc, #424]	@ (80015cc <HAL_I2C_Init+0x274>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d802      	bhi.n	800142c <HAL_I2C_Init+0xd4>
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3301      	adds	r3, #1
 800142a:	e009      	b.n	8001440 <HAL_I2C_Init+0xe8>
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001432:	fb02 f303 	mul.w	r3, r2, r3
 8001436:	4a69      	ldr	r2, [pc, #420]	@ (80015dc <HAL_I2C_Init+0x284>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	3301      	adds	r3, #1
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	430b      	orrs	r3, r1
 8001446:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001452:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	495c      	ldr	r1, [pc, #368]	@ (80015cc <HAL_I2C_Init+0x274>)
 800145c:	428b      	cmp	r3, r1
 800145e:	d819      	bhi.n	8001494 <HAL_I2C_Init+0x13c>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1e59      	subs	r1, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fbb1 f3f3 	udiv	r3, r1, r3
 800146e:	1c59      	adds	r1, r3, #1
 8001470:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001474:	400b      	ands	r3, r1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00a      	beq.n	8001490 <HAL_I2C_Init+0x138>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1e59      	subs	r1, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fbb1 f3f3 	udiv	r3, r1, r3
 8001488:	3301      	adds	r3, #1
 800148a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148e:	e051      	b.n	8001534 <HAL_I2C_Init+0x1dc>
 8001490:	2304      	movs	r3, #4
 8001492:	e04f      	b.n	8001534 <HAL_I2C_Init+0x1dc>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d111      	bne.n	80014c0 <HAL_I2C_Init+0x168>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1e58      	subs	r0, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	440b      	add	r3, r1
 80014aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	e012      	b.n	80014e6 <HAL_I2C_Init+0x18e>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1e58      	subs	r0, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6859      	ldr	r1, [r3, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	0099      	lsls	r1, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_Init+0x196>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e022      	b.n	8001534 <HAL_I2C_Init+0x1dc>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10e      	bne.n	8001514 <HAL_I2C_Init+0x1bc>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1e58      	subs	r0, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6859      	ldr	r1, [r3, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	440b      	add	r3, r1
 8001504:	fbb0 f3f3 	udiv	r3, r0, r3
 8001508:	3301      	adds	r3, #1
 800150a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001512:	e00f      	b.n	8001534 <HAL_I2C_Init+0x1dc>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1e58      	subs	r0, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6859      	ldr	r1, [r3, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	0099      	lsls	r1, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	fbb0 f3f3 	udiv	r3, r0, r3
 800152a:	3301      	adds	r3, #1
 800152c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001530:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	6809      	ldr	r1, [r1, #0]
 8001538:	4313      	orrs	r3, r2
 800153a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69da      	ldr	r2, [r3, #28]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001562:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6911      	ldr	r1, [r2, #16]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68d2      	ldr	r2, [r2, #12]
 800156e:	4311      	orrs	r1, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	430b      	orrs	r3, r1
 8001576:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695a      	ldr	r2, [r3, #20]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2220      	movs	r2, #32
 80015ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	000186a0 	.word	0x000186a0
 80015d0:	001e847f 	.word	0x001e847f
 80015d4:	003d08ff 	.word	0x003d08ff
 80015d8:	431bde83 	.word	0x431bde83
 80015dc:	10624dd3 	.word	0x10624dd3

080015e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	461a      	mov	r2, r3
 80015ec:	460b      	mov	r3, r1
 80015ee:	817b      	strh	r3, [r7, #10]
 80015f0:	4613      	mov	r3, r2
 80015f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff fc26 	bl	8000e44 <HAL_GetTick>
 80015f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b20      	cmp	r3, #32
 8001604:	f040 80e0 	bne.w	80017c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2319      	movs	r3, #25
 800160e:	2201      	movs	r2, #1
 8001610:	4970      	ldr	r1, [pc, #448]	@ (80017d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 fa92 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800161e:	2302      	movs	r3, #2
 8001620:	e0d3      	b.n	80017ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_I2C_Master_Transmit+0x50>
 800162c:	2302      	movs	r3, #2
 800162e:	e0cc      	b.n	80017ca <HAL_I2C_Master_Transmit+0x1ea>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b01      	cmp	r3, #1
 8001644:	d007      	beq.n	8001656 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 0201 	orr.w	r2, r2, #1
 8001654:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001664:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2221      	movs	r2, #33	@ 0x21
 800166a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2210      	movs	r2, #16
 8001672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	893a      	ldrh	r2, [r7, #8]
 8001686:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800168c:	b29a      	uxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4a50      	ldr	r2, [pc, #320]	@ (80017d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001696:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001698:	8979      	ldrh	r1, [r7, #10]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	6a3a      	ldr	r2, [r7, #32]
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f9ca 	bl	8001a38 <I2C_MasterRequestWrite>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e08d      	b.n	80017ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016c4:	e066      	b.n	8001794 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	6a39      	ldr	r1, [r7, #32]
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 fb50 	bl	8001d70 <I2C_WaitOnTXEFlagUntilTimeout>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00d      	beq.n	80016f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d107      	bne.n	80016ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e06b      	b.n	80017ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800170c:	b29b      	uxth	r3, r3
 800170e:	3b01      	subs	r3, #1
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800171a:	3b01      	subs	r3, #1
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b04      	cmp	r3, #4
 800172e:	d11b      	bne.n	8001768 <HAL_I2C_Master_Transmit+0x188>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001734:	2b00      	cmp	r3, #0
 8001736:	d017      	beq.n	8001768 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001752:	b29b      	uxth	r3, r3
 8001754:	3b01      	subs	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001760:	3b01      	subs	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	6a39      	ldr	r1, [r7, #32]
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 fb47 	bl	8001e00 <I2C_WaitOnBTFFlagUntilTimeout>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00d      	beq.n	8001794 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	2b04      	cmp	r3, #4
 800177e:	d107      	bne.n	8001790 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800178e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e01a      	b.n	80017ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001798:	2b00      	cmp	r3, #0
 800179a:	d194      	bne.n	80016c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2220      	movs	r2, #32
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	e000      	b.n	80017ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017c8:	2302      	movs	r3, #2
  }
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	00100002 	.word	0x00100002
 80017d8:	ffff0000 	.word	0xffff0000

080017dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	@ 0x28
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	460b      	mov	r3, r1
 80017ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff fb2a 	bl	8000e44 <HAL_GetTick>
 80017f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b20      	cmp	r3, #32
 8001800:	f040 8111 	bne.w	8001a26 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2319      	movs	r3, #25
 800180a:	2201      	movs	r2, #1
 800180c:	4988      	ldr	r1, [pc, #544]	@ (8001a30 <HAL_I2C_IsDeviceReady+0x254>)
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f994 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800181a:	2302      	movs	r3, #2
 800181c:	e104      	b.n	8001a28 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <HAL_I2C_IsDeviceReady+0x50>
 8001828:	2302      	movs	r3, #2
 800182a:	e0fd      	b.n	8001a28 <HAL_I2C_IsDeviceReady+0x24c>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b01      	cmp	r3, #1
 8001840:	d007      	beq.n	8001852 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0201 	orr.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001860:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2224      	movs	r2, #36	@ 0x24
 8001866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4a70      	ldr	r2, [pc, #448]	@ (8001a34 <HAL_I2C_IsDeviceReady+0x258>)
 8001874:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001884:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2200      	movs	r2, #0
 800188e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f952 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00d      	beq.n	80018ba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018ac:	d103      	bne.n	80018b6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018b4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e0b6      	b.n	8001a28 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018ba:	897b      	ldrh	r3, [r7, #10]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80018c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff fabb 	bl	8000e44 <HAL_GetTick>
 80018ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b02      	cmp	r3, #2
 80018dc:	bf0c      	ite	eq
 80018de:	2301      	moveq	r3, #1
 80018e0:	2300      	movne	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f4:	bf0c      	ite	eq
 80018f6:	2301      	moveq	r3, #1
 80018f8:	2300      	movne	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80018fe:	e025      	b.n	800194c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001900:	f7ff faa0 	bl	8000e44 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d302      	bcc.n	8001916 <HAL_I2C_IsDeviceReady+0x13a>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d103      	bne.n	800191e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	22a0      	movs	r2, #160	@ 0xa0
 800191a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b02      	cmp	r3, #2
 800192a:	bf0c      	ite	eq
 800192c:	2301      	moveq	r3, #1
 800192e:	2300      	movne	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800193e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2ba0      	cmp	r3, #160	@ 0xa0
 8001956:	d005      	beq.n	8001964 <HAL_I2C_IsDeviceReady+0x188>
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <HAL_I2C_IsDeviceReady+0x188>
 800195e:	7dbb      	ldrb	r3, [r7, #22]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0cd      	beq.n	8001900 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2220      	movs	r2, #32
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b02      	cmp	r3, #2
 8001978:	d129      	bne.n	80019ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001988:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2319      	movs	r3, #25
 80019a6:	2201      	movs	r2, #1
 80019a8:	4921      	ldr	r1, [pc, #132]	@ (8001a30 <HAL_I2C_IsDeviceReady+0x254>)
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f8c6 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e036      	b.n	8001a28 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2220      	movs	r2, #32
 80019be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e02c      	b.n	8001a28 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80019e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2319      	movs	r3, #25
 80019ee:	2201      	movs	r2, #1
 80019f0:	490f      	ldr	r1, [pc, #60]	@ (8001a30 <HAL_I2C_IsDeviceReady+0x254>)
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 f8a2 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e012      	b.n	8001a28 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	3301      	adds	r3, #1
 8001a06:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f4ff af32 	bcc.w	8001876 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2220      	movs	r2, #32
 8001a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001a26:	2302      	movs	r3, #2
  }
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	00100002 	.word	0x00100002
 8001a34:	ffff0000 	.word	0xffff0000

08001a38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	460b      	mov	r3, r1
 8001a46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d006      	beq.n	8001a62 <I2C_MasterRequestWrite+0x2a>
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d003      	beq.n	8001a62 <I2C_MasterRequestWrite+0x2a>
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a60:	d108      	bne.n	8001a74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	e00b      	b.n	8001a8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a78:	2b12      	cmp	r3, #18
 8001a7a:	d107      	bne.n	8001a8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f84f 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00d      	beq.n	8001ac0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ab2:	d103      	bne.n	8001abc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e035      	b.n	8001b2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ac8:	d108      	bne.n	8001adc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001aca:	897b      	ldrh	r3, [r7, #10]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ad8:	611a      	str	r2, [r3, #16]
 8001ada:	e01b      	b.n	8001b14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001adc:	897b      	ldrh	r3, [r7, #10]
 8001ade:	11db      	asrs	r3, r3, #7
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f003 0306 	and.w	r3, r3, #6
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f063 030f 	orn	r3, r3, #15
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	490e      	ldr	r1, [pc, #56]	@ (8001b34 <I2C_MasterRequestWrite+0xfc>)
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f898 	bl	8001c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e010      	b.n	8001b2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b0a:	897b      	ldrh	r3, [r7, #10]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	4907      	ldr	r1, [pc, #28]	@ (8001b38 <I2C_MasterRequestWrite+0x100>)
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f888 	bl	8001c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	00010008 	.word	0x00010008
 8001b38:	00010002 	.word	0x00010002

08001b3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b4c:	e048      	b.n	8001be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d044      	beq.n	8001be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b56:	f7ff f975 	bl	8000e44 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d302      	bcc.n	8001b6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d139      	bne.n	8001be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d10d      	bne.n	8001b92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4013      	ands	r3, r2
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	e00c      	b.n	8001bac <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d116      	bne.n	8001be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	f043 0220 	orr.w	r2, r3, #32
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e023      	b.n	8001c28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	0c1b      	lsrs	r3, r3, #16
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d10d      	bne.n	8001c06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	e00c      	b.n	8001c20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	43da      	mvns	r2, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4013      	ands	r3, r2
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bf0c      	ite	eq
 8001c18:	2301      	moveq	r3, #1
 8001c1a:	2300      	movne	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d093      	beq.n	8001b4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c3e:	e071      	b.n	8001d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c4e:	d123      	bne.n	8001c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f043 0204 	orr.w	r2, r3, #4
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e067      	b.n	8001d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9e:	d041      	beq.n	8001d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca0:	f7ff f8d0 	bl	8000e44 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d302      	bcc.n	8001cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d136      	bne.n	8001d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d10c      	bne.n	8001cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	bf14      	ite	ne
 8001cd2:	2301      	movne	r3, #1
 8001cd4:	2300      	moveq	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	e00b      	b.n	8001cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d016      	beq.n	8001d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	f043 0220 	orr.w	r2, r3, #32
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e021      	b.n	8001d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	0c1b      	lsrs	r3, r3, #16
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10c      	bne.n	8001d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	43da      	mvns	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	e00b      	b.n	8001d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4013      	ands	r3, r2
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f47f af6d 	bne.w	8001c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d7c:	e034      	b.n	8001de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 f886 	bl	8001e90 <I2C_IsAcknowledgeFailed>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e034      	b.n	8001df8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d028      	beq.n	8001de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d96:	f7ff f855 	bl	8000e44 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d302      	bcc.n	8001dac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d11d      	bne.n	8001de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db6:	2b80      	cmp	r3, #128	@ 0x80
 8001db8:	d016      	beq.n	8001de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f043 0220 	orr.w	r2, r3, #32
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e007      	b.n	8001df8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df2:	2b80      	cmp	r3, #128	@ 0x80
 8001df4:	d1c3      	bne.n	8001d7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e0c:	e034      	b.n	8001e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f83e 	bl	8001e90 <I2C_IsAcknowledgeFailed>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e034      	b.n	8001e88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d028      	beq.n	8001e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e26:	f7ff f80d 	bl	8000e44 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d302      	bcc.n	8001e3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d11d      	bne.n	8001e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d016      	beq.n	8001e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	f043 0220 	orr.w	r2, r3, #32
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e007      	b.n	8001e88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d1c3      	bne.n	8001e0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ea6:	d11b      	bne.n	8001ee0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001eb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	f043 0204 	orr.w	r2, r3, #4
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e272      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8087 	beq.w	800201a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f0c:	4b92      	ldr	r3, [pc, #584]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d00c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f18:	4b8f      	ldr	r3, [pc, #572]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d112      	bne.n	8001f4a <HAL_RCC_OscConfig+0x5e>
 8001f24:	4b8c      	ldr	r3, [pc, #560]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f30:	d10b      	bne.n	8001f4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f32:	4b89      	ldr	r3, [pc, #548]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d06c      	beq.n	8002018 <HAL_RCC_OscConfig+0x12c>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d168      	bne.n	8002018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e24c      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x76>
 8001f54:	4b80      	ldr	r3, [pc, #512]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a7f      	ldr	r2, [pc, #508]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	e02e      	b.n	8001fc0 <HAL_RCC_OscConfig+0xd4>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x98>
 8001f6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a7a      	ldr	r2, [pc, #488]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b78      	ldr	r3, [pc, #480]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a77      	ldr	r2, [pc, #476]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e01d      	b.n	8001fc0 <HAL_RCC_OscConfig+0xd4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xbc>
 8001f8e:	4b72      	ldr	r3, [pc, #456]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a71      	ldr	r2, [pc, #452]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0xd4>
 8001fa8:	4b6b      	ldr	r3, [pc, #428]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a6a      	ldr	r2, [pc, #424]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	4b68      	ldr	r3, [pc, #416]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a67      	ldr	r2, [pc, #412]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d013      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7fe ff3c 	bl	8000e44 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7fe ff38 	bl	8000e44 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	@ 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e200      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xe4>
 8001fee:	e014      	b.n	800201a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7fe ff28 	bl	8000e44 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7fe ff24 	bl	8000e44 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	@ 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e1ec      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	4b53      	ldr	r3, [pc, #332]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x10c>
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d063      	beq.n	80020ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002026:	4b4c      	ldr	r3, [pc, #304]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002032:	4b49      	ldr	r3, [pc, #292]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b08      	cmp	r3, #8
 800203c:	d11c      	bne.n	8002078 <HAL_RCC_OscConfig+0x18c>
 800203e:	4b46      	ldr	r3, [pc, #280]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d116      	bne.n	8002078 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	4b43      	ldr	r3, [pc, #268]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_RCC_OscConfig+0x176>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d001      	beq.n	8002062 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e1c0      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002062:	4b3d      	ldr	r3, [pc, #244]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4939      	ldr	r1, [pc, #228]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	e03a      	b.n	80020ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002080:	4b36      	ldr	r3, [pc, #216]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7fe fedd 	bl	8000e44 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208e:	f7fe fed9 	bl	8000e44 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e1a1      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4927      	ldr	r1, [pc, #156]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	600b      	str	r3, [r1, #0]
 80020c0:	e015      	b.n	80020ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c2:	4b26      	ldr	r3, [pc, #152]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7fe febc 	bl	8000e44 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d0:	f7fe feb8 	bl	8000e44 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e180      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d03a      	beq.n	8002170 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d019      	beq.n	8002136 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002102:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <HAL_RCC_OscConfig+0x274>)
 8002104:	2201      	movs	r2, #1
 8002106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7fe fe9c 	bl	8000e44 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7fe fe98 	bl	8000e44 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e160      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002122:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800212e:	2001      	movs	r0, #1
 8002130:	f000 faba 	bl	80026a8 <RCC_Delay>
 8002134:	e01c      	b.n	8002170 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002136:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <HAL_RCC_OscConfig+0x274>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213c:	f7fe fe82 	bl	8000e44 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002142:	e00f      	b.n	8002164 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002144:	f7fe fe7e 	bl	8000e44 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d908      	bls.n	8002164 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e146      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000
 800215c:	42420000 	.word	0x42420000
 8002160:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002164:	4b92      	ldr	r3, [pc, #584]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1e9      	bne.n	8002144 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80a6 	beq.w	80022ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002182:	4b8b      	ldr	r3, [pc, #556]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10d      	bne.n	80021aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	4b88      	ldr	r3, [pc, #544]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	4a87      	ldr	r2, [pc, #540]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002198:	61d3      	str	r3, [r2, #28]
 800219a:	4b85      	ldr	r3, [pc, #532]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a6:	2301      	movs	r3, #1
 80021a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021aa:	4b82      	ldr	r3, [pc, #520]	@ (80023b4 <HAL_RCC_OscConfig+0x4c8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d118      	bne.n	80021e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b6:	4b7f      	ldr	r3, [pc, #508]	@ (80023b4 <HAL_RCC_OscConfig+0x4c8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7e      	ldr	r2, [pc, #504]	@ (80023b4 <HAL_RCC_OscConfig+0x4c8>)
 80021bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c2:	f7fe fe3f 	bl	8000e44 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ca:	f7fe fe3b 	bl	8000e44 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b64      	cmp	r3, #100	@ 0x64
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e103      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	4b75      	ldr	r3, [pc, #468]	@ (80023b4 <HAL_RCC_OscConfig+0x4c8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x312>
 80021f0:	4b6f      	ldr	r3, [pc, #444]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4a6e      	ldr	r2, [pc, #440]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6213      	str	r3, [r2, #32]
 80021fc:	e02d      	b.n	800225a <HAL_RCC_OscConfig+0x36e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0x334>
 8002206:	4b6a      	ldr	r3, [pc, #424]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4a69      	ldr	r2, [pc, #420]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6213      	str	r3, [r2, #32]
 8002212:	4b67      	ldr	r3, [pc, #412]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a66      	ldr	r2, [pc, #408]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	f023 0304 	bic.w	r3, r3, #4
 800221c:	6213      	str	r3, [r2, #32]
 800221e:	e01c      	b.n	800225a <HAL_RCC_OscConfig+0x36e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d10c      	bne.n	8002242 <HAL_RCC_OscConfig+0x356>
 8002228:	4b61      	ldr	r3, [pc, #388]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4a60      	ldr	r2, [pc, #384]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	6213      	str	r3, [r2, #32]
 8002234:	4b5e      	ldr	r3, [pc, #376]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a5d      	ldr	r2, [pc, #372]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6213      	str	r3, [r2, #32]
 8002240:	e00b      	b.n	800225a <HAL_RCC_OscConfig+0x36e>
 8002242:	4b5b      	ldr	r3, [pc, #364]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	4a5a      	ldr	r2, [pc, #360]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6213      	str	r3, [r2, #32]
 800224e:	4b58      	ldr	r3, [pc, #352]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4a57      	ldr	r2, [pc, #348]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	f023 0304 	bic.w	r3, r3, #4
 8002258:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d015      	beq.n	800228e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002262:	f7fe fdef 	bl	8000e44 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe fdeb 	bl	8000e44 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e0b1      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002280:	4b4b      	ldr	r3, [pc, #300]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0ee      	beq.n	800226a <HAL_RCC_OscConfig+0x37e>
 800228c:	e014      	b.n	80022b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7fe fdd9 	bl	8000e44 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7fe fdd5 	bl	8000e44 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e09b      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ac:	4b40      	ldr	r3, [pc, #256]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1ee      	bne.n	8002296 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d105      	bne.n	80022ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022be:	4b3c      	ldr	r3, [pc, #240]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	4a3b      	ldr	r2, [pc, #236]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8087 	beq.w	80023e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d4:	4b36      	ldr	r3, [pc, #216]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d061      	beq.n	80023a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d146      	bne.n	8002376 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e8:	4b33      	ldr	r3, [pc, #204]	@ (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7fe fda9 	bl	8000e44 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f6:	f7fe fda5 	bl	8000e44 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e06d      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002308:	4b29      	ldr	r3, [pc, #164]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800231c:	d108      	bne.n	8002330 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800231e:	4b24      	ldr	r3, [pc, #144]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	4921      	ldr	r1, [pc, #132]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002330:	4b1f      	ldr	r3, [pc, #124]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a19      	ldr	r1, [r3, #32]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	430b      	orrs	r3, r1
 8002342:	491b      	ldr	r1, [pc, #108]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002348:	4b1b      	ldr	r3, [pc, #108]	@ (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7fe fd79 	bl	8000e44 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002356:	f7fe fd75 	bl	8000e44 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e03d      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002368:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x46a>
 8002374:	e035      	b.n	80023e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe fd62 	bl	8000e44 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fd5e 	bl	8000e44 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e026      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x498>
 80023a2:	e01e      	b.n	80023e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e019      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40007000 	.word	0x40007000
 80023b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <HAL_RCC_OscConfig+0x500>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000

080023f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0d0      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002404:	4b6a      	ldr	r3, [pc, #424]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d910      	bls.n	8002434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b67      	ldr	r3, [pc, #412]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 0207 	bic.w	r2, r3, #7
 800241a:	4965      	ldr	r1, [pc, #404]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b63      	ldr	r3, [pc, #396]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0b8      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d020      	beq.n	8002482 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800244c:	4b59      	ldr	r3, [pc, #356]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4a58      	ldr	r2, [pc, #352]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002456:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002464:	4b53      	ldr	r3, [pc, #332]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4a52      	ldr	r2, [pc, #328]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800246e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b50      	ldr	r3, [pc, #320]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	494d      	ldr	r1, [pc, #308]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d040      	beq.n	8002510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b47      	ldr	r3, [pc, #284]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d115      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	4b41      	ldr	r3, [pc, #260]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e073      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024be:	4b3d      	ldr	r3, [pc, #244]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e06b      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ce:	4b39      	ldr	r3, [pc, #228]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f023 0203 	bic.w	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4936      	ldr	r1, [pc, #216]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e0:	f7fe fcb0 	bl	8000e44 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e8:	f7fe fcac 	bl	8000e44 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e053      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	4b2d      	ldr	r3, [pc, #180]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 020c 	and.w	r2, r3, #12
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	429a      	cmp	r2, r3
 800250e:	d1eb      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002510:	4b27      	ldr	r3, [pc, #156]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d210      	bcs.n	8002540 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b24      	ldr	r3, [pc, #144]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0207 	bic.w	r2, r3, #7
 8002526:	4922      	ldr	r1, [pc, #136]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e032      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800254c:	4b19      	ldr	r3, [pc, #100]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4916      	ldr	r1, [pc, #88]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800256a:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	490e      	ldr	r1, [pc, #56]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800257e:	f000 f821 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8002582:	4602      	mov	r2, r0
 8002584:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	490a      	ldr	r1, [pc, #40]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002590:	5ccb      	ldrb	r3, [r1, r3]
 8002592:	fa22 f303 	lsr.w	r3, r2, r3
 8002596:	4a09      	ldr	r2, [pc, #36]	@ (80025bc <HAL_RCC_ClockConfig+0x1cc>)
 8002598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <HAL_RCC_ClockConfig+0x1d0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fc0e 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40022000 	.word	0x40022000
 80025b4:	40021000 	.word	0x40021000
 80025b8:	08003004 	.word	0x08003004
 80025bc:	20000000 	.word	0x20000000
 80025c0:	20000004 	.word	0x20000004

080025c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025de:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x94>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d002      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x30>
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d003      	beq.n	80025fa <HAL_RCC_GetSysClockFreq+0x36>
 80025f2:	e027      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f4:	4b19      	ldr	r3, [pc, #100]	@ (800265c <HAL_RCC_GetSysClockFreq+0x98>)
 80025f6:	613b      	str	r3, [r7, #16]
      break;
 80025f8:	e027      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	0c9b      	lsrs	r3, r3, #18
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	4a17      	ldr	r2, [pc, #92]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002604:	5cd3      	ldrb	r3, [r2, r3]
 8002606:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d010      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002612:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x94>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	0c5b      	lsrs	r3, r3, #17
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	4a11      	ldr	r2, [pc, #68]	@ (8002664 <HAL_RCC_GetSysClockFreq+0xa0>)
 800261e:	5cd3      	ldrb	r3, [r2, r3]
 8002620:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a0d      	ldr	r2, [pc, #52]	@ (800265c <HAL_RCC_GetSysClockFreq+0x98>)
 8002626:	fb03 f202 	mul.w	r2, r3, r2
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	e004      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a0c      	ldr	r2, [pc, #48]	@ (8002668 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	613b      	str	r3, [r7, #16]
      break;
 8002642:	e002      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_RCC_GetSysClockFreq+0x98>)
 8002646:	613b      	str	r3, [r7, #16]
      break;
 8002648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264a:	693b      	ldr	r3, [r7, #16]
}
 800264c:	4618      	mov	r0, r3
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	007a1200 	.word	0x007a1200
 8002660:	0800301c 	.word	0x0800301c
 8002664:	0800302c 	.word	0x0800302c
 8002668:	003d0900 	.word	0x003d0900

0800266c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002670:	4b02      	ldr	r3, [pc, #8]	@ (800267c <HAL_RCC_GetHCLKFreq+0x10>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	20000000 	.word	0x20000000

08002680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002684:	f7ff fff2 	bl	800266c <HAL_RCC_GetHCLKFreq>
 8002688:	4602      	mov	r2, r0
 800268a:	4b05      	ldr	r3, [pc, #20]	@ (80026a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	4903      	ldr	r1, [pc, #12]	@ (80026a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	08003014 	.word	0x08003014

080026a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026b0:	4b0a      	ldr	r3, [pc, #40]	@ (80026dc <RCC_Delay+0x34>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <RCC_Delay+0x38>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	0a5b      	lsrs	r3, r3, #9
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026c4:	bf00      	nop
  }
  while (Delay --);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	60fa      	str	r2, [r7, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f9      	bne.n	80026c4 <RCC_Delay+0x1c>
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	20000000 	.word	0x20000000
 80026e0:	10624dd3 	.word	0x10624dd3

080026e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d020      	beq.n	8002748 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01b      	beq.n	8002748 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0202 	mvn.w	r2, #2
 8002718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8da 	bl	80028e8 <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f8cd 	bl	80028d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f8dc 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	d020      	beq.n	8002794 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01b      	beq.n	8002794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0204 	mvn.w	r2, #4
 8002764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2202      	movs	r2, #2
 800276a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8b4 	bl	80028e8 <HAL_TIM_IC_CaptureCallback>
 8002780:	e005      	b.n	800278e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8a7 	bl	80028d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f8b6 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d020      	beq.n	80027e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01b      	beq.n	80027e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0208 	mvn.w	r2, #8
 80027b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2204      	movs	r2, #4
 80027b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f88e 	bl	80028e8 <HAL_TIM_IC_CaptureCallback>
 80027cc:	e005      	b.n	80027da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f881 	bl	80028d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f890 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d020      	beq.n	800282c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01b      	beq.n	800282c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0210 	mvn.w	r2, #16
 80027fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2208      	movs	r2, #8
 8002802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f868 	bl	80028e8 <HAL_TIM_IC_CaptureCallback>
 8002818:	e005      	b.n	8002826 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f85b 	bl	80028d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f86a 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00c      	beq.n	8002850 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d007      	beq.n	8002850 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0201 	mvn.w	r2, #1
 8002848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f83a 	bl	80028c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00c      	beq.n	8002874 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002860:	2b00      	cmp	r3, #0
 8002862:	d007      	beq.n	8002874 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800286c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f85e 	bl	8002930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00c      	beq.n	8002898 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f83a 	bl	800290c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00c      	beq.n	80028bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0220 	mvn.w	r2, #32
 80028b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f831 	bl	800291e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <memset>:
 8002942:	4603      	mov	r3, r0
 8002944:	4402      	add	r2, r0
 8002946:	4293      	cmp	r3, r2
 8002948:	d100      	bne.n	800294c <memset+0xa>
 800294a:	4770      	bx	lr
 800294c:	f803 1b01 	strb.w	r1, [r3], #1
 8002950:	e7f9      	b.n	8002946 <memset+0x4>
	...

08002954 <__libc_init_array>:
 8002954:	b570      	push	{r4, r5, r6, lr}
 8002956:	2600      	movs	r6, #0
 8002958:	4d0c      	ldr	r5, [pc, #48]	@ (800298c <__libc_init_array+0x38>)
 800295a:	4c0d      	ldr	r4, [pc, #52]	@ (8002990 <__libc_init_array+0x3c>)
 800295c:	1b64      	subs	r4, r4, r5
 800295e:	10a4      	asrs	r4, r4, #2
 8002960:	42a6      	cmp	r6, r4
 8002962:	d109      	bne.n	8002978 <__libc_init_array+0x24>
 8002964:	f000 f81a 	bl	800299c <_init>
 8002968:	2600      	movs	r6, #0
 800296a:	4d0a      	ldr	r5, [pc, #40]	@ (8002994 <__libc_init_array+0x40>)
 800296c:	4c0a      	ldr	r4, [pc, #40]	@ (8002998 <__libc_init_array+0x44>)
 800296e:	1b64      	subs	r4, r4, r5
 8002970:	10a4      	asrs	r4, r4, #2
 8002972:	42a6      	cmp	r6, r4
 8002974:	d105      	bne.n	8002982 <__libc_init_array+0x2e>
 8002976:	bd70      	pop	{r4, r5, r6, pc}
 8002978:	f855 3b04 	ldr.w	r3, [r5], #4
 800297c:	4798      	blx	r3
 800297e:	3601      	adds	r6, #1
 8002980:	e7ee      	b.n	8002960 <__libc_init_array+0xc>
 8002982:	f855 3b04 	ldr.w	r3, [r5], #4
 8002986:	4798      	blx	r3
 8002988:	3601      	adds	r6, #1
 800298a:	e7f2      	b.n	8002972 <__libc_init_array+0x1e>
 800298c:	08003030 	.word	0x08003030
 8002990:	08003030 	.word	0x08003030
 8002994:	08003030 	.word	0x08003030
 8002998:	08003034 	.word	0x08003034

0800299c <_init>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	bf00      	nop
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr

080029a8 <_fini>:
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	bf00      	nop
 80029ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ae:	bc08      	pop	{r3}
 80029b0:	469e      	mov	lr, r3
 80029b2:	4770      	bx	lr
