
two.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002928  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  08002a34  08002a34  00003a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b0  080030b0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080030b0  080030b0  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b0  080030b0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b0  080030b0  000040b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030b4  080030b4  000040b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  2000000c  080030c4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  080030c4  00005550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da67  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002483  00000000  00000000  00012a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00014f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd0  00000000  00000000  00015e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c7c  00000000  00000000  00016a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011045  00000000  00000000  0002e684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d18d  00000000  00000000  0003f6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc856  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f8c  00000000  00000000  000cc89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d0828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a1c 	.word	0x08002a1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002a1c 	.word	0x08002a1c

0800014c <__aeabi_f2iz>:
 800014c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000150:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000154:	d30f      	bcc.n	8000176 <__aeabi_f2iz+0x2a>
 8000156:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800015a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800015e:	d90d      	bls.n	800017c <__aeabi_f2iz+0x30>
 8000160:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000164:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000168:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800016c:	fa23 f002 	lsr.w	r0, r3, r2
 8000170:	bf18      	it	ne
 8000172:	4240      	negne	r0, r0
 8000174:	4770      	bx	lr
 8000176:	f04f 0000 	mov.w	r0, #0
 800017a:	4770      	bx	lr
 800017c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000180:	d101      	bne.n	8000186 <__aeabi_f2iz+0x3a>
 8000182:	0242      	lsls	r2, r0, #9
 8000184:	d105      	bne.n	8000192 <__aeabi_f2iz+0x46>
 8000186:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800018a:	bf08      	it	eq
 800018c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000190:	4770      	bx	lr
 8000192:	f04f 0000 	mov.w	r0, #0
 8000196:	4770      	bx	lr

08000198 <isTemperSensorInit>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);	
}
#else

uint8_t isTemperSensorInit(){
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	     return m_init;
 800019c:	4b02      	ldr	r3, [pc, #8]	@ (80001a8 <isTemperSensorInit+0x10>)
 800019e:	781b      	ldrb	r3, [r3, #0]
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000038 	.word	0x20000038

080001ac <isBusy>:

uint8_t isBusy(){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	return isBusyLine();
 80001b0:	f000 f80e 	bl	80001d0 <isBusyLine>
 80001b4:	4603      	mov	r3, r0
	//return m_busy;
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	bd80      	pop	{r7, pc}
	...

080001bc <getCurrentTemper>:
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
}


float getCurrentTemper(){
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
     return temperSensor.Temperature;
 80001c0:	4b02      	ldr	r3, [pc, #8]	@ (80001cc <getCurrentTemper+0x10>)
 80001c2:	689b      	ldr	r3, [r3, #8]
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	20000028 	.word	0x20000028

080001d0 <isBusyLine>:
#include "onewire.h"
#include "ds18b20Config.h"
//#include "tim.h"

static uint8_t m_busy_line = 0;
uint8_t isBusyLine(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	return m_busy_line;
 80001d4:	4b02      	ldr	r3, [pc, #8]	@ (80001e0 <isBusyLine+0x10>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
}
 80001d8:	4618      	mov	r0, r3
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	20000039 	.word	0x20000039

080001e4 <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d005      	beq.n	80001fe <SSD1306_InvertDisplay+0x1a>
 80001f2:	22a7      	movs	r2, #167	@ 0xa7
 80001f4:	2100      	movs	r1, #0
 80001f6:	2078      	movs	r0, #120	@ 0x78
 80001f8:	f000 fa5e 	bl	80006b8 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 80001fc:	e004      	b.n	8000208 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 80001fe:	22a6      	movs	r2, #166	@ 0xa6
 8000200:	2100      	movs	r1, #0
 8000202:	2078      	movs	r0, #120	@ 0x78
 8000204:	f000 fa58 	bl	80006b8 <ssd1306_I2C_Write>
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <SSD1306_DrawBitmap>:


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0
 8000216:	60ba      	str	r2, [r7, #8]
 8000218:	461a      	mov	r2, r3
 800021a:	4603      	mov	r3, r0
 800021c:	81fb      	strh	r3, [r7, #14]
 800021e:	460b      	mov	r3, r1
 8000220:	81bb      	strh	r3, [r7, #12]
 8000222:	4613      	mov	r3, r2
 8000224:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800022a:	3307      	adds	r3, #7
 800022c:	2b00      	cmp	r3, #0
 800022e:	da00      	bge.n	8000232 <SSD1306_DrawBitmap+0x22>
 8000230:	3307      	adds	r3, #7
 8000232:	10db      	asrs	r3, r3, #3
 8000234:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 800023a:	2300      	movs	r3, #0
 800023c:	82bb      	strh	r3, [r7, #20]
 800023e:	e044      	b.n	80002ca <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000240:	2300      	movs	r3, #0
 8000242:	827b      	strh	r3, [r7, #18]
 8000244:	e02f      	b.n	80002a6 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000246:	8a7b      	ldrh	r3, [r7, #18]
 8000248:	f003 0307 	and.w	r3, r3, #7
 800024c:	2b00      	cmp	r3, #0
 800024e:	d003      	beq.n	8000258 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000250:	7dfb      	ldrb	r3, [r7, #23]
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	75fb      	strb	r3, [r7, #23]
 8000256:	e012      	b.n	800027e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000258:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800025c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000260:	fb03 f202 	mul.w	r2, r3, r2
 8000264:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000268:	2b00      	cmp	r3, #0
 800026a:	da00      	bge.n	800026e <SSD1306_DrawBitmap+0x5e>
 800026c:	3307      	adds	r3, #7
 800026e:	10db      	asrs	r3, r3, #3
 8000270:	b21b      	sxth	r3, r3
 8000272:	4413      	add	r3, r2
 8000274:	461a      	mov	r2, r3
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	4413      	add	r3, r2
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800027e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000282:	2b00      	cmp	r3, #0
 8000284:	da09      	bge.n	800029a <SSD1306_DrawBitmap+0x8a>
 8000286:	89fa      	ldrh	r2, [r7, #14]
 8000288:	8a7b      	ldrh	r3, [r7, #18]
 800028a:	4413      	add	r3, r2
 800028c:	b29b      	uxth	r3, r3
 800028e:	89b9      	ldrh	r1, [r7, #12]
 8000290:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000292:	b2d2      	uxtb	r2, r2
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f92d 	bl	80004f4 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800029a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800029e:	b29b      	uxth	r3, r3
 80002a0:	3301      	adds	r3, #1
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	827b      	strh	r3, [r7, #18]
 80002a6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80002aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	dbc9      	blt.n	8000246 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80002b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	3301      	adds	r3, #1
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	82bb      	strh	r3, [r7, #20]
 80002be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	3301      	adds	r3, #1
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	81bb      	strh	r3, [r7, #12]
 80002ca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80002ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	dbb4      	blt.n	8000240 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	3718      	adds	r7, #24
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80002e6:	f000 f96d 	bl	80005c4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&H_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80002ea:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80002ee:	2201      	movs	r2, #1
 80002f0:	2178      	movs	r1, #120	@ 0x78
 80002f2:	485b      	ldr	r0, [pc, #364]	@ (8000460 <SSD1306_Init+0x180>)
 80002f4:	f001 fab2 	bl	800185c <HAL_I2C_IsDeviceReady>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	e0a9      	b.n	8000456 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000302:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000306:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000308:	e002      	b.n	8000310 <SSD1306_Init+0x30>
		p--;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3b01      	subs	r3, #1
 800030e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d1f9      	bne.n	800030a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000316:	22ae      	movs	r2, #174	@ 0xae
 8000318:	2100      	movs	r1, #0
 800031a:	2078      	movs	r0, #120	@ 0x78
 800031c:	f000 f9cc 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000320:	2220      	movs	r2, #32
 8000322:	2100      	movs	r1, #0
 8000324:	2078      	movs	r0, #120	@ 0x78
 8000326:	f000 f9c7 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800032a:	2210      	movs	r2, #16
 800032c:	2100      	movs	r1, #0
 800032e:	2078      	movs	r0, #120	@ 0x78
 8000330:	f000 f9c2 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000334:	22b0      	movs	r2, #176	@ 0xb0
 8000336:	2100      	movs	r1, #0
 8000338:	2078      	movs	r0, #120	@ 0x78
 800033a:	f000 f9bd 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800033e:	22c8      	movs	r2, #200	@ 0xc8
 8000340:	2100      	movs	r1, #0
 8000342:	2078      	movs	r0, #120	@ 0x78
 8000344:	f000 f9b8 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000348:	2200      	movs	r2, #0
 800034a:	2100      	movs	r1, #0
 800034c:	2078      	movs	r0, #120	@ 0x78
 800034e:	f000 f9b3 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000352:	2210      	movs	r2, #16
 8000354:	2100      	movs	r1, #0
 8000356:	2078      	movs	r0, #120	@ 0x78
 8000358:	f000 f9ae 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800035c:	2240      	movs	r2, #64	@ 0x40
 800035e:	2100      	movs	r1, #0
 8000360:	2078      	movs	r0, #120	@ 0x78
 8000362:	f000 f9a9 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000366:	2281      	movs	r2, #129	@ 0x81
 8000368:	2100      	movs	r1, #0
 800036a:	2078      	movs	r0, #120	@ 0x78
 800036c:	f000 f9a4 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000370:	22ff      	movs	r2, #255	@ 0xff
 8000372:	2100      	movs	r1, #0
 8000374:	2078      	movs	r0, #120	@ 0x78
 8000376:	f000 f99f 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800037a:	22a1      	movs	r2, #161	@ 0xa1
 800037c:	2100      	movs	r1, #0
 800037e:	2078      	movs	r0, #120	@ 0x78
 8000380:	f000 f99a 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000384:	22a6      	movs	r2, #166	@ 0xa6
 8000386:	2100      	movs	r1, #0
 8000388:	2078      	movs	r0, #120	@ 0x78
 800038a:	f000 f995 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800038e:	22a8      	movs	r2, #168	@ 0xa8
 8000390:	2100      	movs	r1, #0
 8000392:	2078      	movs	r0, #120	@ 0x78
 8000394:	f000 f990 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000398:	223f      	movs	r2, #63	@ 0x3f
 800039a:	2100      	movs	r1, #0
 800039c:	2078      	movs	r0, #120	@ 0x78
 800039e:	f000 f98b 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80003a2:	22a4      	movs	r2, #164	@ 0xa4
 80003a4:	2100      	movs	r1, #0
 80003a6:	2078      	movs	r0, #120	@ 0x78
 80003a8:	f000 f986 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80003ac:	22d3      	movs	r2, #211	@ 0xd3
 80003ae:	2100      	movs	r1, #0
 80003b0:	2078      	movs	r0, #120	@ 0x78
 80003b2:	f000 f981 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80003b6:	2200      	movs	r2, #0
 80003b8:	2100      	movs	r1, #0
 80003ba:	2078      	movs	r0, #120	@ 0x78
 80003bc:	f000 f97c 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80003c0:	22d5      	movs	r2, #213	@ 0xd5
 80003c2:	2100      	movs	r1, #0
 80003c4:	2078      	movs	r0, #120	@ 0x78
 80003c6:	f000 f977 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80003ca:	22f0      	movs	r2, #240	@ 0xf0
 80003cc:	2100      	movs	r1, #0
 80003ce:	2078      	movs	r0, #120	@ 0x78
 80003d0:	f000 f972 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80003d4:	22d9      	movs	r2, #217	@ 0xd9
 80003d6:	2100      	movs	r1, #0
 80003d8:	2078      	movs	r0, #120	@ 0x78
 80003da:	f000 f96d 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80003de:	2222      	movs	r2, #34	@ 0x22
 80003e0:	2100      	movs	r1, #0
 80003e2:	2078      	movs	r0, #120	@ 0x78
 80003e4:	f000 f968 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80003e8:	22da      	movs	r2, #218	@ 0xda
 80003ea:	2100      	movs	r1, #0
 80003ec:	2078      	movs	r0, #120	@ 0x78
 80003ee:	f000 f963 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80003f2:	2212      	movs	r2, #18
 80003f4:	2100      	movs	r1, #0
 80003f6:	2078      	movs	r0, #120	@ 0x78
 80003f8:	f000 f95e 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80003fc:	22db      	movs	r2, #219	@ 0xdb
 80003fe:	2100      	movs	r1, #0
 8000400:	2078      	movs	r0, #120	@ 0x78
 8000402:	f000 f959 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000406:	2220      	movs	r2, #32
 8000408:	2100      	movs	r1, #0
 800040a:	2078      	movs	r0, #120	@ 0x78
 800040c:	f000 f954 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000410:	228d      	movs	r2, #141	@ 0x8d
 8000412:	2100      	movs	r1, #0
 8000414:	2078      	movs	r0, #120	@ 0x78
 8000416:	f000 f94f 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800041a:	2214      	movs	r2, #20
 800041c:	2100      	movs	r1, #0
 800041e:	2078      	movs	r0, #120	@ 0x78
 8000420:	f000 f94a 	bl	80006b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000424:	22af      	movs	r2, #175	@ 0xaf
 8000426:	2100      	movs	r1, #0
 8000428:	2078      	movs	r0, #120	@ 0x78
 800042a:	f000 f945 	bl	80006b8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800042e:	222e      	movs	r2, #46	@ 0x2e
 8000430:	2100      	movs	r1, #0
 8000432:	2078      	movs	r0, #120	@ 0x78
 8000434:	f000 f940 	bl	80006b8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000438:	2000      	movs	r0, #0
 800043a:	f000 f843 	bl	80004c4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800043e:	f000 f813 	bl	8000468 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000442:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <SSD1306_Init+0x184>)
 8000444:	2200      	movs	r2, #0
 8000446:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <SSD1306_Init+0x184>)
 800044a:	2200      	movs	r2, #0
 800044c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800044e:	4b05      	ldr	r3, [pc, #20]	@ (8000464 <SSD1306_Init+0x184>)
 8000450:	2201      	movs	r2, #1
 8000452:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000454:	2301      	movs	r3, #1
}
 8000456:	4618      	mov	r0, r3
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000464 	.word	0x20000464
 8000464:	2000043c 	.word	0x2000043c

08000468 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800046e:	2300      	movs	r3, #0
 8000470:	71fb      	strb	r3, [r7, #7]
 8000472:	e01d      	b.n	80004b0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	3b50      	subs	r3, #80	@ 0x50
 8000478:	b2db      	uxtb	r3, r3
 800047a:	461a      	mov	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	2078      	movs	r0, #120	@ 0x78
 8000480:	f000 f91a 	bl	80006b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000484:	2200      	movs	r2, #0
 8000486:	2100      	movs	r1, #0
 8000488:	2078      	movs	r0, #120	@ 0x78
 800048a:	f000 f915 	bl	80006b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800048e:	2210      	movs	r2, #16
 8000490:	2100      	movs	r1, #0
 8000492:	2078      	movs	r0, #120	@ 0x78
 8000494:	f000 f910 	bl	80006b8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	01db      	lsls	r3, r3, #7
 800049c:	4a08      	ldr	r2, [pc, #32]	@ (80004c0 <SSD1306_UpdateScreen+0x58>)
 800049e:	441a      	add	r2, r3
 80004a0:	2380      	movs	r3, #128	@ 0x80
 80004a2:	2140      	movs	r1, #64	@ 0x40
 80004a4:	2078      	movs	r0, #120	@ 0x78
 80004a6:	f000 f8a1 	bl	80005ec <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	3301      	adds	r3, #1
 80004ae:	71fb      	strb	r3, [r7, #7]
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	2b07      	cmp	r3, #7
 80004b4:	d9de      	bls.n	8000474 <SSD1306_UpdateScreen+0xc>
	}
}
 80004b6:	bf00      	nop
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2000003c 	.word	0x2000003c

080004c4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d101      	bne.n	80004d8 <SSD1306_Fill+0x14>
 80004d4:	2300      	movs	r3, #0
 80004d6:	e000      	b.n	80004da <SSD1306_Fill+0x16>
 80004d8:	23ff      	movs	r3, #255	@ 0xff
 80004da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004de:	4619      	mov	r1, r3
 80004e0:	4803      	ldr	r0, [pc, #12]	@ (80004f0 <SSD1306_Fill+0x2c>)
 80004e2:	f002 fa6e 	bl	80029c2 <memset>
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	2000003c 	.word	0x2000003c

080004f4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	80fb      	strh	r3, [r7, #6]
 80004fe:	460b      	mov	r3, r1
 8000500:	80bb      	strh	r3, [r7, #4]
 8000502:	4613      	mov	r3, r2
 8000504:	70fb      	strb	r3, [r7, #3]
	if (
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	2b7f      	cmp	r3, #127	@ 0x7f
 800050a:	d848      	bhi.n	800059e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800050c:	88bb      	ldrh	r3, [r7, #4]
 800050e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000510:	d845      	bhi.n	800059e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000512:	4b25      	ldr	r3, [pc, #148]	@ (80005a8 <SSD1306_DrawPixel+0xb4>)
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d006      	beq.n	8000528 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800051a:	78fb      	ldrb	r3, [r7, #3]
 800051c:	2b00      	cmp	r3, #0
 800051e:	bf0c      	ite	eq
 8000520:	2301      	moveq	r3, #1
 8000522:	2300      	movne	r3, #0
 8000524:	b2db      	uxtb	r3, r3
 8000526:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000528:	78fb      	ldrb	r3, [r7, #3]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d11a      	bne.n	8000564 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800052e:	88fa      	ldrh	r2, [r7, #6]
 8000530:	88bb      	ldrh	r3, [r7, #4]
 8000532:	08db      	lsrs	r3, r3, #3
 8000534:	b298      	uxth	r0, r3
 8000536:	4603      	mov	r3, r0
 8000538:	01db      	lsls	r3, r3, #7
 800053a:	4413      	add	r3, r2
 800053c:	4a1b      	ldr	r2, [pc, #108]	@ (80005ac <SSD1306_DrawPixel+0xb8>)
 800053e:	5cd3      	ldrb	r3, [r2, r3]
 8000540:	b25a      	sxtb	r2, r3
 8000542:	88bb      	ldrh	r3, [r7, #4]
 8000544:	f003 0307 	and.w	r3, r3, #7
 8000548:	2101      	movs	r1, #1
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	b25b      	sxtb	r3, r3
 8000550:	4313      	orrs	r3, r2
 8000552:	b259      	sxtb	r1, r3
 8000554:	88fa      	ldrh	r2, [r7, #6]
 8000556:	4603      	mov	r3, r0
 8000558:	01db      	lsls	r3, r3, #7
 800055a:	4413      	add	r3, r2
 800055c:	b2c9      	uxtb	r1, r1
 800055e:	4a13      	ldr	r2, [pc, #76]	@ (80005ac <SSD1306_DrawPixel+0xb8>)
 8000560:	54d1      	strb	r1, [r2, r3]
 8000562:	e01d      	b.n	80005a0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000564:	88fa      	ldrh	r2, [r7, #6]
 8000566:	88bb      	ldrh	r3, [r7, #4]
 8000568:	08db      	lsrs	r3, r3, #3
 800056a:	b298      	uxth	r0, r3
 800056c:	4603      	mov	r3, r0
 800056e:	01db      	lsls	r3, r3, #7
 8000570:	4413      	add	r3, r2
 8000572:	4a0e      	ldr	r2, [pc, #56]	@ (80005ac <SSD1306_DrawPixel+0xb8>)
 8000574:	5cd3      	ldrb	r3, [r2, r3]
 8000576:	b25a      	sxtb	r2, r3
 8000578:	88bb      	ldrh	r3, [r7, #4]
 800057a:	f003 0307 	and.w	r3, r3, #7
 800057e:	2101      	movs	r1, #1
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	b25b      	sxtb	r3, r3
 8000586:	43db      	mvns	r3, r3
 8000588:	b25b      	sxtb	r3, r3
 800058a:	4013      	ands	r3, r2
 800058c:	b259      	sxtb	r1, r3
 800058e:	88fa      	ldrh	r2, [r7, #6]
 8000590:	4603      	mov	r3, r0
 8000592:	01db      	lsls	r3, r3, #7
 8000594:	4413      	add	r3, r2
 8000596:	b2c9      	uxtb	r1, r1
 8000598:	4a04      	ldr	r2, [pc, #16]	@ (80005ac <SSD1306_DrawPixel+0xb8>)
 800059a:	54d1      	strb	r1, [r2, r3]
 800059c:	e000      	b.n	80005a0 <SSD1306_DrawPixel+0xac>
		return;
 800059e:	bf00      	nop
	}
}
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	2000043c 	.word	0x2000043c
 80005ac:	2000003c 	.word	0x2000003c

080005b0 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f7ff ff85 	bl	80004c4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80005ba:	f7ff ff55 	bl	8000468 <SSD1306_UpdateScreen>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80005ca:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <ssd1306_I2C_Init+0x24>)
 80005cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005ce:	e002      	b.n	80005d6 <ssd1306_I2C_Init+0x12>
		p--;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d1f9      	bne.n	80005d0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&H_I2C);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	0003d090 	.word	0x0003d090

080005ec <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b0c7      	sub	sp, #284	@ 0x11c
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	4604      	mov	r4, r0
 80005f4:	4608      	mov	r0, r1
 80005f6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80005fa:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80005fe:	600a      	str	r2, [r1, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000606:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800060a:	4622      	mov	r2, r4
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000612:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000616:	4602      	mov	r2, r0
 8000618:	701a      	strb	r2, [r3, #0]
 800061a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800061e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000622:	460a      	mov	r2, r1
 8000624:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000626:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800062a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800062e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000632:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000636:	7812      	ldrb	r2, [r2, #0]
 8000638:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800063a:	2300      	movs	r3, #0
 800063c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000640:	e015      	b.n	800066e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000642:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000646:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800064a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800064e:	6812      	ldr	r2, [r2, #0]
 8000650:	441a      	add	r2, r3
 8000652:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000656:	3301      	adds	r3, #1
 8000658:	7811      	ldrb	r1, [r2, #0]
 800065a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800065e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000662:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000664:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000668:	3301      	adds	r3, #1
 800066a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800066e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000672:	b29b      	uxth	r3, r3
 8000674:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000678:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800067c:	8812      	ldrh	r2, [r2, #0]
 800067e:	429a      	cmp	r2, r3
 8000680:	d8df      	bhi.n	8000642 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&H_I2C, address, dt, count+1, 10);
 8000682:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000686:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b299      	uxth	r1, r3
 800068e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000692:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	b29b      	uxth	r3, r3
 800069c:	f107 020c 	add.w	r2, r7, #12
 80006a0:	200a      	movs	r0, #10
 80006a2:	9000      	str	r0, [sp, #0]
 80006a4:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <ssd1306_I2C_WriteMulti+0xc8>)
 80006a6:	f000 ffdb 	bl	8001660 <HAL_I2C_Master_Transmit>
}
 80006aa:	bf00      	nop
 80006ac:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd90      	pop	{r4, r7, pc}
 80006b4:	20000464 	.word	0x20000464

080006b8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af02      	add	r7, sp, #8
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
 80006c2:	460b      	mov	r3, r1
 80006c4:	71bb      	strb	r3, [r7, #6]
 80006c6:	4613      	mov	r3, r2
 80006c8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80006ce:	797b      	ldrb	r3, [r7, #5]
 80006d0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&H_I2C, address, dt, 2, 10);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	b299      	uxth	r1, r3
 80006d6:	f107 020c 	add.w	r2, r7, #12
 80006da:	230a      	movs	r3, #10
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2302      	movs	r3, #2
 80006e0:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <ssd1306_I2C_Write+0x38>)
 80006e2:	f000 ffbd 	bl	8001660 <HAL_I2C_Master_Transmit>
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000464 	.word	0x20000464

080006f4 <send>:
	_LED_0F[26] = 0xC1; //U
	_LED_0F[27] = 0x91; //Y
	_LED_0F[28] = 0xFE; //hight -
}

void send(uint8_t X) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]

	for (int i = 8; i >= 1; i--) {
 80006fe:	2308      	movs	r3, #8
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	e022      	b.n	800074a <send+0x56>
		if (X & 0x80) {
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	da06      	bge.n	800071a <send+0x26>
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, HIGH);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000712:	4812      	ldr	r0, [pc, #72]	@ (800075c <send+0x68>)
 8000714:	f000 fe48 	bl	80013a8 <HAL_GPIO_WritePin>
 8000718:	e005      	b.n	8000726 <send+0x32>
		} else {
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, LOW);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000720:	480e      	ldr	r0, [pc, #56]	@ (800075c <send+0x68>)
 8000722:	f000 fe41 	bl	80013a8 <HAL_GPIO_WritePin>
		}
		X <<= 1;
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, HIGH);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000732:	480a      	ldr	r0, [pc, #40]	@ (800075c <send+0x68>)
 8000734:	f000 fe38 	bl	80013a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, LOW);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800073e:	4807      	ldr	r0, [pc, #28]	@ (800075c <send+0x68>)
 8000740:	f000 fe32 	bl	80013a8 <HAL_GPIO_WritePin>
	for (int i = 8; i >= 1; i--) {
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3b01      	subs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2b00      	cmp	r3, #0
 800074e:	dcd9      	bgt.n	8000704 <send+0x10>
	}
}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40010c00 	.word	0x40010c00

08000760 <send_port>:

void send_port(uint8_t X, uint8_t port) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	4613      	mov	r3, r2
 800076e:	71bb      	strb	r3, [r7, #6]
	send(X);
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ffbe 	bl	80006f4 <send>
	send(port);
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ffba 	bl	80006f4 <send>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000786:	4806      	ldr	r0, [pc, #24]	@ (80007a0 <send_port+0x40>)
 8000788:	f000 fe0e 	bl	80013a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000792:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <send_port+0x40>)
 8000794:	f000 fe08 	bl	80013a8 <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40010c00 	.word	0x40010c00

080007a4 <digit4_temper>:
			send_port(_LED_0F[n4], 0b1000);
	}
}

static uint8_t m_tempercount = 0;
void digit4_temper(int temper) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	int n1, n2, n3, n4;
	n1 = (int) temper % 10;
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	4b55      	ldr	r3, [pc, #340]	@ (8000904 <digit4_temper+0x160>)
 80007b0:	fb83 1302 	smull	r1, r3, r3, r2
 80007b4:	1099      	asrs	r1, r3, #2
 80007b6:	17d3      	asrs	r3, r2, #31
 80007b8:	1ac9      	subs	r1, r1, r3
 80007ba:	460b      	mov	r3, r1
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	440b      	add	r3, r1
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	617b      	str	r3, [r7, #20]
	n2 = (int) ((temper % 100)) / 10;
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	4b4f      	ldr	r3, [pc, #316]	@ (8000908 <digit4_temper+0x164>)
 80007ca:	fb83 1302 	smull	r1, r3, r3, r2
 80007ce:	1159      	asrs	r1, r3, #5
 80007d0:	17d3      	asrs	r3, r2, #31
 80007d2:	1acb      	subs	r3, r1, r3
 80007d4:	2164      	movs	r1, #100	@ 0x64
 80007d6:	fb01 f303 	mul.w	r3, r1, r3
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	4a49      	ldr	r2, [pc, #292]	@ (8000904 <digit4_temper+0x160>)
 80007de:	fb82 1203 	smull	r1, r2, r2, r3
 80007e2:	1092      	asrs	r2, r2, #2
 80007e4:	17db      	asrs	r3, r3, #31
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	613b      	str	r3, [r7, #16]
	n3 = (int) ((temper % 1000)) / 100;
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	4b47      	ldr	r3, [pc, #284]	@ (800090c <digit4_temper+0x168>)
 80007ee:	fb83 1302 	smull	r1, r3, r3, r2
 80007f2:	1199      	asrs	r1, r3, #6
 80007f4:	17d3      	asrs	r3, r2, #31
 80007f6:	1acb      	subs	r3, r1, r3
 80007f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007fc:	fb01 f303 	mul.w	r3, r1, r3
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	4a41      	ldr	r2, [pc, #260]	@ (8000908 <digit4_temper+0x164>)
 8000804:	fb82 1203 	smull	r1, r2, r2, r3
 8000808:	1152      	asrs	r2, r2, #5
 800080a:	17db      	asrs	r3, r3, #31
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	60fb      	str	r3, [r7, #12]
	n4 = (int) ((temper % 10000)) / 1000;
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4b3f      	ldr	r3, [pc, #252]	@ (8000910 <digit4_temper+0x16c>)
 8000814:	fb83 1302 	smull	r1, r3, r3, r2
 8000818:	1319      	asrs	r1, r3, #12
 800081a:	17d3      	asrs	r3, r2, #31
 800081c:	1acb      	subs	r3, r1, r3
 800081e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000822:	fb01 f303 	mul.w	r3, r1, r3
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	4a38      	ldr	r2, [pc, #224]	@ (800090c <digit4_temper+0x168>)
 800082a:	fb82 1203 	smull	r1, r2, r2, r3
 800082e:	1192      	asrs	r2, r2, #6
 8000830:	17db      	asrs	r3, r3, #31
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	60bb      	str	r3, [r7, #8]

	switch (m_tempercount) {
 8000836:	4b37      	ldr	r3, [pc, #220]	@ (8000914 <digit4_temper+0x170>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b03      	cmp	r3, #3
 800083c:	d835      	bhi.n	80008aa <digit4_temper+0x106>
 800083e:	a201      	add	r2, pc, #4	@ (adr r2, 8000844 <digit4_temper+0xa0>)
 8000840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000844:	08000855 	.word	0x08000855
 8000848:	08000867 	.word	0x08000867
 800084c:	08000879 	.word	0x08000879
 8000850:	08000891 	.word	0x08000891
	case 0:
		send_port(_LED_0F[n1], 0b0001);
 8000854:	4a30      	ldr	r2, [pc, #192]	@ (8000918 <digit4_temper+0x174>)
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2101      	movs	r1, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff7e 	bl	8000760 <send_port>
		break;
 8000864:	e022      	b.n	80008ac <digit4_temper+0x108>
	case 1:
		send_port(_LED_0F[n2], 0b0010);
 8000866:	4a2c      	ldr	r2, [pc, #176]	@ (8000918 <digit4_temper+0x174>)
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	4413      	add	r3, r2
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2102      	movs	r1, #2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff75 	bl	8000760 <send_port>
		break;
 8000876:	e019      	b.n	80008ac <digit4_temper+0x108>
	case 2:
		if (temper > 99){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b63      	cmp	r3, #99	@ 0x63
 800087c:	dd08      	ble.n	8000890 <digit4_temper+0xec>
			send_port(_LED_0F[n3], 0b0100);
 800087e:	4a26      	ldr	r2, [pc, #152]	@ (8000918 <digit4_temper+0x174>)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2104      	movs	r1, #4
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff69 	bl	8000760 <send_port>
		break;
 800088e:	e00d      	b.n	80008ac <digit4_temper+0x108>
		}
    case 3:
		if (temper > 999){
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000896:	db08      	blt.n	80008aa <digit4_temper+0x106>
			send_port(_LED_0F[n4], 0b1000);
 8000898:	4a1f      	ldr	r2, [pc, #124]	@ (8000918 <digit4_temper+0x174>)
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	4413      	add	r3, r2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2108      	movs	r1, #8
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff5c 	bl	8000760 <send_port>
		break;
 80008a8:	e000      	b.n	80008ac <digit4_temper+0x108>
		}
	default:
		break;
 80008aa:	bf00      	nop
	}

	m_tempercount++;
 80008ac:	4b19      	ldr	r3, [pc, #100]	@ (8000914 <digit4_temper+0x170>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <digit4_temper+0x170>)
 80008b6:	701a      	strb	r2, [r3, #0]

	if (temper > 999 && m_tempercount >= 4) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008be:	db07      	blt.n	80008d0 <digit4_temper+0x12c>
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <digit4_temper+0x170>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b03      	cmp	r3, #3
 80008c6:	d903      	bls.n	80008d0 <digit4_temper+0x12c>
				m_tempercount = 0;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <digit4_temper+0x170>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	e015      	b.n	80008fc <digit4_temper+0x158>
	}else if(temper > 99 && m_tempercount >= 3){
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b63      	cmp	r3, #99	@ 0x63
 80008d4:	dd07      	ble.n	80008e6 <digit4_temper+0x142>
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <digit4_temper+0x170>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d903      	bls.n	80008e6 <digit4_temper+0x142>
				m_tempercount = 0;
 80008de:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <digit4_temper+0x170>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
 80008e4:	e00a      	b.n	80008fc <digit4_temper+0x158>
	}else if(temper <= 99 && m_tempercount >= 2){
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b63      	cmp	r3, #99	@ 0x63
 80008ea:	dc07      	bgt.n	80008fc <digit4_temper+0x158>
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <digit4_temper+0x170>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d903      	bls.n	80008fc <digit4_temper+0x158>
				m_tempercount = 0;
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <digit4_temper+0x170>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
			}

}
 80008fa:	e7ff      	b.n	80008fc <digit4_temper+0x158>
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	66666667 	.word	0x66666667
 8000908:	51eb851f 	.word	0x51eb851f
 800090c:	10624dd3 	.word	0x10624dd3
 8000910:	68db8bad 	.word	0x68db8bad
 8000914:	20000461 	.word	0x20000461
 8000918:	20000444 	.word	0x20000444

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000922:	f000 fa53 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f81f 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092a:	f000 f891 	bl	8000a50 <MX_GPIO_Init>
 // MX_USART1_UART_Init();
 // MX_TIM2_Init();
 // MX_TIM3_Init();
  MX_I2C2_Init();
 800092e:	f000 f861 	bl	80009f4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000932:	f7ff fcd5 	bl	80002e0 <SSD1306_Init>
//  Ds18b20_Init_Simple();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SSD1306_InvertDisplay(1);
 8000936:	2001      	movs	r0, #1
 8000938:	f7ff fc54 	bl	80001e4 <SSD1306_InvertDisplay>
   while (1)
  {
		  SSD1306_Clear();
 800093c:	f7ff fe38 	bl	80005b0 <SSD1306_Clear>
		  SSD1306_DrawBitmap(0,0,ojtubelog1,128,64,1);
 8000940:	2301      	movs	r3, #1
 8000942:	9301      	str	r3, [sp, #4]
 8000944:	2340      	movs	r3, #64	@ 0x40
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2380      	movs	r3, #128	@ 0x80
 800094a:	4a06      	ldr	r2, [pc, #24]	@ (8000964 <main+0x48>)
 800094c:	2100      	movs	r1, #0
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff fc5e 	bl	8000210 <SSD1306_DrawBitmap>
		  SSD1306_UpdateScreen();
 8000954:	f7ff fd88 	bl	8000468 <SSD1306_UpdateScreen>




	  HAL_Delay (2000);
 8000958:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800095c:	f000 fa98 	bl	8000e90 <HAL_Delay>
		  SSD1306_Clear();
 8000960:	bf00      	nop
 8000962:	e7eb      	b.n	800093c <main+0x20>
 8000964:	08002a34 	.word	0x08002a34

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b090      	sub	sp, #64	@ 0x40
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	2228      	movs	r2, #40	@ 0x28
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 f823 	bl	80029c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000992:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	2301      	movs	r3, #1
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099c:	2302      	movs	r3, #2
 800099e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009a6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80009aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0318 	add.w	r3, r7, #24
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fadb 	bl	8001f6c <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009bc:	f000 f904 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2102      	movs	r1, #2
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 fd48 	bl	8002470 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009e6:	f000 f8ef 	bl	8000bc8 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3740      	adds	r7, #64	@ 0x40
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <MX_I2C2_Init+0x50>)
 80009fa:	4a13      	ldr	r2, [pc, #76]	@ (8000a48 <MX_I2C2_Init+0x54>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_I2C2_Init+0x50>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	@ (8000a4c <MX_I2C2_Init+0x58>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <MX_I2C2_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <MX_I2C2_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_I2C2_Init+0x50>)
 8000a12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <MX_I2C2_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_I2C2_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <MX_I2C2_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_I2C2_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	@ (8000a44 <MX_I2C2_Init+0x50>)
 8000a32:	f000 fcd1 	bl	80013d8 <HAL_I2C_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a3c:	f000 f8c4 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000464 	.word	0x20000464
 8000a48:	40005800 	.word	0x40005800
 8000a4c:	00061a80 	.word	0x00061a80

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a64:	4b54      	ldr	r3, [pc, #336]	@ (8000bb8 <MX_GPIO_Init+0x168>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a53      	ldr	r2, [pc, #332]	@ (8000bb8 <MX_GPIO_Init+0x168>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b51      	ldr	r3, [pc, #324]	@ (8000bb8 <MX_GPIO_Init+0x168>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0310 	and.w	r3, r3, #16
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7c:	4b4e      	ldr	r3, [pc, #312]	@ (8000bb8 <MX_GPIO_Init+0x168>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a4d      	ldr	r2, [pc, #308]	@ (8000bb8 <MX_GPIO_Init+0x168>)
 8000a82:	f043 0320 	orr.w	r3, r3, #32
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b4b      	ldr	r3, [pc, #300]	@ (8000bb8 <MX_GPIO_Init+0x168>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0320 	and.w	r3, r3, #32
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4b48      	ldr	r3, [pc, #288]	@ (8000bb8 <MX_GPIO_Init+0x168>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a47      	ldr	r2, [pc, #284]	@ (8000bb8 <MX_GPIO_Init+0x168>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b45      	ldr	r3, [pc, #276]	@ (8000bb8 <MX_GPIO_Init+0x168>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aac:	4b42      	ldr	r3, [pc, #264]	@ (8000bb8 <MX_GPIO_Init+0x168>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a41      	ldr	r2, [pc, #260]	@ (8000bb8 <MX_GPIO_Init+0x168>)
 8000ab2:	f043 0308 	orr.w	r3, r3, #8
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb8 <MX_GPIO_Init+0x168>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aca:	483c      	ldr	r0, [pc, #240]	@ (8000bbc <MX_GPIO_Init+0x16c>)
 8000acc:	f000 fc6c 	bl	80013a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA3_TEMP_DATA_GPIO_Port, PA3_TEMP_DATA_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	483a      	ldr	r0, [pc, #232]	@ (8000bc0 <MX_GPIO_Init+0x170>)
 8000ad6:	f000 fc67 	bl	80013a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin|PB6_LED1_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f24e 0140 	movw	r1, #57408	@ 0xe040
 8000ae0:	4838      	ldr	r0, [pc, #224]	@ (8000bc4 <MX_GPIO_Init+0x174>)
 8000ae2:	f000 fc61 	bl	80013a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2120      	movs	r1, #32
 8000aea:	4836      	ldr	r0, [pc, #216]	@ (8000bc4 <MX_GPIO_Init+0x174>)
 8000aec:	f000 fc5c 	bl	80013a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	482c      	ldr	r0, [pc, #176]	@ (8000bbc <MX_GPIO_Init+0x16c>)
 8000b0a:	f000 fac9 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_Pin;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_SW_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4827      	ldr	r0, [pc, #156]	@ (8000bc0 <MX_GPIO_Init+0x170>)
 8000b22:	f000 fabd 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3_TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = PA3_TEMP_DATA_Pin;
 8000b26:	2308      	movs	r3, #8
 8000b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA3_TEMP_DATA_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4820      	ldr	r0, [pc, #128]	@ (8000bc0 <MX_GPIO_Init+0x170>)
 8000b3e:	f000 faaf 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0_TEMP_SET_UP_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin;
 8000b42:	2301      	movs	r3, #1
 8000b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB0_TEMP_SET_UP_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	4619      	mov	r1, r3
 8000b54:	481b      	ldr	r0, [pc, #108]	@ (8000bc4 <MX_GPIO_Init+0x174>)
 8000b56:	f000 faa3 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_RCLK_Pin FND_DIO_Pin FND_SCLK_Pin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin;
 8000b5a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	4814      	ldr	r0, [pc, #80]	@ (8000bc4 <MX_GPIO_Init+0x174>)
 8000b74:	f000 fa94 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5_RELAY_ON_OFF_CTRL_Pin */
  GPIO_InitStruct.Pin = PB5_RELAY_ON_OFF_CTRL_Pin;
 8000b78:	2320      	movs	r3, #32
 8000b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <MX_GPIO_Init+0x174>)
 8000b90:	f000 fa86 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6_LED1_Pin */
  GPIO_InitStruct.Pin = PB6_LED1_Pin;
 8000b94:	2340      	movs	r3, #64	@ 0x40
 8000b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB6_LED1_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4806      	ldr	r0, [pc, #24]	@ (8000bc4 <MX_GPIO_Init+0x174>)
 8000bac:	f000 fa78 	bl	80010a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40011000 	.word	0x40011000
 8000bc0:	40010800 	.word	0x40010800
 8000bc4:	40010c00 	.word	0x40010c00

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <Error_Handler+0x8>

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <HAL_MspInit+0x5c>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a14      	ldr	r2, [pc, #80]	@ (8000c30 <HAL_MspInit+0x5c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <HAL_MspInit+0x5c>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <HAL_MspInit+0x5c>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c30 <HAL_MspInit+0x5c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	61d3      	str	r3, [r2, #28]
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <HAL_MspInit+0x5c>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <HAL_MspInit+0x60>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <HAL_MspInit+0x60>)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010000 	.word	0x40010000

08000c38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a16      	ldr	r2, [pc, #88]	@ (8000cac <HAL_I2C_MspInit+0x74>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d124      	bne.n	8000ca2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <HAL_I2C_MspInit+0x78>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a14      	ldr	r2, [pc, #80]	@ (8000cb0 <HAL_I2C_MspInit+0x78>)
 8000c5e:	f043 0308 	orr.w	r3, r3, #8
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <HAL_I2C_MspInit+0x78>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0308 	and.w	r3, r3, #8
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c76:	2312      	movs	r3, #18
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4619      	mov	r1, r3
 8000c84:	480b      	ldr	r0, [pc, #44]	@ (8000cb4 <HAL_I2C_MspInit+0x7c>)
 8000c86:	f000 fa0b 	bl	80010a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <HAL_I2C_MspInit+0x78>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_I2C_MspInit+0x78>)
 8000c90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_I2C_MspInit+0x78>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3720      	adds	r7, #32
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40005800 	.word	0x40005800
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010c00 	.word	0x40010c00

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <NMI_Handler+0x4>

08000cc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <MemManage_Handler+0x4>

08000cd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <UsageFault_Handler+0x4>

08000ce0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f8a6 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  m_time ++;
 8000d14:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <TIM2_IRQHandler+0x18>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	4a03      	ldr	r2, [pc, #12]	@ (8000d28 <TIM2_IRQHandler+0x18>)
 8000d1c:	6013      	str	r3, [r2, #0]
  //}



  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d1e:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <TIM2_IRQHandler+0x1c>)
 8000d20:	f001 fd20 	bl	8002764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000548 	.word	0x20000548
 8000d2c:	200004b8 	.word	0x200004b8

08000d30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
if(isTemperSensorInit() && !isBusy()){
 8000d34:	f7ff fa30 	bl	8000198 <isTemperSensorInit>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d012      	beq.n	8000d64 <TIM3_IRQHandler+0x34>
 8000d3e:	f7ff fa35 	bl	80001ac <isBusy>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10d      	bne.n	8000d64 <TIM3_IRQHandler+0x34>
	digit4_temper((int)getCurrentTemper() * 10 );
 8000d48:	f7ff fa38 	bl	80001bc <getCurrentTemper>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff f9fc 	bl	800014c <__aeabi_f2iz>
 8000d54:	4602      	mov	r2, r0
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fd20 	bl	80007a4 <digit4_temper>
}
//digit4_temper((int)getCurrentTemper() * 10 );

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <TIM3_IRQHandler+0x40>)
 8000d66:	f001 fcfd 	bl	8002764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000500 	.word	0x20000500

08000d74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d80:	f7ff fff8 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	480b      	ldr	r0, [pc, #44]	@ (8000db4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d86:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d88:	4a0c      	ldr	r2, [pc, #48]	@ (8000dbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a09      	ldr	r2, [pc, #36]	@ (8000dc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d9c:	4c09      	ldr	r4, [pc, #36]	@ (8000dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000daa:	f001 fe13 	bl	80029d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dae:	f7ff fdb5 	bl	800091c <main>
  bx lr
 8000db2:	4770      	bx	lr
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dbc:	080030b8 	.word	0x080030b8
  ldr r2, =_sbss
 8000dc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dc4:	20000550 	.word	0x20000550

08000dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC1_2_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_Init+0x28>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_Init+0x28>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f92b 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	200f      	movs	r0, #15
 8000de4:	f000 f808 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff fef4 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f935 	bl	8001086 <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 f90b 	bl	800104e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	@ (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <HAL_IncTick+0x1c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a03      	ldr	r2, [pc, #12]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	20000008 	.word	0x20000008
 8000e78:	2000054c 	.word	0x2000054c

08000e7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b02      	ldr	r3, [pc, #8]	@ (8000e8c <HAL_GetTick+0x10>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	2000054c 	.word	0x2000054c

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff fff0 	bl	8000e7c <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffe0 	bl	8000e7c <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	@ (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	@ 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001004:	d301      	bcc.n	800100a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001006:	2301      	movs	r3, #1
 8001008:	e00f      	b.n	800102a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <SysTick_Config+0x40>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001012:	210f      	movs	r1, #15
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f7ff ff90 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <SysTick_Config+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001022:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <SysTick_Config+0x40>)
 8001024:	2207      	movs	r2, #7
 8001026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	e000e010 	.word	0xe000e010

08001038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff49 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001060:	f7ff ff5e 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 8001064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6978      	ldr	r0, [r7, #20]
 800106c:	f7ff ff90 	bl	8000f90 <NVIC_EncodePriority>
 8001070:	4602      	mov	r2, r0
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff5f 	bl	8000f3c <__NVIC_SetPriority>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffb0 	bl	8000ff4 <SysTick_Config>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b08b      	sub	sp, #44	@ 0x2c
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b2:	e169      	b.n	8001388 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010b4:	2201      	movs	r2, #1
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f040 8158 	bne.w	8001382 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4a9a      	ldr	r2, [pc, #616]	@ (8001340 <HAL_GPIO_Init+0x2a0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d05e      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 80010dc:	4a98      	ldr	r2, [pc, #608]	@ (8001340 <HAL_GPIO_Init+0x2a0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d875      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 80010e2:	4a98      	ldr	r2, [pc, #608]	@ (8001344 <HAL_GPIO_Init+0x2a4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d058      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 80010e8:	4a96      	ldr	r2, [pc, #600]	@ (8001344 <HAL_GPIO_Init+0x2a4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d86f      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 80010ee:	4a96      	ldr	r2, [pc, #600]	@ (8001348 <HAL_GPIO_Init+0x2a8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d052      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 80010f4:	4a94      	ldr	r2, [pc, #592]	@ (8001348 <HAL_GPIO_Init+0x2a8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d869      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 80010fa:	4a94      	ldr	r2, [pc, #592]	@ (800134c <HAL_GPIO_Init+0x2ac>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d04c      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 8001100:	4a92      	ldr	r2, [pc, #584]	@ (800134c <HAL_GPIO_Init+0x2ac>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d863      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 8001106:	4a92      	ldr	r2, [pc, #584]	@ (8001350 <HAL_GPIO_Init+0x2b0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d046      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 800110c:	4a90      	ldr	r2, [pc, #576]	@ (8001350 <HAL_GPIO_Init+0x2b0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d85d      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 8001112:	2b12      	cmp	r3, #18
 8001114:	d82a      	bhi.n	800116c <HAL_GPIO_Init+0xcc>
 8001116:	2b12      	cmp	r3, #18
 8001118:	d859      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 800111a:	a201      	add	r2, pc, #4	@ (adr r2, 8001120 <HAL_GPIO_Init+0x80>)
 800111c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001120:	0800119b 	.word	0x0800119b
 8001124:	08001175 	.word	0x08001175
 8001128:	08001187 	.word	0x08001187
 800112c:	080011c9 	.word	0x080011c9
 8001130:	080011cf 	.word	0x080011cf
 8001134:	080011cf 	.word	0x080011cf
 8001138:	080011cf 	.word	0x080011cf
 800113c:	080011cf 	.word	0x080011cf
 8001140:	080011cf 	.word	0x080011cf
 8001144:	080011cf 	.word	0x080011cf
 8001148:	080011cf 	.word	0x080011cf
 800114c:	080011cf 	.word	0x080011cf
 8001150:	080011cf 	.word	0x080011cf
 8001154:	080011cf 	.word	0x080011cf
 8001158:	080011cf 	.word	0x080011cf
 800115c:	080011cf 	.word	0x080011cf
 8001160:	080011cf 	.word	0x080011cf
 8001164:	0800117d 	.word	0x0800117d
 8001168:	08001191 	.word	0x08001191
 800116c:	4a79      	ldr	r2, [pc, #484]	@ (8001354 <HAL_GPIO_Init+0x2b4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d013      	beq.n	800119a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001172:	e02c      	b.n	80011ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	623b      	str	r3, [r7, #32]
          break;
 800117a:	e029      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	3304      	adds	r3, #4
 8001182:	623b      	str	r3, [r7, #32]
          break;
 8001184:	e024      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	3308      	adds	r3, #8
 800118c:	623b      	str	r3, [r7, #32]
          break;
 800118e:	e01f      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	330c      	adds	r3, #12
 8001196:	623b      	str	r3, [r7, #32]
          break;
 8001198:	e01a      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d102      	bne.n	80011a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011a2:	2304      	movs	r3, #4
 80011a4:	623b      	str	r3, [r7, #32]
          break;
 80011a6:	e013      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d105      	bne.n	80011bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b0:	2308      	movs	r3, #8
 80011b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	611a      	str	r2, [r3, #16]
          break;
 80011ba:	e009      	b.n	80011d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011bc:	2308      	movs	r3, #8
 80011be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	615a      	str	r2, [r3, #20]
          break;
 80011c6:	e003      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
          break;
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          break;
 80011ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2bff      	cmp	r3, #255	@ 0xff
 80011d4:	d801      	bhi.n	80011da <HAL_GPIO_Init+0x13a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	e001      	b.n	80011de <HAL_GPIO_Init+0x13e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3304      	adds	r3, #4
 80011de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2bff      	cmp	r3, #255	@ 0xff
 80011e4:	d802      	bhi.n	80011ec <HAL_GPIO_Init+0x14c>
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	e002      	b.n	80011f2 <HAL_GPIO_Init+0x152>
 80011ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ee:	3b08      	subs	r3, #8
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	210f      	movs	r1, #15
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	401a      	ands	r2, r3
 8001204:	6a39      	ldr	r1, [r7, #32]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	431a      	orrs	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 80b1 	beq.w	8001382 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001220:	4b4d      	ldr	r3, [pc, #308]	@ (8001358 <HAL_GPIO_Init+0x2b8>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a4c      	ldr	r2, [pc, #304]	@ (8001358 <HAL_GPIO_Init+0x2b8>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b4a      	ldr	r3, [pc, #296]	@ (8001358 <HAL_GPIO_Init+0x2b8>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001238:	4a48      	ldr	r2, [pc, #288]	@ (800135c <HAL_GPIO_Init+0x2bc>)
 800123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001244:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a40      	ldr	r2, [pc, #256]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d013      	beq.n	800128c <HAL_GPIO_Init+0x1ec>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a3f      	ldr	r2, [pc, #252]	@ (8001364 <HAL_GPIO_Init+0x2c4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d00d      	beq.n	8001288 <HAL_GPIO_Init+0x1e8>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a3e      	ldr	r2, [pc, #248]	@ (8001368 <HAL_GPIO_Init+0x2c8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d007      	beq.n	8001284 <HAL_GPIO_Init+0x1e4>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a3d      	ldr	r2, [pc, #244]	@ (800136c <HAL_GPIO_Init+0x2cc>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d101      	bne.n	8001280 <HAL_GPIO_Init+0x1e0>
 800127c:	2303      	movs	r3, #3
 800127e:	e006      	b.n	800128e <HAL_GPIO_Init+0x1ee>
 8001280:	2304      	movs	r3, #4
 8001282:	e004      	b.n	800128e <HAL_GPIO_Init+0x1ee>
 8001284:	2302      	movs	r3, #2
 8001286:	e002      	b.n	800128e <HAL_GPIO_Init+0x1ee>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <HAL_GPIO_Init+0x1ee>
 800128c:	2300      	movs	r3, #0
 800128e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001290:	f002 0203 	and.w	r2, r2, #3
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	4093      	lsls	r3, r2
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800129e:	492f      	ldr	r1, [pc, #188]	@ (800135c <HAL_GPIO_Init+0x2bc>)
 80012a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	492c      	ldr	r1, [pc, #176]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	608b      	str	r3, [r1, #8]
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4928      	ldr	r1, [pc, #160]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012e0:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	4922      	ldr	r1, [pc, #136]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	60cb      	str	r3, [r1, #12]
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012ee:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	491e      	ldr	r1, [pc, #120]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001308:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4918      	ldr	r1, [pc, #96]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001316:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	43db      	mvns	r3, r3
 800131e:	4914      	ldr	r1, [pc, #80]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 8001320:	4013      	ands	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d021      	beq.n	8001374 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	490e      	ldr	r1, [pc, #56]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
 800133c:	e021      	b.n	8001382 <HAL_GPIO_Init+0x2e2>
 800133e:	bf00      	nop
 8001340:	10320000 	.word	0x10320000
 8001344:	10310000 	.word	0x10310000
 8001348:	10220000 	.word	0x10220000
 800134c:	10210000 	.word	0x10210000
 8001350:	10120000 	.word	0x10120000
 8001354:	10110000 	.word	0x10110000
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	40010800 	.word	0x40010800
 8001364:	40010c00 	.word	0x40010c00
 8001368:	40011000 	.word	0x40011000
 800136c:	40011400 	.word	0x40011400
 8001370:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <HAL_GPIO_Init+0x304>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	43db      	mvns	r3, r3
 800137c:	4909      	ldr	r1, [pc, #36]	@ (80013a4 <HAL_GPIO_Init+0x304>)
 800137e:	4013      	ands	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	3301      	adds	r3, #1
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138e:	fa22 f303 	lsr.w	r3, r2, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	f47f ae8e 	bne.w	80010b4 <HAL_GPIO_Init+0x14>
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	372c      	adds	r7, #44	@ 0x2c
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	40010400 	.word	0x40010400

080013a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
 80013b4:	4613      	mov	r3, r2
 80013b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013b8:	787b      	ldrb	r3, [r7, #1]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013c4:	e003      	b.n	80013ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	041a      	lsls	r2, r3, #16
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	611a      	str	r2, [r3, #16]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e12b      	b.n	8001642 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d106      	bne.n	8001404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fc1a 	bl	8000c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2224      	movs	r2, #36	@ 0x24
 8001408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800142a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800143a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800143c:	f001 f960 	bl	8002700 <HAL_RCC_GetPCLK1Freq>
 8001440:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4a81      	ldr	r2, [pc, #516]	@ (800164c <HAL_I2C_Init+0x274>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d807      	bhi.n	800145c <HAL_I2C_Init+0x84>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4a80      	ldr	r2, [pc, #512]	@ (8001650 <HAL_I2C_Init+0x278>)
 8001450:	4293      	cmp	r3, r2
 8001452:	bf94      	ite	ls
 8001454:	2301      	movls	r3, #1
 8001456:	2300      	movhi	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	e006      	b.n	800146a <HAL_I2C_Init+0x92>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4a7d      	ldr	r2, [pc, #500]	@ (8001654 <HAL_I2C_Init+0x27c>)
 8001460:	4293      	cmp	r3, r2
 8001462:	bf94      	ite	ls
 8001464:	2301      	movls	r3, #1
 8001466:	2300      	movhi	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e0e7      	b.n	8001642 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4a78      	ldr	r2, [pc, #480]	@ (8001658 <HAL_I2C_Init+0x280>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0c9b      	lsrs	r3, r3, #18
 800147c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	430a      	orrs	r2, r1
 8001490:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a6a      	ldr	r2, [pc, #424]	@ (800164c <HAL_I2C_Init+0x274>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d802      	bhi.n	80014ac <HAL_I2C_Init+0xd4>
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	3301      	adds	r3, #1
 80014aa:	e009      	b.n	80014c0 <HAL_I2C_Init+0xe8>
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	4a69      	ldr	r2, [pc, #420]	@ (800165c <HAL_I2C_Init+0x284>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	099b      	lsrs	r3, r3, #6
 80014be:	3301      	adds	r3, #1
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	430b      	orrs	r3, r1
 80014c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	495c      	ldr	r1, [pc, #368]	@ (800164c <HAL_I2C_Init+0x274>)
 80014dc:	428b      	cmp	r3, r1
 80014de:	d819      	bhi.n	8001514 <HAL_I2C_Init+0x13c>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	1e59      	subs	r1, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ee:	1c59      	adds	r1, r3, #1
 80014f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014f4:	400b      	ands	r3, r1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <HAL_I2C_Init+0x138>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1e59      	subs	r1, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fbb1 f3f3 	udiv	r3, r1, r3
 8001508:	3301      	adds	r3, #1
 800150a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150e:	e051      	b.n	80015b4 <HAL_I2C_Init+0x1dc>
 8001510:	2304      	movs	r3, #4
 8001512:	e04f      	b.n	80015b4 <HAL_I2C_Init+0x1dc>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d111      	bne.n	8001540 <HAL_I2C_Init+0x168>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1e58      	subs	r0, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	440b      	add	r3, r1
 800152a:	fbb0 f3f3 	udiv	r3, r0, r3
 800152e:	3301      	adds	r3, #1
 8001530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001534:	2b00      	cmp	r3, #0
 8001536:	bf0c      	ite	eq
 8001538:	2301      	moveq	r3, #1
 800153a:	2300      	movne	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	e012      	b.n	8001566 <HAL_I2C_Init+0x18e>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1e58      	subs	r0, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6859      	ldr	r1, [r3, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	0099      	lsls	r1, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	fbb0 f3f3 	udiv	r3, r0, r3
 8001556:	3301      	adds	r3, #1
 8001558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf0c      	ite	eq
 8001560:	2301      	moveq	r3, #1
 8001562:	2300      	movne	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_I2C_Init+0x196>
 800156a:	2301      	movs	r3, #1
 800156c:	e022      	b.n	80015b4 <HAL_I2C_Init+0x1dc>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10e      	bne.n	8001594 <HAL_I2C_Init+0x1bc>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1e58      	subs	r0, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6859      	ldr	r1, [r3, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	440b      	add	r3, r1
 8001584:	fbb0 f3f3 	udiv	r3, r0, r3
 8001588:	3301      	adds	r3, #1
 800158a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800158e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001592:	e00f      	b.n	80015b4 <HAL_I2C_Init+0x1dc>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1e58      	subs	r0, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	0099      	lsls	r1, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015aa:	3301      	adds	r3, #1
 80015ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	6809      	ldr	r1, [r1, #0]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69da      	ldr	r2, [r3, #28]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6911      	ldr	r1, [r2, #16]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68d2      	ldr	r2, [r2, #12]
 80015ee:	4311      	orrs	r1, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	430b      	orrs	r3, r1
 80015f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2220      	movs	r2, #32
 800162e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	000186a0 	.word	0x000186a0
 8001650:	001e847f 	.word	0x001e847f
 8001654:	003d08ff 	.word	0x003d08ff
 8001658:	431bde83 	.word	0x431bde83
 800165c:	10624dd3 	.word	0x10624dd3

08001660 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af02      	add	r7, sp, #8
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	461a      	mov	r2, r3
 800166c:	460b      	mov	r3, r1
 800166e:	817b      	strh	r3, [r7, #10]
 8001670:	4613      	mov	r3, r2
 8001672:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff fc02 	bl	8000e7c <HAL_GetTick>
 8001678:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b20      	cmp	r3, #32
 8001684:	f040 80e0 	bne.w	8001848 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2319      	movs	r3, #25
 800168e:	2201      	movs	r2, #1
 8001690:	4970      	ldr	r1, [pc, #448]	@ (8001854 <HAL_I2C_Master_Transmit+0x1f4>)
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fa92 	bl	8001bbc <I2C_WaitOnFlagUntilTimeout>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800169e:	2302      	movs	r3, #2
 80016a0:	e0d3      	b.n	800184a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_I2C_Master_Transmit+0x50>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e0cc      	b.n	800184a <HAL_I2C_Master_Transmit+0x1ea>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d007      	beq.n	80016d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 0201 	orr.w	r2, r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2221      	movs	r2, #33	@ 0x21
 80016ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2210      	movs	r2, #16
 80016f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	893a      	ldrh	r2, [r7, #8]
 8001706:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800170c:	b29a      	uxth	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4a50      	ldr	r2, [pc, #320]	@ (8001858 <HAL_I2C_Master_Transmit+0x1f8>)
 8001716:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001718:	8979      	ldrh	r1, [r7, #10]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	6a3a      	ldr	r2, [r7, #32]
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 f9ca 	bl	8001ab8 <I2C_MasterRequestWrite>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e08d      	b.n	800184a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001744:	e066      	b.n	8001814 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	6a39      	ldr	r1, [r7, #32]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 fb50 	bl	8001df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00d      	beq.n	8001772 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	2b04      	cmp	r3, #4
 800175c:	d107      	bne.n	800176e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800176c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e06b      	b.n	800184a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	781a      	ldrb	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800178c:	b29b      	uxth	r3, r3
 800178e:	3b01      	subs	r3, #1
 8001790:	b29a      	uxth	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d11b      	bne.n	80017e8 <HAL_I2C_Master_Transmit+0x188>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d017      	beq.n	80017e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	3b01      	subs	r3, #1
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	6a39      	ldr	r1, [r7, #32]
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f000 fb47 	bl	8001e80 <I2C_WaitOnBTFFlagUntilTimeout>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00d      	beq.n	8001814 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d107      	bne.n	8001810 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800180e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e01a      	b.n	800184a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001818:	2b00      	cmp	r3, #0
 800181a:	d194      	bne.n	8001746 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800182a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2220      	movs	r2, #32
 8001830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	e000      	b.n	800184a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001848:	2302      	movs	r3, #2
  }
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	00100002 	.word	0x00100002
 8001858:	ffff0000 	.word	0xffff0000

0800185c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	460b      	mov	r3, r1
 800186a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff fb06 	bl	8000e7c <HAL_GetTick>
 8001870:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b20      	cmp	r3, #32
 8001880:	f040 8111 	bne.w	8001aa6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2319      	movs	r3, #25
 800188a:	2201      	movs	r2, #1
 800188c:	4988      	ldr	r1, [pc, #544]	@ (8001ab0 <HAL_I2C_IsDeviceReady+0x254>)
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 f994 	bl	8001bbc <I2C_WaitOnFlagUntilTimeout>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800189a:	2302      	movs	r3, #2
 800189c:	e104      	b.n	8001aa8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_I2C_IsDeviceReady+0x50>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e0fd      	b.n	8001aa8 <HAL_I2C_IsDeviceReady+0x24c>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d007      	beq.n	80018d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f042 0201 	orr.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2224      	movs	r2, #36	@ 0x24
 80018e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4a70      	ldr	r2, [pc, #448]	@ (8001ab4 <HAL_I2C_IsDeviceReady+0x258>)
 80018f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001904:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2200      	movs	r2, #0
 800190e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 f952 	bl	8001bbc <I2C_WaitOnFlagUntilTimeout>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00d      	beq.n	800193a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800192c:	d103      	bne.n	8001936 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001934:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e0b6      	b.n	8001aa8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800193a:	897b      	ldrh	r3, [r7, #10]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001948:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff fa97 	bl	8000e7c <HAL_GetTick>
 800194e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b02      	cmp	r3, #2
 800195c:	bf0c      	ite	eq
 800195e:	2301      	moveq	r3, #1
 8001960:	2300      	movne	r3, #0
 8001962:	b2db      	uxtb	r3, r3
 8001964:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001974:	bf0c      	ite	eq
 8001976:	2301      	moveq	r3, #1
 8001978:	2300      	movne	r3, #0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800197e:	e025      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001980:	f7ff fa7c 	bl	8000e7c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d302      	bcc.n	8001996 <HAL_I2C_IsDeviceReady+0x13a>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d103      	bne.n	800199e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	22a0      	movs	r2, #160	@ 0xa0
 800199a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	bf0c      	ite	eq
 80019ac:	2301      	moveq	r3, #1
 80019ae:	2300      	movne	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80019d6:	d005      	beq.n	80019e4 <HAL_I2C_IsDeviceReady+0x188>
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d102      	bne.n	80019e4 <HAL_I2C_IsDeviceReady+0x188>
 80019de:	7dbb      	ldrb	r3, [r7, #22]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0cd      	beq.n	8001980 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d129      	bne.n	8001a4e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a08:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2319      	movs	r3, #25
 8001a26:	2201      	movs	r2, #1
 8001a28:	4921      	ldr	r1, [pc, #132]	@ (8001ab0 <HAL_I2C_IsDeviceReady+0x254>)
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 f8c6 	bl	8001bbc <I2C_WaitOnFlagUntilTimeout>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e036      	b.n	8001aa8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e02c      	b.n	8001aa8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a66:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2319      	movs	r3, #25
 8001a6e:	2201      	movs	r2, #1
 8001a70:	490f      	ldr	r1, [pc, #60]	@ (8001ab0 <HAL_I2C_IsDeviceReady+0x254>)
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 f8a2 	bl	8001bbc <I2C_WaitOnFlagUntilTimeout>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e012      	b.n	8001aa8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	3301      	adds	r3, #1
 8001a86:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f4ff af32 	bcc.w	80018f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001aa6:	2302      	movs	r3, #2
  }
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	00100002 	.word	0x00100002
 8001ab4:	ffff0000 	.word	0xffff0000

08001ab8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001acc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d006      	beq.n	8001ae2 <I2C_MasterRequestWrite+0x2a>
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d003      	beq.n	8001ae2 <I2C_MasterRequestWrite+0x2a>
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ae0:	d108      	bne.n	8001af4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	e00b      	b.n	8001b0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af8:	2b12      	cmp	r3, #18
 8001afa:	d107      	bne.n	8001b0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f84f 	bl	8001bbc <I2C_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00d      	beq.n	8001b40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b32:	d103      	bne.n	8001b3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e035      	b.n	8001bac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b48:	d108      	bne.n	8001b5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b4a:	897b      	ldrh	r3, [r7, #10]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b58:	611a      	str	r2, [r3, #16]
 8001b5a:	e01b      	b.n	8001b94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b5c:	897b      	ldrh	r3, [r7, #10]
 8001b5e:	11db      	asrs	r3, r3, #7
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f003 0306 	and.w	r3, r3, #6
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f063 030f 	orn	r3, r3, #15
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	490e      	ldr	r1, [pc, #56]	@ (8001bb4 <I2C_MasterRequestWrite+0xfc>)
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f898 	bl	8001cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e010      	b.n	8001bac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b8a:	897b      	ldrh	r3, [r7, #10]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	4907      	ldr	r1, [pc, #28]	@ (8001bb8 <I2C_MasterRequestWrite+0x100>)
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f888 	bl	8001cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	00010008 	.word	0x00010008
 8001bb8:	00010002 	.word	0x00010002

08001bbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bcc:	e048      	b.n	8001c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d044      	beq.n	8001c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd6:	f7ff f951 	bl	8000e7c <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d302      	bcc.n	8001bec <I2C_WaitOnFlagUntilTimeout+0x30>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d139      	bne.n	8001c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	0c1b      	lsrs	r3, r3, #16
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d10d      	bne.n	8001c12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	43da      	mvns	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	4013      	ands	r3, r2
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf0c      	ite	eq
 8001c08:	2301      	moveq	r3, #1
 8001c0a:	2300      	movne	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	e00c      	b.n	8001c2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	43da      	mvns	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf0c      	ite	eq
 8001c24:	2301      	moveq	r3, #1
 8001c26:	2300      	movne	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d116      	bne.n	8001c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	f043 0220 	orr.w	r2, r3, #32
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e023      	b.n	8001ca8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d10d      	bne.n	8001c86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	43da      	mvns	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	4013      	ands	r3, r2
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	e00c      	b.n	8001ca0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	43da      	mvns	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	4013      	ands	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d093      	beq.n	8001bce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cbe:	e071      	b.n	8001da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cce:	d123      	bne.n	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ce8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	f043 0204 	orr.w	r2, r3, #4
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e067      	b.n	8001de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1e:	d041      	beq.n	8001da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d20:	f7ff f8ac 	bl	8000e7c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d302      	bcc.n	8001d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d136      	bne.n	8001da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d10c      	bne.n	8001d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	e00b      	b.n	8001d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	43da      	mvns	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	4013      	ands	r3, r2
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d016      	beq.n	8001da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	f043 0220 	orr.w	r2, r3, #32
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e021      	b.n	8001de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	0c1b      	lsrs	r3, r3, #16
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d10c      	bne.n	8001dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	43da      	mvns	r2, r3
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	4013      	ands	r3, r2
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf14      	ite	ne
 8001dc0:	2301      	movne	r3, #1
 8001dc2:	2300      	moveq	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	e00b      	b.n	8001de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bf14      	ite	ne
 8001dda:	2301      	movne	r3, #1
 8001ddc:	2300      	moveq	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f47f af6d 	bne.w	8001cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dfc:	e034      	b.n	8001e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f886 	bl	8001f10 <I2C_IsAcknowledgeFailed>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e034      	b.n	8001e78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e14:	d028      	beq.n	8001e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e16:	f7ff f831 	bl	8000e7c <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d302      	bcc.n	8001e2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d11d      	bne.n	8001e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e36:	2b80      	cmp	r3, #128	@ 0x80
 8001e38:	d016      	beq.n	8001e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	f043 0220 	orr.w	r2, r3, #32
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e007      	b.n	8001e78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e72:	2b80      	cmp	r3, #128	@ 0x80
 8001e74:	d1c3      	bne.n	8001dfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e8c:	e034      	b.n	8001ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 f83e 	bl	8001f10 <I2C_IsAcknowledgeFailed>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e034      	b.n	8001f08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d028      	beq.n	8001ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea6:	f7fe ffe9 	bl	8000e7c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d302      	bcc.n	8001ebc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d11d      	bne.n	8001ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d016      	beq.n	8001ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	f043 0220 	orr.w	r2, r3, #32
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e007      	b.n	8001f08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d1c3      	bne.n	8001e8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f26:	d11b      	bne.n	8001f60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	f043 0204 	orr.w	r2, r3, #4
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e272      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8087 	beq.w	800209a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f8c:	4b92      	ldr	r3, [pc, #584]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d00c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f98:	4b8f      	ldr	r3, [pc, #572]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d112      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
 8001fa4:	4b8c      	ldr	r3, [pc, #560]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb0:	d10b      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb2:	4b89      	ldr	r3, [pc, #548]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d06c      	beq.n	8002098 <HAL_RCC_OscConfig+0x12c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d168      	bne.n	8002098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e24c      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x76>
 8001fd4:	4b80      	ldr	r3, [pc, #512]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a7f      	ldr	r2, [pc, #508]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e02e      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x98>
 8001fea:	4b7b      	ldr	r3, [pc, #492]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7a      	ldr	r2, [pc, #488]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b78      	ldr	r3, [pc, #480]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a77      	ldr	r2, [pc, #476]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e01d      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0xbc>
 800200e:	4b72      	ldr	r3, [pc, #456]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a71      	ldr	r2, [pc, #452]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b6f      	ldr	r3, [pc, #444]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6e      	ldr	r2, [pc, #440]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002028:	4b6b      	ldr	r3, [pc, #428]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a6a      	ldr	r2, [pc, #424]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800202e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b68      	ldr	r3, [pc, #416]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a67      	ldr	r2, [pc, #412]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800203a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800203e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d013      	beq.n	8002070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7fe ff18 	bl	8000e7c <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002050:	f7fe ff14 	bl	8000e7c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	@ 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e200      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b5d      	ldr	r3, [pc, #372]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0xe4>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7fe ff04 	bl	8000e7c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7fe ff00 	bl	8000e7c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	@ 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e1ec      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	4b53      	ldr	r3, [pc, #332]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x10c>
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d063      	beq.n	800216e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a6:	4b4c      	ldr	r3, [pc, #304]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00b      	beq.n	80020ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020b2:	4b49      	ldr	r3, [pc, #292]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d11c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x18c>
 80020be:	4b46      	ldr	r3, [pc, #280]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d116      	bne.n	80020f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	4b43      	ldr	r3, [pc, #268]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e1c0      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b3d      	ldr	r3, [pc, #244]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4939      	ldr	r1, [pc, #228]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	e03a      	b.n	800216e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002100:	4b36      	ldr	r3, [pc, #216]	@ (80021dc <HAL_RCC_OscConfig+0x270>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7fe feb9 	bl	8000e7c <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210e:	f7fe feb5 	bl	8000e7c <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e1a1      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	4b2d      	ldr	r3, [pc, #180]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212c:	4b2a      	ldr	r3, [pc, #168]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4927      	ldr	r1, [pc, #156]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
 8002140:	e015      	b.n	800216e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002142:	4b26      	ldr	r3, [pc, #152]	@ (80021dc <HAL_RCC_OscConfig+0x270>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe fe98 	bl	8000e7c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002150:	f7fe fe94 	bl	8000e7c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e180      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	4b1d      	ldr	r3, [pc, #116]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d03a      	beq.n	80021f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d019      	beq.n	80021b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002182:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <HAL_RCC_OscConfig+0x274>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7fe fe78 	bl	8000e7c <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002190:	f7fe fe74 	bl	8000e7c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e160      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	4b0d      	ldr	r3, [pc, #52]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f000 faba 	bl	8002728 <RCC_Delay>
 80021b4:	e01c      	b.n	80021f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <HAL_RCC_OscConfig+0x274>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7fe fe5e 	bl	8000e7c <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c2:	e00f      	b.n	80021e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c4:	f7fe fe5a 	bl	8000e7c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d908      	bls.n	80021e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e146      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	42420000 	.word	0x42420000
 80021e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	4b92      	ldr	r3, [pc, #584]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e9      	bne.n	80021c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a6 	beq.w	800234a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002202:	4b8b      	ldr	r3, [pc, #556]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10d      	bne.n	800222a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	4b88      	ldr	r3, [pc, #544]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a87      	ldr	r2, [pc, #540]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002218:	61d3      	str	r3, [r2, #28]
 800221a:	4b85      	ldr	r3, [pc, #532]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002226:	2301      	movs	r3, #1
 8002228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b82      	ldr	r3, [pc, #520]	@ (8002434 <HAL_RCC_OscConfig+0x4c8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b7f      	ldr	r3, [pc, #508]	@ (8002434 <HAL_RCC_OscConfig+0x4c8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7e      	ldr	r2, [pc, #504]	@ (8002434 <HAL_RCC_OscConfig+0x4c8>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7fe fe1b 	bl	8000e7c <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224a:	f7fe fe17 	bl	8000e7c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b64      	cmp	r3, #100	@ 0x64
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e103      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b75      	ldr	r3, [pc, #468]	@ (8002434 <HAL_RCC_OscConfig+0x4c8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x312>
 8002270:	4b6f      	ldr	r3, [pc, #444]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4a6e      	ldr	r2, [pc, #440]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6213      	str	r3, [r2, #32]
 800227c:	e02d      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x334>
 8002286:	4b6a      	ldr	r3, [pc, #424]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a69      	ldr	r2, [pc, #420]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6213      	str	r3, [r2, #32]
 8002292:	4b67      	ldr	r3, [pc, #412]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a66      	ldr	r2, [pc, #408]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	6213      	str	r3, [r2, #32]
 800229e:	e01c      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d10c      	bne.n	80022c2 <HAL_RCC_OscConfig+0x356>
 80022a8:	4b61      	ldr	r3, [pc, #388]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a60      	ldr	r2, [pc, #384]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	6213      	str	r3, [r2, #32]
 80022b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	e00b      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 80022c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a5a      	ldr	r2, [pc, #360]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6213      	str	r3, [r2, #32]
 80022ce:	4b58      	ldr	r3, [pc, #352]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a57      	ldr	r2, [pc, #348]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d015      	beq.n	800230e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7fe fdcb 	bl	8000e7c <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7fe fdc7 	bl	8000e7c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0b1      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	4b4b      	ldr	r3, [pc, #300]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ee      	beq.n	80022ea <HAL_RCC_OscConfig+0x37e>
 800230c:	e014      	b.n	8002338 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7fe fdb5 	bl	8000e7c <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7fe fdb1 	bl	8000e7c <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e09b      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232c:	4b40      	ldr	r3, [pc, #256]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ee      	bne.n	8002316 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d105      	bne.n	800234a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233e:	4b3c      	ldr	r3, [pc, #240]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4a3b      	ldr	r2, [pc, #236]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002348:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8087 	beq.w	8002462 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002354:	4b36      	ldr	r3, [pc, #216]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d061      	beq.n	8002424 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d146      	bne.n	80023f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002368:	4b33      	ldr	r3, [pc, #204]	@ (8002438 <HAL_RCC_OscConfig+0x4cc>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7fe fd85 	bl	8000e7c <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7fe fd81 	bl	8000e7c <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e06d      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002388:	4b29      	ldr	r3, [pc, #164]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800239c:	d108      	bne.n	80023b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239e:	4b24      	ldr	r3, [pc, #144]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4921      	ldr	r1, [pc, #132]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a19      	ldr	r1, [r3, #32]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	430b      	orrs	r3, r1
 80023c2:	491b      	ldr	r1, [pc, #108]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <HAL_RCC_OscConfig+0x4cc>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe fd55 	bl	8000e7c <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7fe fd51 	bl	8000e7c <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e03d      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e8:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x46a>
 80023f4:	e035      	b.n	8002462 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b10      	ldr	r3, [pc, #64]	@ (8002438 <HAL_RCC_OscConfig+0x4cc>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe fd3e 	bl	8000e7c <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002404:	f7fe fd3a 	bl	8000e7c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e026      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x498>
 8002422:	e01e      	b.n	8002462 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d107      	bne.n	800243c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e019      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
 8002430:	40021000 	.word	0x40021000
 8002434:	40007000 	.word	0x40007000
 8002438:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800243c:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <HAL_RCC_OscConfig+0x500>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	429a      	cmp	r2, r3
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000

08002470 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0d0      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002484:	4b6a      	ldr	r3, [pc, #424]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d910      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b67      	ldr	r3, [pc, #412]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 0207 	bic.w	r2, r3, #7
 800249a:	4965      	ldr	r1, [pc, #404]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b63      	ldr	r3, [pc, #396]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0b8      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d020      	beq.n	8002502 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024cc:	4b59      	ldr	r3, [pc, #356]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a58      	ldr	r2, [pc, #352]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e4:	4b53      	ldr	r3, [pc, #332]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4a52      	ldr	r2, [pc, #328]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f0:	4b50      	ldr	r3, [pc, #320]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	494d      	ldr	r1, [pc, #308]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d040      	beq.n	8002590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b47      	ldr	r3, [pc, #284]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d115      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e07f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	4b41      	ldr	r3, [pc, #260]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e073      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253e:	4b3d      	ldr	r3, [pc, #244]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e06b      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254e:	4b39      	ldr	r3, [pc, #228]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f023 0203 	bic.w	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	4936      	ldr	r1, [pc, #216]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002560:	f7fe fc8c 	bl	8000e7c <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	e00a      	b.n	800257e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002568:	f7fe fc88 	bl	8000e7c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e053      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	4b2d      	ldr	r3, [pc, #180]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 020c 	and.w	r2, r3, #12
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	429a      	cmp	r2, r3
 800258e:	d1eb      	bne.n	8002568 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002590:	4b27      	ldr	r3, [pc, #156]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d210      	bcs.n	80025c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b24      	ldr	r3, [pc, #144]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 0207 	bic.w	r2, r3, #7
 80025a6:	4922      	ldr	r1, [pc, #136]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b20      	ldr	r3, [pc, #128]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e032      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025cc:	4b19      	ldr	r3, [pc, #100]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4916      	ldr	r1, [pc, #88]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ea:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	490e      	ldr	r1, [pc, #56]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fe:	f000 f821 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8002602:	4602      	mov	r2, r0
 8002604:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	490a      	ldr	r1, [pc, #40]	@ (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 8002610:	5ccb      	ldrb	r3, [r1, r3]
 8002612:	fa22 f303 	lsr.w	r3, r2, r3
 8002616:	4a09      	ldr	r2, [pc, #36]	@ (800263c <HAL_RCC_ClockConfig+0x1cc>)
 8002618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800261a:	4b09      	ldr	r3, [pc, #36]	@ (8002640 <HAL_RCC_ClockConfig+0x1d0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fbea 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40022000 	.word	0x40022000
 8002634:	40021000 	.word	0x40021000
 8002638:	08003084 	.word	0x08003084
 800263c:	20000000 	.word	0x20000000
 8002640:	20000004 	.word	0x20000004

08002644 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800265e:	4b1e      	ldr	r3, [pc, #120]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b04      	cmp	r3, #4
 800266c:	d002      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x30>
 800266e:	2b08      	cmp	r3, #8
 8002670:	d003      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x36>
 8002672:	e027      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002674:	4b19      	ldr	r3, [pc, #100]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002676:	613b      	str	r3, [r7, #16]
      break;
 8002678:	e027      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	0c9b      	lsrs	r3, r3, #18
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	4a17      	ldr	r2, [pc, #92]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002684:	5cd3      	ldrb	r3, [r2, r3]
 8002686:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d010      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002692:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	0c5b      	lsrs	r3, r3, #17
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	4a11      	ldr	r2, [pc, #68]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a0d      	ldr	r2, [pc, #52]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x98>)
 80026a6:	fb03 f202 	mul.w	r2, r3, r2
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e004      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a0c      	ldr	r2, [pc, #48]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	613b      	str	r3, [r7, #16]
      break;
 80026c2:	e002      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x98>)
 80026c6:	613b      	str	r3, [r7, #16]
      break;
 80026c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ca:	693b      	ldr	r3, [r7, #16]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
 80026dc:	007a1200 	.word	0x007a1200
 80026e0:	0800309c 	.word	0x0800309c
 80026e4:	080030ac 	.word	0x080030ac
 80026e8:	003d0900 	.word	0x003d0900

080026ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f0:	4b02      	ldr	r3, [pc, #8]	@ (80026fc <HAL_RCC_GetHCLKFreq+0x10>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	20000000 	.word	0x20000000

08002700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002704:	f7ff fff2 	bl	80026ec <HAL_RCC_GetHCLKFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b05      	ldr	r3, [pc, #20]	@ (8002720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	4903      	ldr	r1, [pc, #12]	@ (8002724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000
 8002724:	08003094 	.word	0x08003094

08002728 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002730:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <RCC_Delay+0x34>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <RCC_Delay+0x38>)
 8002736:	fba2 2303 	umull	r2, r3, r2, r3
 800273a:	0a5b      	lsrs	r3, r3, #9
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002744:	bf00      	nop
  }
  while (Delay --);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1e5a      	subs	r2, r3, #1
 800274a:	60fa      	str	r2, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f9      	bne.n	8002744 <RCC_Delay+0x1c>
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	20000000 	.word	0x20000000
 8002760:	10624dd3 	.word	0x10624dd3

08002764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d020      	beq.n	80027c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01b      	beq.n	80027c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0202 	mvn.w	r2, #2
 8002798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f8da 	bl	8002968 <HAL_TIM_IC_CaptureCallback>
 80027b4:	e005      	b.n	80027c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f8cd 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f8dc 	bl	800297a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d020      	beq.n	8002814 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01b      	beq.n	8002814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0204 	mvn.w	r2, #4
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2202      	movs	r2, #2
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f8b4 	bl	8002968 <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f8a7 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f8b6 	bl	800297a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d020      	beq.n	8002860 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01b      	beq.n	8002860 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0208 	mvn.w	r2, #8
 8002830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2204      	movs	r2, #4
 8002836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f88e 	bl	8002968 <HAL_TIM_IC_CaptureCallback>
 800284c:	e005      	b.n	800285a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f881 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f890 	bl	800297a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	d020      	beq.n	80028ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01b      	beq.n	80028ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0210 	mvn.w	r2, #16
 800287c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2208      	movs	r2, #8
 8002882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f868 	bl	8002968 <HAL_TIM_IC_CaptureCallback>
 8002898:	e005      	b.n	80028a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f85b 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f86a 	bl	800297a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00c      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0201 	mvn.w	r2, #1
 80028c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f83a 	bl	8002944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00c      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f85e 	bl	80029b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00c      	beq.n	8002918 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f83a 	bl	800298c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00c      	beq.n	800293c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0220 	mvn.w	r2, #32
 8002934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f831 	bl	800299e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <memset>:
 80029c2:	4603      	mov	r3, r0
 80029c4:	4402      	add	r2, r0
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d100      	bne.n	80029cc <memset+0xa>
 80029ca:	4770      	bx	lr
 80029cc:	f803 1b01 	strb.w	r1, [r3], #1
 80029d0:	e7f9      	b.n	80029c6 <memset+0x4>
	...

080029d4 <__libc_init_array>:
 80029d4:	b570      	push	{r4, r5, r6, lr}
 80029d6:	2600      	movs	r6, #0
 80029d8:	4d0c      	ldr	r5, [pc, #48]	@ (8002a0c <__libc_init_array+0x38>)
 80029da:	4c0d      	ldr	r4, [pc, #52]	@ (8002a10 <__libc_init_array+0x3c>)
 80029dc:	1b64      	subs	r4, r4, r5
 80029de:	10a4      	asrs	r4, r4, #2
 80029e0:	42a6      	cmp	r6, r4
 80029e2:	d109      	bne.n	80029f8 <__libc_init_array+0x24>
 80029e4:	f000 f81a 	bl	8002a1c <_init>
 80029e8:	2600      	movs	r6, #0
 80029ea:	4d0a      	ldr	r5, [pc, #40]	@ (8002a14 <__libc_init_array+0x40>)
 80029ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002a18 <__libc_init_array+0x44>)
 80029ee:	1b64      	subs	r4, r4, r5
 80029f0:	10a4      	asrs	r4, r4, #2
 80029f2:	42a6      	cmp	r6, r4
 80029f4:	d105      	bne.n	8002a02 <__libc_init_array+0x2e>
 80029f6:	bd70      	pop	{r4, r5, r6, pc}
 80029f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029fc:	4798      	blx	r3
 80029fe:	3601      	adds	r6, #1
 8002a00:	e7ee      	b.n	80029e0 <__libc_init_array+0xc>
 8002a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a06:	4798      	blx	r3
 8002a08:	3601      	adds	r6, #1
 8002a0a:	e7f2      	b.n	80029f2 <__libc_init_array+0x1e>
 8002a0c:	080030b0 	.word	0x080030b0
 8002a10:	080030b0 	.word	0x080030b0
 8002a14:	080030b0 	.word	0x080030b0
 8002a18:	080030b4 	.word	0x080030b4

08002a1c <_init>:
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1e:	bf00      	nop
 8002a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a22:	bc08      	pop	{r3}
 8002a24:	469e      	mov	lr, r3
 8002a26:	4770      	bx	lr

08002a28 <_fini>:
 8002a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2a:	bf00      	nop
 8002a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a2e:	bc08      	pop	{r3}
 8002a30:	469e      	mov	lr, r3
 8002a32:	4770      	bx	lr
