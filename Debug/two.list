
two.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003370  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  0800347c  0800347c  0000447c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004218  08004218  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  08004218  08004218  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004218  08004218  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004218  08004218  00005218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800421c  0800421c  0000521c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004220  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000014  08004234  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08004234  000065a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bdb  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a8  00000000  00000000  00016c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  000194c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9f  00000000  00000000  0001a600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018885  00000000  00000000  0001b39f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001418e  00000000  00000000  00033c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d7f2  00000000  00000000  00047db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d55a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004904  00000000  00000000  000d55e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d9eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003464 	.word	0x08003464

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003464 	.word	0x08003464

0800014c <__aeabi_f2iz>:
 800014c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000150:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000154:	d30f      	bcc.n	8000176 <__aeabi_f2iz+0x2a>
 8000156:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800015a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800015e:	d90d      	bls.n	800017c <__aeabi_f2iz+0x30>
 8000160:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000164:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000168:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800016c:	fa23 f002 	lsr.w	r0, r3, r2
 8000170:	bf18      	it	ne
 8000172:	4240      	negne	r0, r0
 8000174:	4770      	bx	lr
 8000176:	f04f 0000 	mov.w	r0, #0
 800017a:	4770      	bx	lr
 800017c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000180:	d101      	bne.n	8000186 <__aeabi_f2iz+0x3a>
 8000182:	0242      	lsls	r2, r0, #9
 8000184:	d105      	bne.n	8000192 <__aeabi_f2iz+0x46>
 8000186:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800018a:	bf08      	it	eq
 800018c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000190:	4770      	bx	lr
 8000192:	f04f 0000 	mov.w	r0, #0
 8000196:	4770      	bx	lr

08000198 <isTemperSensorInit>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);	
}
#else

uint8_t isTemperSensorInit(){
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	     return m_init;
 800019c:	4b02      	ldr	r3, [pc, #8]	@ (80001a8 <isTemperSensorInit+0x10>)
 800019e:	781b      	ldrb	r3, [r3, #0]
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000040 	.word	0x20000040

080001ac <isBusy>:

uint8_t isBusy(){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	return isBusyLine();
 80001b0:	f000 f80e 	bl	80001d0 <isBusyLine>
 80001b4:	4603      	mov	r3, r0
	//return m_busy;
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	bd80      	pop	{r7, pc}
	...

080001bc <getCurrentTemper>:
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
}


float getCurrentTemper(){
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
     return temperSensor.Temperature;
 80001c0:	4b02      	ldr	r3, [pc, #8]	@ (80001cc <getCurrentTemper+0x10>)
 80001c2:	689b      	ldr	r3, [r3, #8]
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	20000030 	.word	0x20000030

080001d0 <isBusyLine>:
#include "onewire.h"
#include "ds18b20Config.h"
//#include "tim.h"

static uint8_t m_busy_line = 0;
uint8_t isBusyLine(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	return m_busy_line;
 80001d4:	4b02      	ldr	r3, [pc, #8]	@ (80001e0 <isBusyLine+0x10>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
}
 80001d8:	4618      	mov	r0, r3
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	20000041 	.word	0x20000041

080001e4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80001ea:	f000 fa1d 	bl	8000628 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&H_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80001ee:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80001f2:	2201      	movs	r2, #1
 80001f4:	2178      	movs	r1, #120	@ 0x78
 80001f6:	485b      	ldr	r0, [pc, #364]	@ (8000364 <SSD1306_Init+0x180>)
 80001f8:	f001 fcea 	bl	8001bd0 <HAL_I2C_IsDeviceReady>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000202:	2300      	movs	r3, #0
 8000204:	e0a9      	b.n	800035a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000206:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800020a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800020c:	e002      	b.n	8000214 <SSD1306_Init+0x30>
		p--;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	3b01      	subs	r3, #1
 8000212:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d1f9      	bne.n	800020e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800021a:	22ae      	movs	r2, #174	@ 0xae
 800021c:	2100      	movs	r1, #0
 800021e:	2078      	movs	r0, #120	@ 0x78
 8000220:	f000 fa7c 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000224:	2220      	movs	r2, #32
 8000226:	2100      	movs	r1, #0
 8000228:	2078      	movs	r0, #120	@ 0x78
 800022a:	f000 fa77 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800022e:	2210      	movs	r2, #16
 8000230:	2100      	movs	r1, #0
 8000232:	2078      	movs	r0, #120	@ 0x78
 8000234:	f000 fa72 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000238:	22b0      	movs	r2, #176	@ 0xb0
 800023a:	2100      	movs	r1, #0
 800023c:	2078      	movs	r0, #120	@ 0x78
 800023e:	f000 fa6d 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000242:	22c8      	movs	r2, #200	@ 0xc8
 8000244:	2100      	movs	r1, #0
 8000246:	2078      	movs	r0, #120	@ 0x78
 8000248:	f000 fa68 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800024c:	2200      	movs	r2, #0
 800024e:	2100      	movs	r1, #0
 8000250:	2078      	movs	r0, #120	@ 0x78
 8000252:	f000 fa63 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000256:	2210      	movs	r2, #16
 8000258:	2100      	movs	r1, #0
 800025a:	2078      	movs	r0, #120	@ 0x78
 800025c:	f000 fa5e 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000260:	2240      	movs	r2, #64	@ 0x40
 8000262:	2100      	movs	r1, #0
 8000264:	2078      	movs	r0, #120	@ 0x78
 8000266:	f000 fa59 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800026a:	2281      	movs	r2, #129	@ 0x81
 800026c:	2100      	movs	r1, #0
 800026e:	2078      	movs	r0, #120	@ 0x78
 8000270:	f000 fa54 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000274:	22ff      	movs	r2, #255	@ 0xff
 8000276:	2100      	movs	r1, #0
 8000278:	2078      	movs	r0, #120	@ 0x78
 800027a:	f000 fa4f 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800027e:	22a1      	movs	r2, #161	@ 0xa1
 8000280:	2100      	movs	r1, #0
 8000282:	2078      	movs	r0, #120	@ 0x78
 8000284:	f000 fa4a 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000288:	22a6      	movs	r2, #166	@ 0xa6
 800028a:	2100      	movs	r1, #0
 800028c:	2078      	movs	r0, #120	@ 0x78
 800028e:	f000 fa45 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000292:	22a8      	movs	r2, #168	@ 0xa8
 8000294:	2100      	movs	r1, #0
 8000296:	2078      	movs	r0, #120	@ 0x78
 8000298:	f000 fa40 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800029c:	223f      	movs	r2, #63	@ 0x3f
 800029e:	2100      	movs	r1, #0
 80002a0:	2078      	movs	r0, #120	@ 0x78
 80002a2:	f000 fa3b 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80002a6:	22a4      	movs	r2, #164	@ 0xa4
 80002a8:	2100      	movs	r1, #0
 80002aa:	2078      	movs	r0, #120	@ 0x78
 80002ac:	f000 fa36 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80002b0:	22d3      	movs	r2, #211	@ 0xd3
 80002b2:	2100      	movs	r1, #0
 80002b4:	2078      	movs	r0, #120	@ 0x78
 80002b6:	f000 fa31 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80002ba:	2200      	movs	r2, #0
 80002bc:	2100      	movs	r1, #0
 80002be:	2078      	movs	r0, #120	@ 0x78
 80002c0:	f000 fa2c 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80002c4:	22d5      	movs	r2, #213	@ 0xd5
 80002c6:	2100      	movs	r1, #0
 80002c8:	2078      	movs	r0, #120	@ 0x78
 80002ca:	f000 fa27 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80002ce:	22f0      	movs	r2, #240	@ 0xf0
 80002d0:	2100      	movs	r1, #0
 80002d2:	2078      	movs	r0, #120	@ 0x78
 80002d4:	f000 fa22 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80002d8:	22d9      	movs	r2, #217	@ 0xd9
 80002da:	2100      	movs	r1, #0
 80002dc:	2078      	movs	r0, #120	@ 0x78
 80002de:	f000 fa1d 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80002e2:	2222      	movs	r2, #34	@ 0x22
 80002e4:	2100      	movs	r1, #0
 80002e6:	2078      	movs	r0, #120	@ 0x78
 80002e8:	f000 fa18 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80002ec:	22da      	movs	r2, #218	@ 0xda
 80002ee:	2100      	movs	r1, #0
 80002f0:	2078      	movs	r0, #120	@ 0x78
 80002f2:	f000 fa13 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80002f6:	2212      	movs	r2, #18
 80002f8:	2100      	movs	r1, #0
 80002fa:	2078      	movs	r0, #120	@ 0x78
 80002fc:	f000 fa0e 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000300:	22db      	movs	r2, #219	@ 0xdb
 8000302:	2100      	movs	r1, #0
 8000304:	2078      	movs	r0, #120	@ 0x78
 8000306:	f000 fa09 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800030a:	2220      	movs	r2, #32
 800030c:	2100      	movs	r1, #0
 800030e:	2078      	movs	r0, #120	@ 0x78
 8000310:	f000 fa04 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000314:	228d      	movs	r2, #141	@ 0x8d
 8000316:	2100      	movs	r1, #0
 8000318:	2078      	movs	r0, #120	@ 0x78
 800031a:	f000 f9ff 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800031e:	2214      	movs	r2, #20
 8000320:	2100      	movs	r1, #0
 8000322:	2078      	movs	r0, #120	@ 0x78
 8000324:	f000 f9fa 	bl	800071c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000328:	22af      	movs	r2, #175	@ 0xaf
 800032a:	2100      	movs	r1, #0
 800032c:	2078      	movs	r0, #120	@ 0x78
 800032e:	f000 f9f5 	bl	800071c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000332:	222e      	movs	r2, #46	@ 0x2e
 8000334:	2100      	movs	r1, #0
 8000336:	2078      	movs	r0, #120	@ 0x78
 8000338:	f000 f9f0 	bl	800071c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800033c:	2000      	movs	r0, #0
 800033e:	f000 f843 	bl	80003c8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000342:	f000 f813 	bl	800036c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000346:	4b08      	ldr	r3, [pc, #32]	@ (8000368 <SSD1306_Init+0x184>)
 8000348:	2200      	movs	r2, #0
 800034a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800034c:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <SSD1306_Init+0x184>)
 800034e:	2200      	movs	r2, #0
 8000350:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000352:	4b05      	ldr	r3, [pc, #20]	@ (8000368 <SSD1306_Init+0x184>)
 8000354:	2201      	movs	r2, #1
 8000356:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000358:	2301      	movs	r3, #1
}
 800035a:	4618      	mov	r0, r3
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000046c 	.word	0x2000046c
 8000368:	20000444 	.word	0x20000444

0800036c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000372:	2300      	movs	r3, #0
 8000374:	71fb      	strb	r3, [r7, #7]
 8000376:	e01d      	b.n	80003b4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	3b50      	subs	r3, #80	@ 0x50
 800037c:	b2db      	uxtb	r3, r3
 800037e:	461a      	mov	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	2078      	movs	r0, #120	@ 0x78
 8000384:	f000 f9ca 	bl	800071c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000388:	2200      	movs	r2, #0
 800038a:	2100      	movs	r1, #0
 800038c:	2078      	movs	r0, #120	@ 0x78
 800038e:	f000 f9c5 	bl	800071c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000392:	2210      	movs	r2, #16
 8000394:	2100      	movs	r1, #0
 8000396:	2078      	movs	r0, #120	@ 0x78
 8000398:	f000 f9c0 	bl	800071c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	01db      	lsls	r3, r3, #7
 80003a0:	4a08      	ldr	r2, [pc, #32]	@ (80003c4 <SSD1306_UpdateScreen+0x58>)
 80003a2:	441a      	add	r2, r3
 80003a4:	2380      	movs	r3, #128	@ 0x80
 80003a6:	2140      	movs	r1, #64	@ 0x40
 80003a8:	2078      	movs	r0, #120	@ 0x78
 80003aa:	f000 f951 	bl	8000650 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	3301      	adds	r3, #1
 80003b2:	71fb      	strb	r3, [r7, #7]
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	2b07      	cmp	r3, #7
 80003b8:	d9de      	bls.n	8000378 <SSD1306_UpdateScreen+0xc>
	}
}
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000044 	.word	0x20000044

080003c8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d101      	bne.n	80003dc <SSD1306_Fill+0x14>
 80003d8:	2300      	movs	r3, #0
 80003da:	e000      	b.n	80003de <SSD1306_Fill+0x16>
 80003dc:	23ff      	movs	r3, #255	@ 0xff
 80003de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80003e2:	4619      	mov	r1, r3
 80003e4:	4803      	ldr	r0, [pc, #12]	@ (80003f4 <SSD1306_Fill+0x2c>)
 80003e6:	f003 f811 	bl	800340c <memset>
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000044 	.word	0x20000044

080003f8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	80fb      	strh	r3, [r7, #6]
 8000402:	460b      	mov	r3, r1
 8000404:	80bb      	strh	r3, [r7, #4]
 8000406:	4613      	mov	r3, r2
 8000408:	70fb      	strb	r3, [r7, #3]
	if (
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	2b7f      	cmp	r3, #127	@ 0x7f
 800040e:	d848      	bhi.n	80004a2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000410:	88bb      	ldrh	r3, [r7, #4]
 8000412:	2b3f      	cmp	r3, #63	@ 0x3f
 8000414:	d845      	bhi.n	80004a2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000416:	4b25      	ldr	r3, [pc, #148]	@ (80004ac <SSD1306_DrawPixel+0xb4>)
 8000418:	791b      	ldrb	r3, [r3, #4]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d006      	beq.n	800042c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800041e:	78fb      	ldrb	r3, [r7, #3]
 8000420:	2b00      	cmp	r3, #0
 8000422:	bf0c      	ite	eq
 8000424:	2301      	moveq	r3, #1
 8000426:	2300      	movne	r3, #0
 8000428:	b2db      	uxtb	r3, r3
 800042a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800042c:	78fb      	ldrb	r3, [r7, #3]
 800042e:	2b01      	cmp	r3, #1
 8000430:	d11a      	bne.n	8000468 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000432:	88fa      	ldrh	r2, [r7, #6]
 8000434:	88bb      	ldrh	r3, [r7, #4]
 8000436:	08db      	lsrs	r3, r3, #3
 8000438:	b298      	uxth	r0, r3
 800043a:	4603      	mov	r3, r0
 800043c:	01db      	lsls	r3, r3, #7
 800043e:	4413      	add	r3, r2
 8000440:	4a1b      	ldr	r2, [pc, #108]	@ (80004b0 <SSD1306_DrawPixel+0xb8>)
 8000442:	5cd3      	ldrb	r3, [r2, r3]
 8000444:	b25a      	sxtb	r2, r3
 8000446:	88bb      	ldrh	r3, [r7, #4]
 8000448:	f003 0307 	and.w	r3, r3, #7
 800044c:	2101      	movs	r1, #1
 800044e:	fa01 f303 	lsl.w	r3, r1, r3
 8000452:	b25b      	sxtb	r3, r3
 8000454:	4313      	orrs	r3, r2
 8000456:	b259      	sxtb	r1, r3
 8000458:	88fa      	ldrh	r2, [r7, #6]
 800045a:	4603      	mov	r3, r0
 800045c:	01db      	lsls	r3, r3, #7
 800045e:	4413      	add	r3, r2
 8000460:	b2c9      	uxtb	r1, r1
 8000462:	4a13      	ldr	r2, [pc, #76]	@ (80004b0 <SSD1306_DrawPixel+0xb8>)
 8000464:	54d1      	strb	r1, [r2, r3]
 8000466:	e01d      	b.n	80004a4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000468:	88fa      	ldrh	r2, [r7, #6]
 800046a:	88bb      	ldrh	r3, [r7, #4]
 800046c:	08db      	lsrs	r3, r3, #3
 800046e:	b298      	uxth	r0, r3
 8000470:	4603      	mov	r3, r0
 8000472:	01db      	lsls	r3, r3, #7
 8000474:	4413      	add	r3, r2
 8000476:	4a0e      	ldr	r2, [pc, #56]	@ (80004b0 <SSD1306_DrawPixel+0xb8>)
 8000478:	5cd3      	ldrb	r3, [r2, r3]
 800047a:	b25a      	sxtb	r2, r3
 800047c:	88bb      	ldrh	r3, [r7, #4]
 800047e:	f003 0307 	and.w	r3, r3, #7
 8000482:	2101      	movs	r1, #1
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	b25b      	sxtb	r3, r3
 800048a:	43db      	mvns	r3, r3
 800048c:	b25b      	sxtb	r3, r3
 800048e:	4013      	ands	r3, r2
 8000490:	b259      	sxtb	r1, r3
 8000492:	88fa      	ldrh	r2, [r7, #6]
 8000494:	4603      	mov	r3, r0
 8000496:	01db      	lsls	r3, r3, #7
 8000498:	4413      	add	r3, r2
 800049a:	b2c9      	uxtb	r1, r1
 800049c:	4a04      	ldr	r2, [pc, #16]	@ (80004b0 <SSD1306_DrawPixel+0xb8>)
 800049e:	54d1      	strb	r1, [r2, r3]
 80004a0:	e000      	b.n	80004a4 <SSD1306_DrawPixel+0xac>
		return;
 80004a2:	bf00      	nop
	}
}
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	20000444 	.word	0x20000444
 80004b0:	20000044 	.word	0x20000044

080004b4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	460a      	mov	r2, r1
 80004be:	80fb      	strh	r3, [r7, #6]
 80004c0:	4613      	mov	r3, r2
 80004c2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80004c4:	4a05      	ldr	r2, [pc, #20]	@ (80004dc <SSD1306_GotoXY+0x28>)
 80004c6:	88fb      	ldrh	r3, [r7, #6]
 80004c8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80004ca:	4a04      	ldr	r2, [pc, #16]	@ (80004dc <SSD1306_GotoXY+0x28>)
 80004cc:	88bb      	ldrh	r3, [r7, #4]
 80004ce:	8053      	strh	r3, [r2, #2]
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	20000444 	.word	0x20000444

080004e0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	6039      	str	r1, [r7, #0]
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	4613      	mov	r3, r2
 80004ee:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80004f0:	4b39      	ldr	r3, [pc, #228]	@ (80005d8 <SSD1306_Putc+0xf8>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	461a      	mov	r2, r3
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	4413      	add	r3, r2
	if (
 80004fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80004fe:	dc07      	bgt.n	8000510 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000500:	4b35      	ldr	r3, [pc, #212]	@ (80005d8 <SSD1306_Putc+0xf8>)
 8000502:	885b      	ldrh	r3, [r3, #2]
 8000504:	461a      	mov	r2, r3
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	785b      	ldrb	r3, [r3, #1]
 800050a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800050c:	2b3f      	cmp	r3, #63	@ 0x3f
 800050e:	dd01      	ble.n	8000514 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000510:	2300      	movs	r3, #0
 8000512:	e05d      	b.n	80005d0 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e04b      	b.n	80005b2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	685a      	ldr	r2, [r3, #4]
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	3b20      	subs	r3, #32
 8000522:	6839      	ldr	r1, [r7, #0]
 8000524:	7849      	ldrb	r1, [r1, #1]
 8000526:	fb01 f303 	mul.w	r3, r1, r3
 800052a:	4619      	mov	r1, r3
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	440b      	add	r3, r1
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	4413      	add	r3, r2
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000538:	2300      	movs	r3, #0
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	e030      	b.n	80005a0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800054a:	2b00      	cmp	r3, #0
 800054c:	d010      	beq.n	8000570 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800054e:	4b22      	ldr	r3, [pc, #136]	@ (80005d8 <SSD1306_Putc+0xf8>)
 8000550:	881a      	ldrh	r2, [r3, #0]
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	b29b      	uxth	r3, r3
 8000556:	4413      	add	r3, r2
 8000558:	b298      	uxth	r0, r3
 800055a:	4b1f      	ldr	r3, [pc, #124]	@ (80005d8 <SSD1306_Putc+0xf8>)
 800055c:	885a      	ldrh	r2, [r3, #2]
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	b29b      	uxth	r3, r3
 8000562:	4413      	add	r3, r2
 8000564:	b29b      	uxth	r3, r3
 8000566:	79ba      	ldrb	r2, [r7, #6]
 8000568:	4619      	mov	r1, r3
 800056a:	f7ff ff45 	bl	80003f8 <SSD1306_DrawPixel>
 800056e:	e014      	b.n	800059a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000570:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <SSD1306_Putc+0xf8>)
 8000572:	881a      	ldrh	r2, [r3, #0]
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	b29b      	uxth	r3, r3
 8000578:	4413      	add	r3, r2
 800057a:	b298      	uxth	r0, r3
 800057c:	4b16      	ldr	r3, [pc, #88]	@ (80005d8 <SSD1306_Putc+0xf8>)
 800057e:	885a      	ldrh	r2, [r3, #2]
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	b29b      	uxth	r3, r3
 8000584:	4413      	add	r3, r2
 8000586:	b299      	uxth	r1, r3
 8000588:	79bb      	ldrb	r3, [r7, #6]
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf0c      	ite	eq
 800058e:	2301      	moveq	r3, #1
 8000590:	2300      	movne	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	461a      	mov	r2, r3
 8000596:	f7ff ff2f 	bl	80003f8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	3301      	adds	r3, #1
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d3c8      	bcc.n	800053e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	3301      	adds	r3, #1
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	785b      	ldrb	r3, [r3, #1]
 80005b6:	461a      	mov	r2, r3
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d3ad      	bcc.n	800051a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80005be:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <SSD1306_Putc+0xf8>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	683a      	ldr	r2, [r7, #0]
 80005c4:	7812      	ldrb	r2, [r2, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	4b03      	ldr	r3, [pc, #12]	@ (80005d8 <SSD1306_Putc+0xf8>)
 80005cc:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000444 	.word	0x20000444

080005dc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	4613      	mov	r3, r2
 80005e8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80005ea:	e012      	b.n	8000612 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	79fa      	ldrb	r2, [r7, #7]
 80005f2:	68b9      	ldr	r1, [r7, #8]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff73 	bl	80004e0 <SSD1306_Putc>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	429a      	cmp	r2, r3
 8000604:	d002      	beq.n	800060c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	e008      	b.n	800061e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	3301      	adds	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1e8      	bne.n	80005ec <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	781b      	ldrb	r3, [r3, #0]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800062e:	4b07      	ldr	r3, [pc, #28]	@ (800064c <ssd1306_I2C_Init+0x24>)
 8000630:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000632:	e002      	b.n	800063a <ssd1306_I2C_Init+0x12>
		p--;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3b01      	subs	r3, #1
 8000638:	607b      	str	r3, [r7, #4]
	while(p>0)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f9      	bne.n	8000634 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&H_I2C);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	0003d090 	.word	0x0003d090

08000650 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b0c7      	sub	sp, #284	@ 0x11c
 8000654:	af02      	add	r7, sp, #8
 8000656:	4604      	mov	r4, r0
 8000658:	4608      	mov	r0, r1
 800065a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800065e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000662:	600a      	str	r2, [r1, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800066a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800066e:	4622      	mov	r2, r4
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000676:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800067a:	4602      	mov	r2, r0
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000682:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000686:	460a      	mov	r2, r1
 8000688:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800068a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800068e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000692:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000696:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800069a:	7812      	ldrb	r2, [r2, #0]
 800069c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80006a4:	e015      	b.n	80006d2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80006a6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80006aa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80006ae:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80006b2:	6812      	ldr	r2, [r2, #0]
 80006b4:	441a      	add	r2, r3
 80006b6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80006ba:	3301      	adds	r3, #1
 80006bc:	7811      	ldrb	r1, [r2, #0]
 80006be:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80006c2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80006c6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80006c8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80006cc:	3301      	adds	r3, #1
 80006ce:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80006d2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80006dc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80006e0:	8812      	ldrh	r2, [r2, #0]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d8df      	bhi.n	80006a6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&H_I2C, address, dt, count+1, 10);
 80006e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006ea:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b299      	uxth	r1, r3
 80006f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	b29b      	uxth	r3, r3
 8000700:	f107 020c 	add.w	r2, r7, #12
 8000704:	200a      	movs	r0, #10
 8000706:	9000      	str	r0, [sp, #0]
 8000708:	4803      	ldr	r0, [pc, #12]	@ (8000718 <ssd1306_I2C_WriteMulti+0xc8>)
 800070a:	f001 f963 	bl	80019d4 <HAL_I2C_Master_Transmit>
}
 800070e:	bf00      	nop
 8000710:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	2000046c 	.word	0x2000046c

0800071c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af02      	add	r7, sp, #8
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
 8000726:	460b      	mov	r3, r1
 8000728:	71bb      	strb	r3, [r7, #6]
 800072a:	4613      	mov	r3, r2
 800072c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800072e:	79bb      	ldrb	r3, [r7, #6]
 8000730:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000732:	797b      	ldrb	r3, [r7, #5]
 8000734:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&H_I2C, address, dt, 2, 10);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	b299      	uxth	r1, r3
 800073a:	f107 020c 	add.w	r2, r7, #12
 800073e:	230a      	movs	r3, #10
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2302      	movs	r3, #2
 8000744:	4803      	ldr	r0, [pc, #12]	@ (8000754 <ssd1306_I2C_Write+0x38>)
 8000746:	f001 f945 	bl	80019d4 <HAL_I2C_Master_Transmit>
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000046c 	.word	0x2000046c

08000758 <send>:
	_LED_0F[26] = 0xC1; //U
	_LED_0F[27] = 0x91; //Y
	_LED_0F[28] = 0xFE; //hight -
}

void send(uint8_t X) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]

	for (int i = 8; i >= 1; i--) {
 8000762:	2308      	movs	r3, #8
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e022      	b.n	80007ae <send+0x56>
		if (X & 0x80) {
 8000768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076c:	2b00      	cmp	r3, #0
 800076e:	da06      	bge.n	800077e <send+0x26>
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, HIGH);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000776:	4812      	ldr	r0, [pc, #72]	@ (80007c0 <send+0x68>)
 8000778:	f000 ffd0 	bl	800171c <HAL_GPIO_WritePin>
 800077c:	e005      	b.n	800078a <send+0x32>
		} else {
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, LOW);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000784:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <send+0x68>)
 8000786:	f000 ffc9 	bl	800171c <HAL_GPIO_WritePin>
		}
		X <<= 1;
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, HIGH);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000796:	480a      	ldr	r0, [pc, #40]	@ (80007c0 <send+0x68>)
 8000798:	f000 ffc0 	bl	800171c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, LOW);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007a2:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <send+0x68>)
 80007a4:	f000 ffba 	bl	800171c <HAL_GPIO_WritePin>
	for (int i = 8; i >= 1; i--) {
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dcd9      	bgt.n	8000768 <send+0x10>
	}
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40010c00 	.word	0x40010c00

080007c4 <send_port>:

void send_port(uint8_t X, uint8_t port) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71bb      	strb	r3, [r7, #6]
	send(X);
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ffbe 	bl	8000758 <send>
	send(port);
 80007dc:	79bb      	ldrb	r3, [r7, #6]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffba 	bl	8000758 <send>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ea:	4806      	ldr	r0, [pc, #24]	@ (8000804 <send_port+0x40>)
 80007ec:	f000 ff96 	bl	800171c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f6:	4803      	ldr	r0, [pc, #12]	@ (8000804 <send_port+0x40>)
 80007f8:	f000 ff90 	bl	800171c <HAL_GPIO_WritePin>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40010c00 	.word	0x40010c00

08000808 <digit4_temper>:
			send_port(_LED_0F[n4], 0b1000);
	}
}

static uint8_t m_tempercount = 0;
void digit4_temper(int temper) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	int n1, n2, n3, n4;
	n1 = (int) temper % 10;
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4b55      	ldr	r3, [pc, #340]	@ (8000968 <digit4_temper+0x160>)
 8000814:	fb83 1302 	smull	r1, r3, r3, r2
 8000818:	1099      	asrs	r1, r3, #2
 800081a:	17d3      	asrs	r3, r2, #31
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	460b      	mov	r3, r1
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	440b      	add	r3, r1
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	617b      	str	r3, [r7, #20]
	n2 = (int) ((temper % 100)) / 10;
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	4b4f      	ldr	r3, [pc, #316]	@ (800096c <digit4_temper+0x164>)
 800082e:	fb83 1302 	smull	r1, r3, r3, r2
 8000832:	1159      	asrs	r1, r3, #5
 8000834:	17d3      	asrs	r3, r2, #31
 8000836:	1acb      	subs	r3, r1, r3
 8000838:	2164      	movs	r1, #100	@ 0x64
 800083a:	fb01 f303 	mul.w	r3, r1, r3
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	4a49      	ldr	r2, [pc, #292]	@ (8000968 <digit4_temper+0x160>)
 8000842:	fb82 1203 	smull	r1, r2, r2, r3
 8000846:	1092      	asrs	r2, r2, #2
 8000848:	17db      	asrs	r3, r3, #31
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	613b      	str	r3, [r7, #16]
	n3 = (int) ((temper % 1000)) / 100;
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4b47      	ldr	r3, [pc, #284]	@ (8000970 <digit4_temper+0x168>)
 8000852:	fb83 1302 	smull	r1, r3, r3, r2
 8000856:	1199      	asrs	r1, r3, #6
 8000858:	17d3      	asrs	r3, r2, #31
 800085a:	1acb      	subs	r3, r1, r3
 800085c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000860:	fb01 f303 	mul.w	r3, r1, r3
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	4a41      	ldr	r2, [pc, #260]	@ (800096c <digit4_temper+0x164>)
 8000868:	fb82 1203 	smull	r1, r2, r2, r3
 800086c:	1152      	asrs	r2, r2, #5
 800086e:	17db      	asrs	r3, r3, #31
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	60fb      	str	r3, [r7, #12]
	n4 = (int) ((temper % 10000)) / 1000;
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	4b3f      	ldr	r3, [pc, #252]	@ (8000974 <digit4_temper+0x16c>)
 8000878:	fb83 1302 	smull	r1, r3, r3, r2
 800087c:	1319      	asrs	r1, r3, #12
 800087e:	17d3      	asrs	r3, r2, #31
 8000880:	1acb      	subs	r3, r1, r3
 8000882:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000886:	fb01 f303 	mul.w	r3, r1, r3
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	4a38      	ldr	r2, [pc, #224]	@ (8000970 <digit4_temper+0x168>)
 800088e:	fb82 1203 	smull	r1, r2, r2, r3
 8000892:	1192      	asrs	r2, r2, #6
 8000894:	17db      	asrs	r3, r3, #31
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	60bb      	str	r3, [r7, #8]

	switch (m_tempercount) {
 800089a:	4b37      	ldr	r3, [pc, #220]	@ (8000978 <digit4_temper+0x170>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b03      	cmp	r3, #3
 80008a0:	d835      	bhi.n	800090e <digit4_temper+0x106>
 80008a2:	a201      	add	r2, pc, #4	@ (adr r2, 80008a8 <digit4_temper+0xa0>)
 80008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a8:	080008b9 	.word	0x080008b9
 80008ac:	080008cb 	.word	0x080008cb
 80008b0:	080008dd 	.word	0x080008dd
 80008b4:	080008f5 	.word	0x080008f5
	case 0:
		send_port(_LED_0F[n1], 0b0001);
 80008b8:	4a30      	ldr	r2, [pc, #192]	@ (800097c <digit4_temper+0x174>)
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	4413      	add	r3, r2
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2101      	movs	r1, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff7e 	bl	80007c4 <send_port>
		break;
 80008c8:	e022      	b.n	8000910 <digit4_temper+0x108>
	case 1:
		send_port(_LED_0F[n2], 0b0010);
 80008ca:	4a2c      	ldr	r2, [pc, #176]	@ (800097c <digit4_temper+0x174>)
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	4413      	add	r3, r2
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2102      	movs	r1, #2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff75 	bl	80007c4 <send_port>
		break;
 80008da:	e019      	b.n	8000910 <digit4_temper+0x108>
	case 2:
		if (temper > 99){
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b63      	cmp	r3, #99	@ 0x63
 80008e0:	dd08      	ble.n	80008f4 <digit4_temper+0xec>
			send_port(_LED_0F[n3], 0b0100);
 80008e2:	4a26      	ldr	r2, [pc, #152]	@ (800097c <digit4_temper+0x174>)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2104      	movs	r1, #4
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff69 	bl	80007c4 <send_port>
		break;
 80008f2:	e00d      	b.n	8000910 <digit4_temper+0x108>
		}
    case 3:
		if (temper > 999){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008fa:	db08      	blt.n	800090e <digit4_temper+0x106>
			send_port(_LED_0F[n4], 0b1000);
 80008fc:	4a1f      	ldr	r2, [pc, #124]	@ (800097c <digit4_temper+0x174>)
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	4413      	add	r3, r2
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2108      	movs	r1, #8
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff5c 	bl	80007c4 <send_port>
		break;
 800090c:	e000      	b.n	8000910 <digit4_temper+0x108>
		}
	default:
		break;
 800090e:	bf00      	nop
	}

	m_tempercount++;
 8000910:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <digit4_temper+0x170>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <digit4_temper+0x170>)
 800091a:	701a      	strb	r2, [r3, #0]

	if (temper > 999 && m_tempercount >= 4) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000922:	db07      	blt.n	8000934 <digit4_temper+0x12c>
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <digit4_temper+0x170>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b03      	cmp	r3, #3
 800092a:	d903      	bls.n	8000934 <digit4_temper+0x12c>
				m_tempercount = 0;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <digit4_temper+0x170>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	e015      	b.n	8000960 <digit4_temper+0x158>
	}else if(temper > 99 && m_tempercount >= 3){
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b63      	cmp	r3, #99	@ 0x63
 8000938:	dd07      	ble.n	800094a <digit4_temper+0x142>
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <digit4_temper+0x170>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d903      	bls.n	800094a <digit4_temper+0x142>
				m_tempercount = 0;
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <digit4_temper+0x170>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	e00a      	b.n	8000960 <digit4_temper+0x158>
	}else if(temper <= 99 && m_tempercount >= 2){
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b63      	cmp	r3, #99	@ 0x63
 800094e:	dc07      	bgt.n	8000960 <digit4_temper+0x158>
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <digit4_temper+0x170>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d903      	bls.n	8000960 <digit4_temper+0x158>
				m_tempercount = 0;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <digit4_temper+0x170>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
			}

}
 800095e:	e7ff      	b.n	8000960 <digit4_temper+0x158>
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	66666667 	.word	0x66666667
 800096c:	51eb851f 	.word	0x51eb851f
 8000970:	10624dd3 	.word	0x10624dd3
 8000974:	68db8bad 	.word	0x68db8bad
 8000978:	20000469 	.word	0x20000469
 800097c:	2000044c 	.word	0x2000044c

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 fbb2 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f830 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f000 f964 	bl	8000c58 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000990:	f000 f938 	bl	8000c04 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000994:	f000 f89e 	bl	8000ad4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000998:	f000 f8e8 	bl	8000b6c <MX_TIM3_Init>
  MX_I2C2_Init();
 800099c:	f000 f86c 	bl	8000a78 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80009a0:	f7ff fc20 	bl	80001e4 <SSD1306_Init>


  SSD1306_GotoXY (0,0);
 80009a4:	2100      	movs	r1, #0
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fd84 	bl	80004b4 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	490c      	ldr	r1, [pc, #48]	@ (80009e0 <main+0x60>)
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <main+0x64>)
 80009b2:	f7ff fe13 	bl	80005dc <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 80009b6:	211e      	movs	r1, #30
 80009b8:	200a      	movs	r0, #10
 80009ba:	f7ff fd7b 	bl	80004b4 <SSD1306_GotoXY>
  SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 80009be:	2201      	movs	r2, #1
 80009c0:	4907      	ldr	r1, [pc, #28]	@ (80009e0 <main+0x60>)
 80009c2:	4809      	ldr	r0, [pc, #36]	@ (80009e8 <main+0x68>)
 80009c4:	f7ff fe0a 	bl	80005dc <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 80009c8:	f7ff fcd0 	bl	800036c <SSD1306_UpdateScreen>
  HAL_Delay (2000);
 80009cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009d0:	f000 fbee 	bl	80011b0 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
  {
	   HAL_Delay (2000);
 80009d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009d8:	f000 fbea 	bl	80011b0 <HAL_Delay>
 80009dc:	e7fa      	b.n	80009d4 <main+0x54>
 80009de:	bf00      	nop
 80009e0:	20000000 	.word	0x20000000
 80009e4:	0800347c 	.word	0x0800347c
 80009e8:	08003484 	.word	0x08003484

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b090      	sub	sp, #64	@ 0x40
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0318 	add.w	r3, r7, #24
 80009f6:	2228      	movs	r2, #40	@ 0x28
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 fd06 	bl	800340c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a20:	2302      	movs	r3, #2
 8000a22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a2a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a30:	f107 0318 	add.w	r3, r7, #24
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 fc53 	bl	80022e0 <HAL_RCC_OscConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a40:	f000 f9c6 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a44:	230f      	movs	r3, #15
 8000a46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fec0 	bl	80027e4 <HAL_RCC_ClockConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a6a:	f000 f9b1 	bl	8000dd0 <Error_Handler>
  }
}
 8000a6e:	bf00      	nop
 8000a70:	3740      	adds	r7, #64	@ 0x40
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <MX_I2C2_Init+0x50>)
 8000a7e:	4a13      	ldr	r2, [pc, #76]	@ (8000acc <MX_I2C2_Init+0x54>)
 8000a80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_I2C2_Init+0x50>)
 8000a84:	4a12      	ldr	r2, [pc, #72]	@ (8000ad0 <MX_I2C2_Init+0x58>)
 8000a86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <MX_I2C2_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 254;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <MX_I2C2_Init+0x50>)
 8000a90:	22fe      	movs	r2, #254	@ 0xfe
 8000a92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <MX_I2C2_Init+0x50>)
 8000a96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a9a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <MX_I2C2_Init+0x50>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <MX_I2C2_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <MX_I2C2_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <MX_I2C2_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	@ (8000ac8 <MX_I2C2_Init+0x50>)
 8000ab6:	f000 fe49 	bl	800174c <HAL_I2C_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ac0:	f000 f986 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000046c 	.word	0x2000046c
 8000acc:	40005800 	.word	0x40005800
 8000ad0:	000186a0 	.word	0x000186a0

08000ad4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000af2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000af6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (72- 1);
 8000af8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000afa:	2247      	movs	r2, #71	@ 0x47
 8000afc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8000b04:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000b06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b18:	4813      	ldr	r0, [pc, #76]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000b1a:	f001 fff1 	bl	8002b00 <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b24:	f000 f954 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000b36:	f002 f922 	bl	8002d7e <HAL_TIM_ConfigClockSource>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b40:	f000 f946 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <MX_TIM2_Init+0x94>)
 8000b52:	f002 fb0d 	bl	8003170 <HAL_TIMEx_MasterConfigSynchronization>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b5c:	f000 f938 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200004c0 	.word	0x200004c0

08000b6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b80:	463b      	mov	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_TIM3_Init+0x90>)
 8000b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8000c00 <MX_TIM3_Init+0x94>)
 8000b8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <MX_TIM3_Init+0x90>)
 8000b90:	2247      	movs	r2, #71	@ 0x47
 8000b92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_TIM3_Init+0x90>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000b9a:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <MX_TIM3_Init+0x90>)
 8000b9c:	2263      	movs	r2, #99	@ 0x63
 8000b9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba0:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <MX_TIM3_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <MX_TIM3_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bac:	4813      	ldr	r0, [pc, #76]	@ (8000bfc <MX_TIM3_Init+0x90>)
 8000bae:	f001 ffa7 	bl	8002b00 <HAL_TIM_Base_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000bb8:	f000 f90a 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <MX_TIM3_Init+0x90>)
 8000bca:	f002 f8d8 	bl	8002d7e <HAL_TIM_ConfigClockSource>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000bd4:	f000 f8fc 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_TIM3_Init+0x90>)
 8000be6:	f002 fac3 	bl	8003170 <HAL_TIMEx_MasterConfigSynchronization>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000bf0:	f000 f8ee 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000508 	.word	0x20000508
 8000c00:	40000400 	.word	0x40000400

08000c04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <MX_USART1_UART_Init+0x50>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c3c:	f002 fb08 	bl	8003250 <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c46:	f000 f8c3 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000550 	.word	0x20000550
 8000c54:	40013800 	.word	0x40013800

08000c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6c:	4b54      	ldr	r3, [pc, #336]	@ (8000dc0 <MX_GPIO_Init+0x168>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a53      	ldr	r2, [pc, #332]	@ (8000dc0 <MX_GPIO_Init+0x168>)
 8000c72:	f043 0310 	orr.w	r3, r3, #16
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b51      	ldr	r3, [pc, #324]	@ (8000dc0 <MX_GPIO_Init+0x168>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0310 	and.w	r3, r3, #16
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c84:	4b4e      	ldr	r3, [pc, #312]	@ (8000dc0 <MX_GPIO_Init+0x168>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a4d      	ldr	r2, [pc, #308]	@ (8000dc0 <MX_GPIO_Init+0x168>)
 8000c8a:	f043 0320 	orr.w	r3, r3, #32
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b4b      	ldr	r3, [pc, #300]	@ (8000dc0 <MX_GPIO_Init+0x168>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0320 	and.w	r3, r3, #32
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	4b48      	ldr	r3, [pc, #288]	@ (8000dc0 <MX_GPIO_Init+0x168>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a47      	ldr	r2, [pc, #284]	@ (8000dc0 <MX_GPIO_Init+0x168>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b45      	ldr	r3, [pc, #276]	@ (8000dc0 <MX_GPIO_Init+0x168>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb4:	4b42      	ldr	r3, [pc, #264]	@ (8000dc0 <MX_GPIO_Init+0x168>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a41      	ldr	r2, [pc, #260]	@ (8000dc0 <MX_GPIO_Init+0x168>)
 8000cba:	f043 0308 	orr.w	r3, r3, #8
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b3f      	ldr	r3, [pc, #252]	@ (8000dc0 <MX_GPIO_Init+0x168>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0308 	and.w	r3, r3, #8
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cd2:	483c      	ldr	r0, [pc, #240]	@ (8000dc4 <MX_GPIO_Init+0x16c>)
 8000cd4:	f000 fd22 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA3_TEMP_DATA_GPIO_Port, PA3_TEMP_DATA_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2108      	movs	r1, #8
 8000cdc:	483a      	ldr	r0, [pc, #232]	@ (8000dc8 <MX_GPIO_Init+0x170>)
 8000cde:	f000 fd1d 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin|PB6_LED1_Pin, GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f24e 0140 	movw	r1, #57408	@ 0xe040
 8000ce8:	4838      	ldr	r0, [pc, #224]	@ (8000dcc <MX_GPIO_Init+0x174>)
 8000cea:	f000 fd17 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	4836      	ldr	r0, [pc, #216]	@ (8000dcc <MX_GPIO_Init+0x174>)
 8000cf4:	f000 fd12 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8000cf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4619      	mov	r1, r3
 8000d10:	482c      	ldr	r0, [pc, #176]	@ (8000dc4 <MX_GPIO_Init+0x16c>)
 8000d12:	f000 fb7f 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_Pin;
 8000d16:	2301      	movs	r3, #1
 8000d18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_SW_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	4619      	mov	r1, r3
 8000d28:	4827      	ldr	r0, [pc, #156]	@ (8000dc8 <MX_GPIO_Init+0x170>)
 8000d2a:	f000 fb73 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3_TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = PA3_TEMP_DATA_Pin;
 8000d2e:	2308      	movs	r3, #8
 8000d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA3_TEMP_DATA_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4619      	mov	r1, r3
 8000d44:	4820      	ldr	r0, [pc, #128]	@ (8000dc8 <MX_GPIO_Init+0x170>)
 8000d46:	f000 fb65 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0_TEMP_SET_UP_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB0_TEMP_SET_UP_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	481b      	ldr	r0, [pc, #108]	@ (8000dcc <MX_GPIO_Init+0x174>)
 8000d5e:	f000 fb59 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_RCLK_Pin FND_DIO_Pin FND_SCLK_Pin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin;
 8000d62:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4814      	ldr	r0, [pc, #80]	@ (8000dcc <MX_GPIO_Init+0x174>)
 8000d7c:	f000 fb4a 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5_RELAY_ON_OFF_CTRL_Pin */
  GPIO_InitStruct.Pin = PB5_RELAY_ON_OFF_CTRL_Pin;
 8000d80:	2320      	movs	r3, #32
 8000d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4619      	mov	r1, r3
 8000d96:	480d      	ldr	r0, [pc, #52]	@ (8000dcc <MX_GPIO_Init+0x174>)
 8000d98:	f000 fb3c 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6_LED1_Pin */
  GPIO_InitStruct.Pin = PB6_LED1_Pin;
 8000d9c:	2340      	movs	r3, #64	@ 0x40
 8000d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB6_LED1_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	4806      	ldr	r0, [pc, #24]	@ (8000dcc <MX_GPIO_Init+0x174>)
 8000db4:	f000 fb2e 	bl	8001414 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40011000 	.word	0x40011000
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	40010c00 	.word	0x40010c00

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <Error_Handler+0x8>

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <HAL_MspInit+0x5c>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	4a14      	ldr	r2, [pc, #80]	@ (8000e38 <HAL_MspInit+0x5c>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6193      	str	r3, [r2, #24]
 8000dee:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <HAL_MspInit+0x5c>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <HAL_MspInit+0x5c>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000e38 <HAL_MspInit+0x5c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e04:	61d3      	str	r3, [r2, #28]
 8000e06:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <HAL_MspInit+0x5c>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <HAL_MspInit+0x60>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <HAL_MspInit+0x60>)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010000 	.word	0x40010000

08000e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a16      	ldr	r2, [pc, #88]	@ (8000eb4 <HAL_I2C_MspInit+0x74>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d124      	bne.n	8000eaa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <HAL_I2C_MspInit+0x78>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <HAL_I2C_MspInit+0x78>)
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_I2C_MspInit+0x78>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0308 	and.w	r3, r3, #8
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e78:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7e:	2312      	movs	r3, #18
 8000e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480b      	ldr	r0, [pc, #44]	@ (8000ebc <HAL_I2C_MspInit+0x7c>)
 8000e8e:	f000 fac1 	bl	8001414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e92:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <HAL_I2C_MspInit+0x78>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a08      	ldr	r2, [pc, #32]	@ (8000eb8 <HAL_I2C_MspInit+0x78>)
 8000e98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_I2C_MspInit+0x78>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3720      	adds	r7, #32
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40005800 	.word	0x40005800
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010c00 	.word	0x40010c00

08000ec0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ed0:	d114      	bne.n	8000efc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed2:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <HAL_TIM_Base_MspInit+0x78>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a18      	ldr	r2, [pc, #96]	@ (8000f38 <HAL_TIM_Base_MspInit+0x78>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <HAL_TIM_Base_MspInit+0x78>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	201c      	movs	r0, #28
 8000ef0:	f000 fa59 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ef4:	201c      	movs	r0, #28
 8000ef6:	f000 fa72 	bl	80013de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000efa:	e018      	b.n	8000f2e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0e      	ldr	r2, [pc, #56]	@ (8000f3c <HAL_TIM_Base_MspInit+0x7c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d113      	bne.n	8000f2e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <HAL_TIM_Base_MspInit+0x78>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f38 <HAL_TIM_Base_MspInit+0x78>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <HAL_TIM_Base_MspInit+0x78>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	210a      	movs	r1, #10
 8000f22:	201d      	movs	r0, #29
 8000f24:	f000 fa3f 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f28:	201d      	movs	r0, #29
 8000f2a:	f000 fa58 	bl	80013de <HAL_NVIC_EnableIRQ>
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40000400 	.word	0x40000400

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fcc <HAL_UART_MspInit+0x8c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d131      	bne.n	8000fc4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f60:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <HAL_UART_MspInit+0x90>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd0 <HAL_UART_MspInit+0x90>)
 8000f66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <HAL_UART_MspInit+0x90>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_UART_MspInit+0x90>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a14      	ldr	r2, [pc, #80]	@ (8000fd0 <HAL_UART_MspInit+0x90>)
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <HAL_UART_MspInit+0x90>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480b      	ldr	r0, [pc, #44]	@ (8000fd4 <HAL_UART_MspInit+0x94>)
 8000fa6:	f000 fa35 	bl	8001414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <HAL_UART_MspInit+0x94>)
 8000fc0:	f000 fa28 	bl	8001414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40013800 	.word	0x40013800
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010800 	.word	0x40010800

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <NMI_Handler+0x4>

08000fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <MemManage_Handler+0x4>

08000ff0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <UsageFault_Handler+0x4>

08001000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 f8a6 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  m_time ++;
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <TIM2_IRQHandler+0x18>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a03      	ldr	r2, [pc, #12]	@ (8001048 <TIM2_IRQHandler+0x18>)
 800103c:	6013      	str	r3, [r2, #0]
  //}



  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800103e:	4803      	ldr	r0, [pc, #12]	@ (800104c <TIM2_IRQHandler+0x1c>)
 8001040:	f001 fdad 	bl	8002b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000598 	.word	0x20000598
 800104c:	200004c0 	.word	0x200004c0

08001050 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
if(isTemperSensorInit() && !isBusy()){
 8001054:	f7ff f8a0 	bl	8000198 <isTemperSensorInit>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d012      	beq.n	8001084 <TIM3_IRQHandler+0x34>
 800105e:	f7ff f8a5 	bl	80001ac <isBusy>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10d      	bne.n	8001084 <TIM3_IRQHandler+0x34>
	digit4_temper((int)getCurrentTemper() * 10 );
 8001068:	f7ff f8a8 	bl	80001bc <getCurrentTemper>
 800106c:	4603      	mov	r3, r0
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f86c 	bl	800014c <__aeabi_f2iz>
 8001074:	4602      	mov	r2, r0
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fbc2 	bl	8000808 <digit4_temper>
}
//digit4_temper((int)getCurrentTemper() * 10 );

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001084:	4802      	ldr	r0, [pc, #8]	@ (8001090 <TIM3_IRQHandler+0x40>)
 8001086:	f001 fd8a 	bl	8002b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000508 	.word	0x20000508

08001094 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a0:	f7ff fff8 	bl	8001094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a4:	480b      	ldr	r0, [pc, #44]	@ (80010d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010a6:	490c      	ldr	r1, [pc, #48]	@ (80010d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010a8:	4a0c      	ldr	r2, [pc, #48]	@ (80010dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a09      	ldr	r2, [pc, #36]	@ (80010e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010bc:	4c09      	ldr	r4, [pc, #36]	@ (80010e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ca:	f002 f9a7 	bl	800341c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ce:	f7ff fc57 	bl	8000980 <main>
  bx lr
 80010d2:	4770      	bx	lr
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010dc:	08004220 	.word	0x08004220
  ldr r2, =_sbss
 80010e0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80010e4:	200005a0 	.word	0x200005a0

080010e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_2_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <HAL_Init+0x28>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	@ (8001114 <HAL_Init+0x28>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f947 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	200f      	movs	r0, #15
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fe68 	bl	8000ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f95f 	bl	80013fa <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 f927 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	@ (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000008 	.word	0x20000008
 8001170:	20000010 	.word	0x20000010
 8001174:	2000000c 	.word	0x2000000c

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <HAL_IncTick+0x1c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_IncTick+0x20>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a03      	ldr	r2, [pc, #12]	@ (8001198 <HAL_IncTick+0x20>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	20000010 	.word	0x20000010
 8001198:	2000059c 	.word	0x2000059c

0800119c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b02      	ldr	r3, [pc, #8]	@ (80011ac <HAL_GetTick+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	2000059c 	.word	0x2000059c

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff fff0 	bl	800119c <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffe0 	bl	800119c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000010 	.word	0x20000010

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4906      	ldr	r1, [pc, #24]	@ (8001290 <__NVIC_EnableIRQ+0x34>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	@ (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	@ (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	@ 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	@ 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ff90 	bl	8001294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	@ (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff2d 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff42 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff90 	bl	80012e8 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5f 	bl	8001294 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff35 	bl	800125c <__NVIC_EnableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffa2 	bl	800134c <SysTick_Config>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b480      	push	{r7}
 8001416:	b08b      	sub	sp, #44	@ 0x2c
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001426:	e169      	b.n	80016fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001428:	2201      	movs	r2, #1
 800142a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	429a      	cmp	r2, r3
 8001442:	f040 8158 	bne.w	80016f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4a9a      	ldr	r2, [pc, #616]	@ (80016b4 <HAL_GPIO_Init+0x2a0>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d05e      	beq.n	800150e <HAL_GPIO_Init+0xfa>
 8001450:	4a98      	ldr	r2, [pc, #608]	@ (80016b4 <HAL_GPIO_Init+0x2a0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d875      	bhi.n	8001542 <HAL_GPIO_Init+0x12e>
 8001456:	4a98      	ldr	r2, [pc, #608]	@ (80016b8 <HAL_GPIO_Init+0x2a4>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d058      	beq.n	800150e <HAL_GPIO_Init+0xfa>
 800145c:	4a96      	ldr	r2, [pc, #600]	@ (80016b8 <HAL_GPIO_Init+0x2a4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d86f      	bhi.n	8001542 <HAL_GPIO_Init+0x12e>
 8001462:	4a96      	ldr	r2, [pc, #600]	@ (80016bc <HAL_GPIO_Init+0x2a8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d052      	beq.n	800150e <HAL_GPIO_Init+0xfa>
 8001468:	4a94      	ldr	r2, [pc, #592]	@ (80016bc <HAL_GPIO_Init+0x2a8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d869      	bhi.n	8001542 <HAL_GPIO_Init+0x12e>
 800146e:	4a94      	ldr	r2, [pc, #592]	@ (80016c0 <HAL_GPIO_Init+0x2ac>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d04c      	beq.n	800150e <HAL_GPIO_Init+0xfa>
 8001474:	4a92      	ldr	r2, [pc, #584]	@ (80016c0 <HAL_GPIO_Init+0x2ac>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d863      	bhi.n	8001542 <HAL_GPIO_Init+0x12e>
 800147a:	4a92      	ldr	r2, [pc, #584]	@ (80016c4 <HAL_GPIO_Init+0x2b0>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d046      	beq.n	800150e <HAL_GPIO_Init+0xfa>
 8001480:	4a90      	ldr	r2, [pc, #576]	@ (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d85d      	bhi.n	8001542 <HAL_GPIO_Init+0x12e>
 8001486:	2b12      	cmp	r3, #18
 8001488:	d82a      	bhi.n	80014e0 <HAL_GPIO_Init+0xcc>
 800148a:	2b12      	cmp	r3, #18
 800148c:	d859      	bhi.n	8001542 <HAL_GPIO_Init+0x12e>
 800148e:	a201      	add	r2, pc, #4	@ (adr r2, 8001494 <HAL_GPIO_Init+0x80>)
 8001490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001494:	0800150f 	.word	0x0800150f
 8001498:	080014e9 	.word	0x080014e9
 800149c:	080014fb 	.word	0x080014fb
 80014a0:	0800153d 	.word	0x0800153d
 80014a4:	08001543 	.word	0x08001543
 80014a8:	08001543 	.word	0x08001543
 80014ac:	08001543 	.word	0x08001543
 80014b0:	08001543 	.word	0x08001543
 80014b4:	08001543 	.word	0x08001543
 80014b8:	08001543 	.word	0x08001543
 80014bc:	08001543 	.word	0x08001543
 80014c0:	08001543 	.word	0x08001543
 80014c4:	08001543 	.word	0x08001543
 80014c8:	08001543 	.word	0x08001543
 80014cc:	08001543 	.word	0x08001543
 80014d0:	08001543 	.word	0x08001543
 80014d4:	08001543 	.word	0x08001543
 80014d8:	080014f1 	.word	0x080014f1
 80014dc:	08001505 	.word	0x08001505
 80014e0:	4a79      	ldr	r2, [pc, #484]	@ (80016c8 <HAL_GPIO_Init+0x2b4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d013      	beq.n	800150e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014e6:	e02c      	b.n	8001542 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	623b      	str	r3, [r7, #32]
          break;
 80014ee:	e029      	b.n	8001544 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	3304      	adds	r3, #4
 80014f6:	623b      	str	r3, [r7, #32]
          break;
 80014f8:	e024      	b.n	8001544 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	3308      	adds	r3, #8
 8001500:	623b      	str	r3, [r7, #32]
          break;
 8001502:	e01f      	b.n	8001544 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	330c      	adds	r3, #12
 800150a:	623b      	str	r3, [r7, #32]
          break;
 800150c:	e01a      	b.n	8001544 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d102      	bne.n	800151c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001516:	2304      	movs	r3, #4
 8001518:	623b      	str	r3, [r7, #32]
          break;
 800151a:	e013      	b.n	8001544 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d105      	bne.n	8001530 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001524:	2308      	movs	r3, #8
 8001526:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	611a      	str	r2, [r3, #16]
          break;
 800152e:	e009      	b.n	8001544 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001530:	2308      	movs	r3, #8
 8001532:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	615a      	str	r2, [r3, #20]
          break;
 800153a:	e003      	b.n	8001544 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
          break;
 8001540:	e000      	b.n	8001544 <HAL_GPIO_Init+0x130>
          break;
 8001542:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2bff      	cmp	r3, #255	@ 0xff
 8001548:	d801      	bhi.n	800154e <HAL_GPIO_Init+0x13a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	e001      	b.n	8001552 <HAL_GPIO_Init+0x13e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3304      	adds	r3, #4
 8001552:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	2bff      	cmp	r3, #255	@ 0xff
 8001558:	d802      	bhi.n	8001560 <HAL_GPIO_Init+0x14c>
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	e002      	b.n	8001566 <HAL_GPIO_Init+0x152>
 8001560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001562:	3b08      	subs	r3, #8
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	210f      	movs	r1, #15
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	401a      	ands	r2, r3
 8001578:	6a39      	ldr	r1, [r7, #32]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	431a      	orrs	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 80b1 	beq.w	80016f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001594:	4b4d      	ldr	r3, [pc, #308]	@ (80016cc <HAL_GPIO_Init+0x2b8>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a4c      	ldr	r2, [pc, #304]	@ (80016cc <HAL_GPIO_Init+0x2b8>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b4a      	ldr	r3, [pc, #296]	@ (80016cc <HAL_GPIO_Init+0x2b8>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015ac:	4a48      	ldr	r2, [pc, #288]	@ (80016d0 <HAL_GPIO_Init+0x2bc>)
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4013      	ands	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a40      	ldr	r2, [pc, #256]	@ (80016d4 <HAL_GPIO_Init+0x2c0>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d013      	beq.n	8001600 <HAL_GPIO_Init+0x1ec>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a3f      	ldr	r2, [pc, #252]	@ (80016d8 <HAL_GPIO_Init+0x2c4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d00d      	beq.n	80015fc <HAL_GPIO_Init+0x1e8>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a3e      	ldr	r2, [pc, #248]	@ (80016dc <HAL_GPIO_Init+0x2c8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d007      	beq.n	80015f8 <HAL_GPIO_Init+0x1e4>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a3d      	ldr	r2, [pc, #244]	@ (80016e0 <HAL_GPIO_Init+0x2cc>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d101      	bne.n	80015f4 <HAL_GPIO_Init+0x1e0>
 80015f0:	2303      	movs	r3, #3
 80015f2:	e006      	b.n	8001602 <HAL_GPIO_Init+0x1ee>
 80015f4:	2304      	movs	r3, #4
 80015f6:	e004      	b.n	8001602 <HAL_GPIO_Init+0x1ee>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e002      	b.n	8001602 <HAL_GPIO_Init+0x1ee>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <HAL_GPIO_Init+0x1ee>
 8001600:	2300      	movs	r3, #0
 8001602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001604:	f002 0203 	and.w	r2, r2, #3
 8001608:	0092      	lsls	r2, r2, #2
 800160a:	4093      	lsls	r3, r2
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001612:	492f      	ldr	r1, [pc, #188]	@ (80016d0 <HAL_GPIO_Init+0x2bc>)
 8001614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3302      	adds	r3, #2
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d006      	beq.n	800163a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800162c:	4b2d      	ldr	r3, [pc, #180]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	492c      	ldr	r1, [pc, #176]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	608b      	str	r3, [r1, #8]
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800163a:	4b2a      	ldr	r3, [pc, #168]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	43db      	mvns	r3, r3
 8001642:	4928      	ldr	r1, [pc, #160]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 8001644:	4013      	ands	r3, r2
 8001646:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001654:	4b23      	ldr	r3, [pc, #140]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	4922      	ldr	r1, [pc, #136]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	60cb      	str	r3, [r1, #12]
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	43db      	mvns	r3, r3
 800166a:	491e      	ldr	r1, [pc, #120]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 800166c:	4013      	ands	r3, r2
 800166e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d006      	beq.n	800168a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800167c:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4918      	ldr	r1, [pc, #96]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800168a:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	43db      	mvns	r3, r3
 8001692:	4914      	ldr	r1, [pc, #80]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 8001694:	4013      	ands	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d021      	beq.n	80016e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016a4:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	490e      	ldr	r1, [pc, #56]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
 80016b0:	e021      	b.n	80016f6 <HAL_GPIO_Init+0x2e2>
 80016b2:	bf00      	nop
 80016b4:	10320000 	.word	0x10320000
 80016b8:	10310000 	.word	0x10310000
 80016bc:	10220000 	.word	0x10220000
 80016c0:	10210000 	.word	0x10210000
 80016c4:	10120000 	.word	0x10120000
 80016c8:	10110000 	.word	0x10110000
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010000 	.word	0x40010000
 80016d4:	40010800 	.word	0x40010800
 80016d8:	40010c00 	.word	0x40010c00
 80016dc:	40011000 	.word	0x40011000
 80016e0:	40011400 	.word	0x40011400
 80016e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_GPIO_Init+0x304>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	4909      	ldr	r1, [pc, #36]	@ (8001718 <HAL_GPIO_Init+0x304>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	3301      	adds	r3, #1
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	f47f ae8e 	bne.w	8001428 <HAL_GPIO_Init+0x14>
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	372c      	adds	r7, #44	@ 0x2c
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	40010400 	.word	0x40010400

0800171c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
 8001728:	4613      	mov	r3, r2
 800172a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800172c:	787b      	ldrb	r3, [r7, #1]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001732:	887a      	ldrh	r2, [r7, #2]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001738:	e003      	b.n	8001742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	041a      	lsls	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	611a      	str	r2, [r3, #16]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e12b      	b.n	80019b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fb64 	bl	8000e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2224      	movs	r2, #36	@ 0x24
 800177c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0201 	bic.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800179e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017b0:	f001 f960 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 80017b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a81      	ldr	r2, [pc, #516]	@ (80019c0 <HAL_I2C_Init+0x274>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d807      	bhi.n	80017d0 <HAL_I2C_Init+0x84>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4a80      	ldr	r2, [pc, #512]	@ (80019c4 <HAL_I2C_Init+0x278>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	bf94      	ite	ls
 80017c8:	2301      	movls	r3, #1
 80017ca:	2300      	movhi	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	e006      	b.n	80017de <HAL_I2C_Init+0x92>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4a7d      	ldr	r2, [pc, #500]	@ (80019c8 <HAL_I2C_Init+0x27c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	bf94      	ite	ls
 80017d8:	2301      	movls	r3, #1
 80017da:	2300      	movhi	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e0e7      	b.n	80019b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4a78      	ldr	r2, [pc, #480]	@ (80019cc <HAL_I2C_Init+0x280>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	0c9b      	lsrs	r3, r3, #18
 80017f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	430a      	orrs	r2, r1
 8001804:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a6a      	ldr	r2, [pc, #424]	@ (80019c0 <HAL_I2C_Init+0x274>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d802      	bhi.n	8001820 <HAL_I2C_Init+0xd4>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	3301      	adds	r3, #1
 800181e:	e009      	b.n	8001834 <HAL_I2C_Init+0xe8>
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a69      	ldr	r2, [pc, #420]	@ (80019d0 <HAL_I2C_Init+0x284>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	099b      	lsrs	r3, r3, #6
 8001832:	3301      	adds	r3, #1
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	430b      	orrs	r3, r1
 800183a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001846:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	495c      	ldr	r1, [pc, #368]	@ (80019c0 <HAL_I2C_Init+0x274>)
 8001850:	428b      	cmp	r3, r1
 8001852:	d819      	bhi.n	8001888 <HAL_I2C_Init+0x13c>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1e59      	subs	r1, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001862:	1c59      	adds	r1, r3, #1
 8001864:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001868:	400b      	ands	r3, r1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00a      	beq.n	8001884 <HAL_I2C_Init+0x138>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1e59      	subs	r1, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fbb1 f3f3 	udiv	r3, r1, r3
 800187c:	3301      	adds	r3, #1
 800187e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001882:	e051      	b.n	8001928 <HAL_I2C_Init+0x1dc>
 8001884:	2304      	movs	r3, #4
 8001886:	e04f      	b.n	8001928 <HAL_I2C_Init+0x1dc>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d111      	bne.n	80018b4 <HAL_I2C_Init+0x168>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1e58      	subs	r0, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6859      	ldr	r1, [r3, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	440b      	add	r3, r1
 800189e:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a2:	3301      	adds	r3, #1
 80018a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf0c      	ite	eq
 80018ac:	2301      	moveq	r3, #1
 80018ae:	2300      	movne	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	e012      	b.n	80018da <HAL_I2C_Init+0x18e>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e58      	subs	r0, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	0099      	lsls	r1, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf0c      	ite	eq
 80018d4:	2301      	moveq	r3, #1
 80018d6:	2300      	movne	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_I2C_Init+0x196>
 80018de:	2301      	movs	r3, #1
 80018e0:	e022      	b.n	8001928 <HAL_I2C_Init+0x1dc>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10e      	bne.n	8001908 <HAL_I2C_Init+0x1bc>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1e58      	subs	r0, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6859      	ldr	r1, [r3, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	440b      	add	r3, r1
 80018f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001906:	e00f      	b.n	8001928 <HAL_I2C_Init+0x1dc>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1e58      	subs	r0, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	0099      	lsls	r1, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	fbb0 f3f3 	udiv	r3, r0, r3
 800191e:	3301      	adds	r3, #1
 8001920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001924:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	6809      	ldr	r1, [r1, #0]
 800192c:	4313      	orrs	r3, r2
 800192e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69da      	ldr	r2, [r3, #28]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001956:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6911      	ldr	r1, [r2, #16]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68d2      	ldr	r2, [r2, #12]
 8001962:	4311      	orrs	r1, r2
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	430b      	orrs	r3, r1
 800196a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2220      	movs	r2, #32
 80019a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	000186a0 	.word	0x000186a0
 80019c4:	001e847f 	.word	0x001e847f
 80019c8:	003d08ff 	.word	0x003d08ff
 80019cc:	431bde83 	.word	0x431bde83
 80019d0:	10624dd3 	.word	0x10624dd3

080019d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	460b      	mov	r3, r1
 80019e2:	817b      	strh	r3, [r7, #10]
 80019e4:	4613      	mov	r3, r2
 80019e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff fbd8 	bl	800119c <HAL_GetTick>
 80019ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	f040 80e0 	bne.w	8001bbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2319      	movs	r3, #25
 8001a02:	2201      	movs	r2, #1
 8001a04:	4970      	ldr	r1, [pc, #448]	@ (8001bc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fa92 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a12:	2302      	movs	r3, #2
 8001a14:	e0d3      	b.n	8001bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_I2C_Master_Transmit+0x50>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e0cc      	b.n	8001bbe <HAL_I2C_Master_Transmit+0x1ea>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d007      	beq.n	8001a4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0201 	orr.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2221      	movs	r2, #33	@ 0x21
 8001a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2210      	movs	r2, #16
 8001a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	893a      	ldrh	r2, [r7, #8]
 8001a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4a50      	ldr	r2, [pc, #320]	@ (8001bcc <HAL_I2C_Master_Transmit+0x1f8>)
 8001a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a8c:	8979      	ldrh	r1, [r7, #10]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	6a3a      	ldr	r2, [r7, #32]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 f9ca 	bl	8001e2c <I2C_MasterRequestWrite>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e08d      	b.n	8001bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ab8:	e066      	b.n	8001b88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	6a39      	ldr	r1, [r7, #32]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 fb50 	bl	8002164 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d107      	bne.n	8001ae2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e06b      	b.n	8001bbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	781a      	ldrb	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d11b      	bne.n	8001b5c <HAL_I2C_Master_Transmit+0x188>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d017      	beq.n	8001b5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	6a39      	ldr	r1, [r7, #32]
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 fb47 	bl	80021f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00d      	beq.n	8001b88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d107      	bne.n	8001b84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e01a      	b.n	8001bbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d194      	bne.n	8001aba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e000      	b.n	8001bbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001bbc:	2302      	movs	r3, #2
  }
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	00100002 	.word	0x00100002
 8001bcc:	ffff0000 	.word	0xffff0000

08001bd0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff fadc 	bl	800119c <HAL_GetTick>
 8001be4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b20      	cmp	r3, #32
 8001bf4:	f040 8111 	bne.w	8001e1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	2319      	movs	r3, #25
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4988      	ldr	r1, [pc, #544]	@ (8001e24 <HAL_I2C_IsDeviceReady+0x254>)
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f994 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e104      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_I2C_IsDeviceReady+0x50>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e0fd      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x24c>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d007      	beq.n	8001c46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2224      	movs	r2, #36	@ 0x24
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4a70      	ldr	r2, [pc, #448]	@ (8001e28 <HAL_I2C_IsDeviceReady+0x258>)
 8001c68:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f952 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00d      	beq.n	8001cae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ca0:	d103      	bne.n	8001caa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ca8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0b6      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cae:	897b      	ldrh	r3, [r7, #10]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001cbc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001cbe:	f7ff fa6d 	bl	800119c <HAL_GetTick>
 8001cc2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	bf0c      	ite	eq
 8001cd2:	2301      	moveq	r3, #1
 8001cd4:	2300      	movne	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ce8:	bf0c      	ite	eq
 8001cea:	2301      	moveq	r3, #1
 8001cec:	2300      	movne	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001cf2:	e025      	b.n	8001d40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cf4:	f7ff fa52 	bl	800119c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d302      	bcc.n	8001d0a <HAL_I2C_IsDeviceReady+0x13a>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d103      	bne.n	8001d12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	22a0      	movs	r2, #160	@ 0xa0
 8001d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d36:	bf0c      	ite	eq
 8001d38:	2301      	moveq	r3, #1
 8001d3a:	2300      	movne	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d4a:	d005      	beq.n	8001d58 <HAL_I2C_IsDeviceReady+0x188>
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d102      	bne.n	8001d58 <HAL_I2C_IsDeviceReady+0x188>
 8001d52:	7dbb      	ldrb	r3, [r7, #22]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0cd      	beq.n	8001cf4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d129      	bne.n	8001dc2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2319      	movs	r3, #25
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4921      	ldr	r1, [pc, #132]	@ (8001e24 <HAL_I2C_IsDeviceReady+0x254>)
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 f8c6 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e036      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e02c      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001dda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2319      	movs	r3, #25
 8001de2:	2201      	movs	r2, #1
 8001de4:	490f      	ldr	r1, [pc, #60]	@ (8001e24 <HAL_I2C_IsDeviceReady+0x254>)
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f8a2 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e012      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f4ff af32 	bcc.w	8001c6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e1a:	2302      	movs	r3, #2
  }
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	00100002 	.word	0x00100002
 8001e28:	ffff0000 	.word	0xffff0000

08001e2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d006      	beq.n	8001e56 <I2C_MasterRequestWrite+0x2a>
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d003      	beq.n	8001e56 <I2C_MasterRequestWrite+0x2a>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e54:	d108      	bne.n	8001e68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e00b      	b.n	8001e80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6c:	2b12      	cmp	r3, #18
 8001e6e:	d107      	bne.n	8001e80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f84f 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00d      	beq.n	8001eb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ea6:	d103      	bne.n	8001eb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e035      	b.n	8001f20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ebc:	d108      	bne.n	8001ed0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ebe:	897b      	ldrh	r3, [r7, #10]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ecc:	611a      	str	r2, [r3, #16]
 8001ece:	e01b      	b.n	8001f08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ed0:	897b      	ldrh	r3, [r7, #10]
 8001ed2:	11db      	asrs	r3, r3, #7
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f003 0306 	and.w	r3, r3, #6
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f063 030f 	orn	r3, r3, #15
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	490e      	ldr	r1, [pc, #56]	@ (8001f28 <I2C_MasterRequestWrite+0xfc>)
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f898 	bl	8002024 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e010      	b.n	8001f20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001efe:	897b      	ldrh	r3, [r7, #10]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4907      	ldr	r1, [pc, #28]	@ (8001f2c <I2C_MasterRequestWrite+0x100>)
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f888 	bl	8002024 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	00010008 	.word	0x00010008
 8001f2c:	00010002 	.word	0x00010002

08001f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f40:	e048      	b.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d044      	beq.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4a:	f7ff f927 	bl	800119c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d302      	bcc.n	8001f60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d139      	bne.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	0c1b      	lsrs	r3, r3, #16
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10d      	bne.n	8001f86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	43da      	mvns	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	4013      	ands	r3, r2
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf0c      	ite	eq
 8001f7c:	2301      	moveq	r3, #1
 8001f7e:	2300      	movne	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	e00c      	b.n	8001fa0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d116      	bne.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	f043 0220 	orr.w	r2, r3, #32
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e023      	b.n	800201c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	0c1b      	lsrs	r3, r3, #16
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d10d      	bne.n	8001ffa <I2C_WaitOnFlagUntilTimeout+0xca>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	43da      	mvns	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	e00c      	b.n	8002014 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	43da      	mvns	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	4013      	ands	r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf0c      	ite	eq
 800200c:	2301      	moveq	r3, #1
 800200e:	2300      	movne	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	429a      	cmp	r2, r3
 8002018:	d093      	beq.n	8001f42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002032:	e071      	b.n	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002042:	d123      	bne.n	800208c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002052:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800205c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	f043 0204 	orr.w	r2, r3, #4
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e067      	b.n	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002092:	d041      	beq.n	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002094:	f7ff f882 	bl	800119c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d302      	bcc.n	80020aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d136      	bne.n	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	0c1b      	lsrs	r3, r3, #16
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10c      	bne.n	80020ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4013      	ands	r3, r2
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bf14      	ite	ne
 80020c6:	2301      	movne	r3, #1
 80020c8:	2300      	moveq	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	e00b      	b.n	80020e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	43da      	mvns	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	4013      	ands	r3, r2
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf14      	ite	ne
 80020e0:	2301      	movne	r3, #1
 80020e2:	2300      	moveq	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d016      	beq.n	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	f043 0220 	orr.w	r2, r3, #32
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e021      	b.n	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	0c1b      	lsrs	r3, r3, #16
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d10c      	bne.n	800213c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	43da      	mvns	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	4013      	ands	r3, r2
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf14      	ite	ne
 8002134:	2301      	movne	r3, #1
 8002136:	2300      	moveq	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	e00b      	b.n	8002154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4013      	ands	r3, r2
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	bf14      	ite	ne
 800214e:	2301      	movne	r3, #1
 8002150:	2300      	moveq	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	f47f af6d 	bne.w	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002170:	e034      	b.n	80021dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 f886 	bl	8002284 <I2C_IsAcknowledgeFailed>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e034      	b.n	80021ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d028      	beq.n	80021dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218a:	f7ff f807 	bl	800119c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	429a      	cmp	r2, r3
 8002198:	d302      	bcc.n	80021a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d11d      	bne.n	80021dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021aa:	2b80      	cmp	r3, #128	@ 0x80
 80021ac:	d016      	beq.n	80021dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	f043 0220 	orr.w	r2, r3, #32
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e007      	b.n	80021ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e6:	2b80      	cmp	r3, #128	@ 0x80
 80021e8:	d1c3      	bne.n	8002172 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002200:	e034      	b.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f83e 	bl	8002284 <I2C_IsAcknowledgeFailed>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e034      	b.n	800227c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d028      	beq.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221a:	f7fe ffbf 	bl	800119c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	429a      	cmp	r2, r3
 8002228:	d302      	bcc.n	8002230 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d11d      	bne.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b04      	cmp	r3, #4
 800223c:	d016      	beq.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e007      	b.n	800227c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b04      	cmp	r3, #4
 8002278:	d1c3      	bne.n	8002202 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800229a:	d11b      	bne.n	80022d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	f043 0204 	orr.w	r2, r3, #4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e272      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8087 	beq.w	800240e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002300:	4b92      	ldr	r3, [pc, #584]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b04      	cmp	r3, #4
 800230a:	d00c      	beq.n	8002326 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800230c:	4b8f      	ldr	r3, [pc, #572]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 030c 	and.w	r3, r3, #12
 8002314:	2b08      	cmp	r3, #8
 8002316:	d112      	bne.n	800233e <HAL_RCC_OscConfig+0x5e>
 8002318:	4b8c      	ldr	r3, [pc, #560]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002324:	d10b      	bne.n	800233e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002326:	4b89      	ldr	r3, [pc, #548]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d06c      	beq.n	800240c <HAL_RCC_OscConfig+0x12c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d168      	bne.n	800240c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e24c      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x76>
 8002348:	4b80      	ldr	r3, [pc, #512]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a7f      	ldr	r2, [pc, #508]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 800234e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	e02e      	b.n	80023b4 <HAL_RCC_OscConfig+0xd4>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x98>
 800235e:	4b7b      	ldr	r3, [pc, #492]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a7a      	ldr	r2, [pc, #488]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b78      	ldr	r3, [pc, #480]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a77      	ldr	r2, [pc, #476]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002370:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e01d      	b.n	80023b4 <HAL_RCC_OscConfig+0xd4>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0xbc>
 8002382:	4b72      	ldr	r3, [pc, #456]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a71      	ldr	r2, [pc, #452]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b6f      	ldr	r3, [pc, #444]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a6e      	ldr	r2, [pc, #440]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e00b      	b.n	80023b4 <HAL_RCC_OscConfig+0xd4>
 800239c:	4b6b      	ldr	r3, [pc, #428]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a6a      	ldr	r2, [pc, #424]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 80023a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b68      	ldr	r3, [pc, #416]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a67      	ldr	r2, [pc, #412]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 80023ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d013      	beq.n	80023e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023bc:	f7fe feee 	bl	800119c <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c4:	f7fe feea 	bl	800119c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	@ 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e200      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	4b5d      	ldr	r3, [pc, #372]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0xe4>
 80023e2:	e014      	b.n	800240e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe feda 	bl	800119c <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ec:	f7fe fed6 	bl	800119c <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	@ 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e1ec      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fe:	4b53      	ldr	r3, [pc, #332]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x10c>
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d063      	beq.n	80024e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800241a:	4b4c      	ldr	r3, [pc, #304]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00b      	beq.n	800243e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002426:	4b49      	ldr	r3, [pc, #292]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b08      	cmp	r3, #8
 8002430:	d11c      	bne.n	800246c <HAL_RCC_OscConfig+0x18c>
 8002432:	4b46      	ldr	r3, [pc, #280]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d116      	bne.n	800246c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243e:	4b43      	ldr	r3, [pc, #268]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <HAL_RCC_OscConfig+0x176>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d001      	beq.n	8002456 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e1c0      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002456:	4b3d      	ldr	r3, [pc, #244]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4939      	ldr	r1, [pc, #228]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002466:	4313      	orrs	r3, r2
 8002468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246a:	e03a      	b.n	80024e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002474:	4b36      	ldr	r3, [pc, #216]	@ (8002550 <HAL_RCC_OscConfig+0x270>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247a:	f7fe fe8f 	bl	800119c <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002482:	f7fe fe8b 	bl	800119c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e1a1      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002494:	4b2d      	ldr	r3, [pc, #180]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a0:	4b2a      	ldr	r3, [pc, #168]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4927      	ldr	r1, [pc, #156]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]
 80024b4:	e015      	b.n	80024e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b6:	4b26      	ldr	r3, [pc, #152]	@ (8002550 <HAL_RCC_OscConfig+0x270>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7fe fe6e 	bl	800119c <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c4:	f7fe fe6a 	bl	800119c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e180      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d6:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d03a      	beq.n	8002564 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d019      	beq.n	800252a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f6:	4b17      	ldr	r3, [pc, #92]	@ (8002554 <HAL_RCC_OscConfig+0x274>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fc:	f7fe fe4e 	bl	800119c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002504:	f7fe fe4a 	bl	800119c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e160      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002516:	4b0d      	ldr	r3, [pc, #52]	@ (800254c <HAL_RCC_OscConfig+0x26c>)
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002522:	2001      	movs	r0, #1
 8002524:	f000 face 	bl	8002ac4 <RCC_Delay>
 8002528:	e01c      	b.n	8002564 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252a:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <HAL_RCC_OscConfig+0x274>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002530:	f7fe fe34 	bl	800119c <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002536:	e00f      	b.n	8002558 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fe30 	bl	800119c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d908      	bls.n	8002558 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e146      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	42420000 	.word	0x42420000
 8002554:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002558:	4b92      	ldr	r3, [pc, #584]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1e9      	bne.n	8002538 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80a6 	beq.w	80026be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002576:	4b8b      	ldr	r3, [pc, #556]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10d      	bne.n	800259e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	4b88      	ldr	r3, [pc, #544]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4a87      	ldr	r2, [pc, #540]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800258c:	61d3      	str	r3, [r2, #28]
 800258e:	4b85      	ldr	r3, [pc, #532]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259a:	2301      	movs	r3, #1
 800259c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259e:	4b82      	ldr	r3, [pc, #520]	@ (80027a8 <HAL_RCC_OscConfig+0x4c8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d118      	bne.n	80025dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025aa:	4b7f      	ldr	r3, [pc, #508]	@ (80027a8 <HAL_RCC_OscConfig+0x4c8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a7e      	ldr	r2, [pc, #504]	@ (80027a8 <HAL_RCC_OscConfig+0x4c8>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b6:	f7fe fdf1 	bl	800119c <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025be:	f7fe fded 	bl	800119c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b64      	cmp	r3, #100	@ 0x64
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e103      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d0:	4b75      	ldr	r3, [pc, #468]	@ (80027a8 <HAL_RCC_OscConfig+0x4c8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x312>
 80025e4:	4b6f      	ldr	r3, [pc, #444]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4a6e      	ldr	r2, [pc, #440]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6213      	str	r3, [r2, #32]
 80025f0:	e02d      	b.n	800264e <HAL_RCC_OscConfig+0x36e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10c      	bne.n	8002614 <HAL_RCC_OscConfig+0x334>
 80025fa:	4b6a      	ldr	r3, [pc, #424]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	4a69      	ldr	r2, [pc, #420]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6213      	str	r3, [r2, #32]
 8002606:	4b67      	ldr	r3, [pc, #412]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	4a66      	ldr	r2, [pc, #408]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	f023 0304 	bic.w	r3, r3, #4
 8002610:	6213      	str	r3, [r2, #32]
 8002612:	e01c      	b.n	800264e <HAL_RCC_OscConfig+0x36e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b05      	cmp	r3, #5
 800261a:	d10c      	bne.n	8002636 <HAL_RCC_OscConfig+0x356>
 800261c:	4b61      	ldr	r3, [pc, #388]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4a60      	ldr	r2, [pc, #384]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	6213      	str	r3, [r2, #32]
 8002628:	4b5e      	ldr	r3, [pc, #376]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	4a5d      	ldr	r2, [pc, #372]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6213      	str	r3, [r2, #32]
 8002634:	e00b      	b.n	800264e <HAL_RCC_OscConfig+0x36e>
 8002636:	4b5b      	ldr	r3, [pc, #364]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a5a      	ldr	r2, [pc, #360]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	6213      	str	r3, [r2, #32]
 8002642:	4b58      	ldr	r3, [pc, #352]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	4a57      	ldr	r2, [pc, #348]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	f023 0304 	bic.w	r3, r3, #4
 800264c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d015      	beq.n	8002682 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002656:	f7fe fda1 	bl	800119c <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265e:	f7fe fd9d 	bl	800119c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0b1      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002674:	4b4b      	ldr	r3, [pc, #300]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ee      	beq.n	800265e <HAL_RCC_OscConfig+0x37e>
 8002680:	e014      	b.n	80026ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002682:	f7fe fd8b 	bl	800119c <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268a:	f7fe fd87 	bl	800119c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e09b      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a0:	4b40      	ldr	r3, [pc, #256]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ee      	bne.n	800268a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d105      	bne.n	80026be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b2:	4b3c      	ldr	r3, [pc, #240]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4a3b      	ldr	r2, [pc, #236]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8087 	beq.w	80027d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c8:	4b36      	ldr	r3, [pc, #216]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d061      	beq.n	8002798 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d146      	bne.n	800276a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026dc:	4b33      	ldr	r3, [pc, #204]	@ (80027ac <HAL_RCC_OscConfig+0x4cc>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fe fd5b 	bl	800119c <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ea:	f7fe fd57 	bl	800119c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e06d      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fc:	4b29      	ldr	r3, [pc, #164]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f0      	bne.n	80026ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002710:	d108      	bne.n	8002724 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002712:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	4921      	ldr	r1, [pc, #132]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002724:	4b1f      	ldr	r3, [pc, #124]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a19      	ldr	r1, [r3, #32]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002734:	430b      	orrs	r3, r1
 8002736:	491b      	ldr	r1, [pc, #108]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800273c:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <HAL_RCC_OscConfig+0x4cc>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7fe fd2b 	bl	800119c <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274a:	f7fe fd27 	bl	800119c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e03d      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800275c:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x46a>
 8002768:	e035      	b.n	80027d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276a:	4b10      	ldr	r3, [pc, #64]	@ (80027ac <HAL_RCC_OscConfig+0x4cc>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7fe fd14 	bl	800119c <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002778:	f7fe fd10 	bl	800119c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e026      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278a:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x498>
 8002796:	e01e      	b.n	80027d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d107      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e019      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40007000 	.word	0x40007000
 80027ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027b0:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <HAL_RCC_OscConfig+0x500>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40021000 	.word	0x40021000

080027e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0d0      	b.n	800299a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b6a      	ldr	r3, [pc, #424]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d910      	bls.n	8002828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b67      	ldr	r3, [pc, #412]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	4965      	ldr	r1, [pc, #404]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b63      	ldr	r3, [pc, #396]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0b8      	b.n	800299a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002840:	4b59      	ldr	r3, [pc, #356]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a58      	ldr	r2, [pc, #352]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800284a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002858:	4b53      	ldr	r3, [pc, #332]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a52      	ldr	r2, [pc, #328]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002862:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b50      	ldr	r3, [pc, #320]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	494d      	ldr	r1, [pc, #308]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d040      	beq.n	8002904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b47      	ldr	r3, [pc, #284]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d115      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07f      	b.n	800299a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a2:	4b41      	ldr	r3, [pc, #260]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e073      	b.n	800299a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b2:	4b3d      	ldr	r3, [pc, #244]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e06b      	b.n	800299a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b39      	ldr	r3, [pc, #228]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4936      	ldr	r1, [pc, #216]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7fe fc62 	bl	800119c <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7fe fc5e 	bl	800119c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e053      	b.n	800299a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b2d      	ldr	r3, [pc, #180]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b27      	ldr	r3, [pc, #156]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d210      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 0207 	bic.w	r2, r3, #7
 800291a:	4922      	ldr	r1, [pc, #136]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b20      	ldr	r3, [pc, #128]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e032      	b.n	800299a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b19      	ldr	r3, [pc, #100]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4916      	ldr	r1, [pc, #88]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800295e:	4b12      	ldr	r3, [pc, #72]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	490e      	ldr	r1, [pc, #56]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002972:	f000 f821 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	490a      	ldr	r1, [pc, #40]	@ (80029ac <HAL_RCC_ClockConfig+0x1c8>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	4a09      	ldr	r2, [pc, #36]	@ (80029b0 <HAL_RCC_ClockConfig+0x1cc>)
 800298c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fbc0 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40022000 	.word	0x40022000
 80029a8:	40021000 	.word	0x40021000
 80029ac:	080041ec 	.word	0x080041ec
 80029b0:	20000008 	.word	0x20000008
 80029b4:	2000000c 	.word	0x2000000c

080029b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029d2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x94>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d002      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x30>
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_GetSysClockFreq+0x36>
 80029e6:	e027      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029e8:	4b19      	ldr	r3, [pc, #100]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ea:	613b      	str	r3, [r7, #16]
      break;
 80029ec:	e027      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	0c9b      	lsrs	r3, r3, #18
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	4a17      	ldr	r2, [pc, #92]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029f8:	5cd3      	ldrb	r3, [r2, r3]
 80029fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d010      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a06:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	0c5b      	lsrs	r3, r3, #17
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	4a11      	ldr	r2, [pc, #68]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a12:	5cd3      	ldrb	r3, [r2, r3]
 8002a14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a0d      	ldr	r2, [pc, #52]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a1a:	fb03 f202 	mul.w	r2, r3, r2
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	e004      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	613b      	str	r3, [r7, #16]
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a3a:	613b      	str	r3, [r7, #16]
      break;
 8002a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3e:	693b      	ldr	r3, [r7, #16]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	007a1200 	.word	0x007a1200
 8002a54:	08004204 	.word	0x08004204
 8002a58:	08004214 	.word	0x08004214
 8002a5c:	003d0900 	.word	0x003d0900

08002a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a64:	4b02      	ldr	r3, [pc, #8]	@ (8002a70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	20000008 	.word	0x20000008

08002a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a78:	f7ff fff2 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	0a1b      	lsrs	r3, r3, #8
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	4903      	ldr	r1, [pc, #12]	@ (8002a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a8a:	5ccb      	ldrb	r3, [r1, r3]
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	080041fc 	.word	0x080041fc

08002a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aa0:	f7ff ffde 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	0adb      	lsrs	r3, r3, #11
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4903      	ldr	r1, [pc, #12]	@ (8002ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	080041fc 	.word	0x080041fc

08002ac4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002acc:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <RCC_Delay+0x34>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <RCC_Delay+0x38>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0a5b      	lsrs	r3, r3, #9
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ae0:	bf00      	nop
  }
  while (Delay --);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1e5a      	subs	r2, r3, #1
 8002ae6:	60fa      	str	r2, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f9      	bne.n	8002ae0 <RCC_Delay+0x1c>
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	20000008 	.word	0x20000008
 8002afc:	10624dd3 	.word	0x10624dd3

08002b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e041      	b.n	8002b96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe f9ca 	bl	8000ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f000 fa12 	bl	8002f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01b      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f06f 0202 	mvn.w	r2, #2
 8002bd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f9a1 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002bee:	e005      	b.n	8002bfc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f994 	bl	8002f1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f9a3 	bl	8002f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01b      	beq.n	8002c4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0204 	mvn.w	r2, #4
 8002c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f97b 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002c3a:	e005      	b.n	8002c48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f96e 	bl	8002f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f97d 	bl	8002f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d01b      	beq.n	8002c9a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f06f 0208 	mvn.w	r2, #8
 8002c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2204      	movs	r2, #4
 8002c70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f955 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002c86:	e005      	b.n	8002c94 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f948 	bl	8002f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f957 	bl	8002f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01b      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f06f 0210 	mvn.w	r2, #16
 8002cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2208      	movs	r2, #8
 8002cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f92f 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002cd2:	e005      	b.n	8002ce0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f922 	bl	8002f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f931 	bl	8002f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00c      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f06f 0201 	mvn.w	r2, #1
 8002d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f901 	bl	8002f0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00c      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fa88 	bl	800323e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00c      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f901 	bl	8002f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00c      	beq.n	8002d76 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f06f 0220 	mvn.w	r2, #32
 8002d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fa5b 	bl	800322c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_TIM_ConfigClockSource+0x1c>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e0b4      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x186>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002db8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dc0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dd2:	d03e      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0xd4>
 8002dd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dd8:	f200 8087 	bhi.w	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de0:	f000 8086 	beq.w	8002ef0 <HAL_TIM_ConfigClockSource+0x172>
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de8:	d87f      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002dea:	2b70      	cmp	r3, #112	@ 0x70
 8002dec:	d01a      	beq.n	8002e24 <HAL_TIM_ConfigClockSource+0xa6>
 8002dee:	2b70      	cmp	r3, #112	@ 0x70
 8002df0:	d87b      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002df2:	2b60      	cmp	r3, #96	@ 0x60
 8002df4:	d050      	beq.n	8002e98 <HAL_TIM_ConfigClockSource+0x11a>
 8002df6:	2b60      	cmp	r3, #96	@ 0x60
 8002df8:	d877      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002dfa:	2b50      	cmp	r3, #80	@ 0x50
 8002dfc:	d03c      	beq.n	8002e78 <HAL_TIM_ConfigClockSource+0xfa>
 8002dfe:	2b50      	cmp	r3, #80	@ 0x50
 8002e00:	d873      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002e02:	2b40      	cmp	r3, #64	@ 0x40
 8002e04:	d058      	beq.n	8002eb8 <HAL_TIM_ConfigClockSource+0x13a>
 8002e06:	2b40      	cmp	r3, #64	@ 0x40
 8002e08:	d86f      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002e0a:	2b30      	cmp	r3, #48	@ 0x30
 8002e0c:	d064      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0x15a>
 8002e0e:	2b30      	cmp	r3, #48	@ 0x30
 8002e10:	d86b      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d060      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0x15a>
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d867      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d05c      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0x15a>
 8002e1e:	2b10      	cmp	r3, #16
 8002e20:	d05a      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0x15a>
 8002e22:	e062      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e34:	f000 f97d 	bl	8003132 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e46:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	609a      	str	r2, [r3, #8]
      break;
 8002e50:	e04f      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e62:	f000 f966 	bl	8003132 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e74:	609a      	str	r2, [r3, #8]
      break;
 8002e76:	e03c      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e84:	461a      	mov	r2, r3
 8002e86:	f000 f8dd 	bl	8003044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2150      	movs	r1, #80	@ 0x50
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 f934 	bl	80030fe <TIM_ITRx_SetConfig>
      break;
 8002e96:	e02c      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f000 f8fb 	bl	80030a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2160      	movs	r1, #96	@ 0x60
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 f924 	bl	80030fe <TIM_ITRx_SetConfig>
      break;
 8002eb6:	e01c      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f000 f8bd 	bl	8003044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2140      	movs	r1, #64	@ 0x40
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 f914 	bl	80030fe <TIM_ITRx_SetConfig>
      break;
 8002ed6:	e00c      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	f000 f90b 	bl	80030fe <TIM_ITRx_SetConfig>
      break;
 8002ee8:	e003      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
      break;
 8002eee:	e000      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ef0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
	...

08002f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a2f      	ldr	r2, [pc, #188]	@ (8003038 <TIM_Base_SetConfig+0xd0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00b      	beq.n	8002f98 <TIM_Base_SetConfig+0x30>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f86:	d007      	beq.n	8002f98 <TIM_Base_SetConfig+0x30>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a2c      	ldr	r2, [pc, #176]	@ (800303c <TIM_Base_SetConfig+0xd4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_Base_SetConfig+0x30>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a2b      	ldr	r2, [pc, #172]	@ (8003040 <TIM_Base_SetConfig+0xd8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d108      	bne.n	8002faa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a22      	ldr	r2, [pc, #136]	@ (8003038 <TIM_Base_SetConfig+0xd0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00b      	beq.n	8002fca <TIM_Base_SetConfig+0x62>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb8:	d007      	beq.n	8002fca <TIM_Base_SetConfig+0x62>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800303c <TIM_Base_SetConfig+0xd4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d003      	beq.n	8002fca <TIM_Base_SetConfig+0x62>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003040 <TIM_Base_SetConfig+0xd8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d108      	bne.n	8002fdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a0d      	ldr	r2, [pc, #52]	@ (8003038 <TIM_Base_SetConfig+0xd0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d103      	bne.n	8003010 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f023 0201 	bic.w	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	611a      	str	r2, [r3, #16]
  }
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40000400 	.word	0x40000400
 8003040:	40000800 	.word	0x40000800

08003044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f023 0201 	bic.w	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800306e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f023 030a 	bic.w	r3, r3, #10
 8003080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0210 	bic.w	r2, r3, #16
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	031b      	lsls	r3, r3, #12
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	621a      	str	r2, [r3, #32]
}
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr

080030fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	f043 0307 	orr.w	r3, r3, #7
 8003120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	609a      	str	r2, [r3, #8]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003132:	b480      	push	{r7}
 8003134:	b087      	sub	sp, #28
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800314c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	021a      	lsls	r2, r3, #8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	431a      	orrs	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4313      	orrs	r3, r2
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	609a      	str	r2, [r3, #8]
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003184:	2302      	movs	r3, #2
 8003186:	e046      	b.n	8003216 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a16      	ldr	r2, [pc, #88]	@ (8003220 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d4:	d009      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a12      	ldr	r2, [pc, #72]	@ (8003224 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a10      	ldr	r2, [pc, #64]	@ (8003228 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10c      	bne.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	40012c00 	.word	0x40012c00
 8003224:	40000400 	.word	0x40000400
 8003228:	40000800 	.word	0x40000800

0800322c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e042      	b.n	80032e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd fe62 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2224      	movs	r2, #36	@ 0x24
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f82b 	bl	80032f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800332a:	f023 030c 	bic.w	r3, r3, #12
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	430b      	orrs	r3, r1
 8003336:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2c      	ldr	r2, [pc, #176]	@ (8003404 <UART_SetConfig+0x114>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d103      	bne.n	8003360 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003358:	f7ff fba0 	bl	8002a9c <HAL_RCC_GetPCLK2Freq>
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	e002      	b.n	8003366 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003360:	f7ff fb88 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 8003364:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	009a      	lsls	r2, r3, #2
 8003370:	441a      	add	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	4a22      	ldr	r2, [pc, #136]	@ (8003408 <UART_SetConfig+0x118>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	0119      	lsls	r1, r3, #4
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	009a      	lsls	r2, r3, #2
 8003390:	441a      	add	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	fbb2 f2f3 	udiv	r2, r2, r3
 800339c:	4b1a      	ldr	r3, [pc, #104]	@ (8003408 <UART_SetConfig+0x118>)
 800339e:	fba3 0302 	umull	r0, r3, r3, r2
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2064      	movs	r0, #100	@ 0x64
 80033a6:	fb00 f303 	mul.w	r3, r0, r3
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	3332      	adds	r3, #50	@ 0x32
 80033b0:	4a15      	ldr	r2, [pc, #84]	@ (8003408 <UART_SetConfig+0x118>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033bc:	4419      	add	r1, r3
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	009a      	lsls	r2, r3, #2
 80033c8:	441a      	add	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <UART_SetConfig+0x118>)
 80033d6:	fba3 0302 	umull	r0, r3, r3, r2
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	2064      	movs	r0, #100	@ 0x64
 80033de:	fb00 f303 	mul.w	r3, r0, r3
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	3332      	adds	r3, #50	@ 0x32
 80033e8:	4a07      	ldr	r2, [pc, #28]	@ (8003408 <UART_SetConfig+0x118>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	f003 020f 	and.w	r2, r3, #15
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	440a      	add	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40013800 	.word	0x40013800
 8003408:	51eb851f 	.word	0x51eb851f

0800340c <memset>:
 800340c:	4603      	mov	r3, r0
 800340e:	4402      	add	r2, r0
 8003410:	4293      	cmp	r3, r2
 8003412:	d100      	bne.n	8003416 <memset+0xa>
 8003414:	4770      	bx	lr
 8003416:	f803 1b01 	strb.w	r1, [r3], #1
 800341a:	e7f9      	b.n	8003410 <memset+0x4>

0800341c <__libc_init_array>:
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	2600      	movs	r6, #0
 8003420:	4d0c      	ldr	r5, [pc, #48]	@ (8003454 <__libc_init_array+0x38>)
 8003422:	4c0d      	ldr	r4, [pc, #52]	@ (8003458 <__libc_init_array+0x3c>)
 8003424:	1b64      	subs	r4, r4, r5
 8003426:	10a4      	asrs	r4, r4, #2
 8003428:	42a6      	cmp	r6, r4
 800342a:	d109      	bne.n	8003440 <__libc_init_array+0x24>
 800342c:	f000 f81a 	bl	8003464 <_init>
 8003430:	2600      	movs	r6, #0
 8003432:	4d0a      	ldr	r5, [pc, #40]	@ (800345c <__libc_init_array+0x40>)
 8003434:	4c0a      	ldr	r4, [pc, #40]	@ (8003460 <__libc_init_array+0x44>)
 8003436:	1b64      	subs	r4, r4, r5
 8003438:	10a4      	asrs	r4, r4, #2
 800343a:	42a6      	cmp	r6, r4
 800343c:	d105      	bne.n	800344a <__libc_init_array+0x2e>
 800343e:	bd70      	pop	{r4, r5, r6, pc}
 8003440:	f855 3b04 	ldr.w	r3, [r5], #4
 8003444:	4798      	blx	r3
 8003446:	3601      	adds	r6, #1
 8003448:	e7ee      	b.n	8003428 <__libc_init_array+0xc>
 800344a:	f855 3b04 	ldr.w	r3, [r5], #4
 800344e:	4798      	blx	r3
 8003450:	3601      	adds	r6, #1
 8003452:	e7f2      	b.n	800343a <__libc_init_array+0x1e>
 8003454:	08004218 	.word	0x08004218
 8003458:	08004218 	.word	0x08004218
 800345c:	08004218 	.word	0x08004218
 8003460:	0800421c 	.word	0x0800421c

08003464 <_init>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	bf00      	nop
 8003468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346a:	bc08      	pop	{r3}
 800346c:	469e      	mov	lr, r3
 800346e:	4770      	bx	lr

08003470 <_fini>:
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	bf00      	nop
 8003474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003476:	bc08      	pop	{r3}
 8003478:	469e      	mov	lr, r3
 800347a:	4770      	bx	lr
